<roblox xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.roblox.com/roblox.xsd" version="4">
	<External>null</External>
	<External>nil</External>
	<Item class="Tool" referent="RBXA17094C47A8E472291DC70E0238971BC">
		<Properties>
			<bool name="CanBeDropped">true</bool>
			<bool name="Enabled">true</bool>
			<CoordinateFrame name="Grip">
				<X>0</X>
				<Y>0</Y>
				<Z>0</Z>
				<R00>1</R00>
				<R01>0</R01>
				<R02>0</R02>
				<R10>0</R10>
				<R11>1</R11>
				<R12>0</R12>
				<R20>0</R20>
				<R21>0</R21>
				<R22>1</R22>
			</CoordinateFrame>
			<bool name="ManualActivationOnly">false</bool>
			<string name="Name">ROBLOXWorldTourLightningGuitar</string>
			<Content name="TextureId"><url>http://www.roblox.com/asset/?id=115985616</url></Content>
			<string name="ToolTip">TARANCHULA 4 LIFE!</string>
		</Properties>
		<Item class="Part" referent="RBX44842384F06F4633929EBF292C1844B8">
			<Properties>
				<bool name="Anchored">false</bool>
				<float name="BackParamA">-0.5</float>
				<float name="BackParamB">0.5</float>
				<token name="BackSurface">0</token>
				<token name="BackSurfaceInput">0</token>
				<float name="BottomParamA">-0.5</float>
				<float name="BottomParamB">0.5</float>
				<token name="BottomSurface">0</token>
				<token name="BottomSurfaceInput">0</token>
				<int name="BrickColor">194</int>
				<CoordinateFrame name="CFrame">
					<X>0.122891426</X>
					<Y>5.50438976</Y>
					<Z>-0.347362995</Z>
					<R00>0.707106769</R00>
					<R01>0.707106769</R01>
					<R02>3.78637246e-008</R02>
					<R10>-0.707106769</R10>
					<R11>0.707106769</R11>
					<R12>9.14111098e-008</R12>
					<R20>3.78637246e-008</R20>
					<R21>-9.14111098e-008</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<bool name="CanCollide">true</bool>
				<float name="Elasticity">0.5</float>
				<float name="Friction">0.300000012</float>
				<float name="FrontParamA">-0.5</float>
				<float name="FrontParamB">0.5</float>
				<token name="FrontSurface">0</token>
				<token name="FrontSurfaceInput">0</token>
				<float name="LeftParamA">-0.5</float>
				<float name="LeftParamB">0.5</float>
				<token name="LeftSurface">0</token>
				<token name="LeftSurfaceInput">0</token>
				<bool name="Locked">true</bool>
				<token name="Material">256</token>
				<string name="Name">Handle</string>
				<float name="Reflectance">0</float>
				<float name="RightParamA">-0.5</float>
				<float name="RightParamB">0.5</float>
				<token name="RightSurface">0</token>
				<token name="RightSurfaceInput">0</token>
				<Vector3 name="RotVelocity">
					<X>1</X>
					<Y>1</Y>
					<Z>1</Z>
				</Vector3>
				<float name="TopParamA">-0.5</float>
				<float name="TopParamB">0.5</float>
				<token name="TopSurface">0</token>
				<token name="TopSurfaceInput">0</token>
				<float name="Transparency">0</float>
				<Vector3 name="Velocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<token name="formFactorRaw">3</token>
				<token name="shape">1</token>
				<Vector3 name="size">
					<X>1</X>
					<Y>3.60000014</Y>
					<Z>1</Z>
				</Vector3>
			</Properties>
			<Item class="SpecialMesh" referent="RBX7406381B71394D01B579474AA225DCD9">
				<Properties>
					<token name="LODX">2</token>
					<token name="LODY">2</token>
					<Content name="MeshId"><url>http://www.roblox.com/asset/?id=115984912</url></Content>
					<token name="MeshType">5</token>
					<string name="Name">Mesh</string>
					<Vector3 name="Offset">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<Vector3 name="Scale">
						<X>1.29999995</X>
						<Y>1.29999995</Y>
						<Z>1.29999995</Z>
					</Vector3>
					<Content name="TextureId"><url>http://www.roblox.com/asset/?id=115984608</url></Content>
					<Vector3 name="VertexColor">
						<X>1</X>
						<Y>1</Y>
						<Z>1</Z>
					</Vector3>
				</Properties>
			</Item>
			<Item class="Sound" referent="RBX160941FE90A14F56937B528248FDAEA7">
				<Properties>
					<bool name="Looped">false</bool>
					<string name="Name">ChordSound</string>
					<float name="Pitch">1</float>
					<bool name="PlayOnRemove">false</bool>
					<Content name="SoundId"><url>http://www.roblox.com/asset?id=99170583</url></Content>
					<float name="Volume">1</float>
				</Properties>
			</Item>
			<Item class="Sound" referent="RBXD558064E6F454D838868EBE6ABBEC2F6">
				<Properties>
					<bool name="Looped">false</bool>
					<string name="Name">Thunder</string>
					<float name="Pitch">1</float>
					<bool name="PlayOnRemove">false</bool>
					<Content name="SoundId"><url>http://www.roblox.com/asset/?id=116041034</url></Content>
					<float name="Volume">1</float>
				</Properties>
			</Item>
		</Item>
		<Item class="Animation" referent="RBXADF3C46CC4464A3CA7ADA91BA3D7CDA9">
			<Properties>
				<Content name="AnimationId"><url>http://www.roblox.com/asset/?id=99198989</url></Content>
				<string name="Name">Pluck</string>
			</Properties>
		</Item>
		<Item class="Animation" referent="RBXF7F1A798C22141F59B941C935332DA5B">
			<Properties>
				<Content name="AnimationId"><url>http://www.roblox.com/asset/?id=99200153</url></Content>
				<string name="Name">Hold</string>
			</Properties>
		</Item>
		<Item class="Script" referent="RBX9BD17B5C0CF74422BE3F7DF27C321907">
			<Properties>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">Script</string>
				<ProtectedString name="Source"><![CDATA[--Rescripted by Luckymaxer

Tool = script.Parent
Handle = Tool:WaitForChild("Handle")

Players = game:GetService("Players")
Debris = game:GetService("Debris")

BaseUrl = "http://www.roblox.com/asset/?id="

Module = require(185791213)

NoteData = {
	Chords = {
		{Key = "z", Sound = {Normal = 99170172, Sharp = 99189531}},
		{Key = "x", Sound = {Normal = 99170311, Sharp = 99189711}},
		{Key = "c", Sound = {Normal = 99170354, Sharp = 99189785}},
		{Key = "v", Sound = {Normal = 99170403, Sharp = 99190216}},
		{Key = "b", Sound = {Normal = 99170481, Sharp = 99189905}},
		{Key = "n", Sound = {Normal = 99170537, Sharp = 99190021}},
		{Key = "m", Sound = {Normal = 99170583, Sharp = 99190550}}
	},
	Pitches = {
		{Key = "g", Pitch = 0.5},
		{Key = "h", Pitch = 0.75},
		{Key = "j", Pitch = 1},
		{Key = "k", Pitch = 1.25},
		{Key = "l", Pitch = 1.5},
	}
}

Animations = {
	Hold = {Animation = Tool:WaitForChild("Hold"), FadeTime = nil, Weight = nil, Speed = nil, Duration = nil},
	Pluck = {Animation = Tool:WaitForChild("Pluck"), FadeTime = nil, Weight = nil, Speed = nil, Duration = nil}
}

Sounds = {
	ChordSound = Handle:WaitForChild("ChordSound"),
	Thunder = Handle:WaitForChild("Thunder")
}

Grips = {
	Unequipped = CFrame.new(0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1),
	Equipped = CFrame.new(0.01923877, 1.19116962, 0.313162446, 0.49999997, 0.707106769, 0.49999997, 0.0564237535, 0.549525201, -0.833569586, -0.864185274, 0.444996685, 0.23486498)
}

BasePart = Instance.new("Part")
BasePart.Material = Enum.Material.Plastic
BasePart.TopSurface = Enum.SurfaceType.Smooth
BasePart.BottomSurface = Enum.SurfaceType.Smooth
BasePart.FormFactor = Enum.FormFactor.Custom
BasePart.Locked = true
BasePart.CanCollide = true
BasePart.Anchored = false

Rate = (1 / 60)

ChordDuration = 1

ShiftDown = false
IsPlayingMusic = false
CurrentNote = 1
CurrentPitch = NoteData.Pitches[3] --((NoteData.Pitches[1] and NoteData.Pitches[1]) or nil)

MetalSounds = {116040999, 116041034, 116041059, 116041079, 116041100, 116041137}
LightningRadius = 60

ToolEquipped = false

ClientControl = (Tool:FindFirstChild("ClientControl") or Instance.new("RemoteFunction"))
ClientControl.Name = "ClientControl"
ClientControl.Parent = Tool

ServerControl = (Tool:FindFirstChild("ServerControl") or Instance.new("RemoteFunction"))
ServerControl.Name = "ServerControl"
ServerControl.Parent = Tool

ServerControl.OnServerInvoke = (function(player, Mode, Value)
	if not Value or not ToolEquipped or not CheckIfAlive() then
		return
	end
	if Mode == "KeyPress" then
		local Down = Value.Down
		local Key = string.lower(Value.Key)
		local ByteKey = string.byte(Key)
		local Down = Value.Down
		if Key == "0" or ByteKey == 48 then
			ShiftDown = Down
		else
			if Down then
				if IsPlayingMusic then
					for i, v in pairs(NoteData.Chords) do
						if v.Key == Key then
							local Duration = 1
							local Chord = v
							local SoundId = ((not ShiftDown and v.Sound.Normal) or v.Sound.Sharp)
							local Pitch = CurrentPitch.Pitch
							Spawn(function()
								Module.PlaySound(Handle, {Sound = Sounds.ChordSound, SoundId = SoundId, MakeNew = true}, ((Chord.Pitch and Chord.Pitch) or (CurrentPitch and CurrentPitch.Pitch) or nil), ChordDuration)
								InvokeClient("PlayAnimation", Animations.Pluck)
							end)
						end
					end
				end
				for i, v in pairs(NoteData.Pitches) do
					if v.Key == Key then
						CurrentPitch = v
						return
					end
				end
			end
		end
	elseif Mode == "CastLightning" then
		local Mode = Value.Mode
		if Mode then
			Sounds.Thunder.SoundId = (BaseUrl .. MetalSounds[math.random(#MetalSounds)])
			Sounds.Thunder:Play()
			local HitPlayers = {}
			if not DoLightning(Handle.Position, HitPlayers) then
			for i = 1, 6, 1 do	
					Spawn(function()					
						LightningStrike(Handle.Position, (Handle.Position +(Vector3.new(((math.random() - 0.5) * 2),((math.random() - 0.5) * 2),((math.random() - 0.5) * 2)) * 45)))
					end)
				end
			end
		end
	end
end)

Tool.Grip = Grips.Unequipped
Tool.Enabled = true

function LightningStrike(Source, Destination)
	local MaxSegLength = 7
	local MinSegLength = 3
	local MaxOffset = 4
	local Direction = (Destination - Source).unit
	local Distance = (Source - Destination).magnitude
	
	local Points = {}	
	Points[1] = Source
	local LastDist = 0
	
	while (Distance - LastDist) > MaxSegLength do
		LastDist = (LastDist + ((math.random() * (MaxSegLength - MinSegLength)) + MinSegLength))
		local NewVector = (Source + (LastDist * Direction) + Vector3.new(math.random(), math.random(), math.random()))
		table.insert(Points, NewVector)
		wait(Rate)
	end	
	table.insert(Points, Destination)
	
	local Parts = {}
	
	local LightningModel = Instance.new("Model")
	LightningModel.Name = "LightningModel"
	Debris:AddItem(LightningModel, 5)
	LightningModel.Parent = game:GetService("Workspace")	
	
	for Index, i in ipairs(Points) do
		local LastPart = BasePart:Clone()
		LastPart.BrickColor = BrickColor.new("New Yeller")
		LastPart.Transparency = 0.3
		LastPart.Anchored = true
		LastPart.CanCollide = false
		local Mesh = Instance.new("CylinderMesh")
		Mesh.Scale = Vector3.new(0.3, 1, 0.3)
		Mesh.Parent = LastPart
		if Points[Index + 1] then		
			LastPart.Size = Vector3.new(0.02, (i - Points[Index + 1]).magnitude, 0.02)
			LastPart.CFrame = CFrame.new(((i + Points[Index + 1]) / 2), Points[Index + 1]) * CFrame.Angles((math.pi / 2), 0, 0)
			LastPart.Parent = LightningModel
			Debris:AddItem(LastPart, 1)
			wait(Rate)
		end
		
	end
end

function DoLightning(Root, HitPlayers)
	for i, v in pairs(Players:GetChildren()) do
		if v:IsA("Player") and not HitPlayers[v] and v ~= Player then
			local character = v.Character
			if character then
				local humanoid = character:FindFirstChild("Humanoid")
				local torso = character:FindFirstChild("Torso")
				if humanoid and humanoid.Health > 0 and torso and (torso.Position - Root).magnitude < LightningRadius then
					HitPlayers[v] = true
					Spawn(function()
						LightningStrike(Root, torso.Position)
					end)
					humanoid:TakeDamage(100)
					DoLightning(Torso.Position, HitPlayers)
					return true
				end
			end
		end
	end
	return false
end

function InvokeClient(Mode, Value)
	local ClientReturn = nil
	pcall(function()
		ClientReturn = ClientControl:InvokeClient(Player, Mode, Value)
	end)
	return ClientReturn
end

function Activated()
	if not Tool.Enabled or not CheckIfAlive() or not ToolEquipped then
		return
	end
	IsPlayingMusic = true
	if IsPlayingMusic then
		InvokeClient("PlayAnimation", Animations.Hold)
	else
		for i, v in pairs(Animations) do
			InvokeClient("StopAnimation", v)
		end
	end
end

function CheckIfAlive()
	return (((Player and Player.Parent and Humanoid and Humanoid.Parent and Humanoid.Health > 0 and Torso and Torso.Parent) and true) or false)
end

function Equipped(Mouse)
	Equipped = true
	Character = Tool.Parent
	Player = Players:GetPlayerFromCharacter(Character)
	Humanoid = Character:FindFirstChild("Humanoid")
	Torso = Character:FindFirstChild("Torso")
	if not CheckIfAlive() then
		return
	end
	Tool.Grip = Grips.Equipped
	ControlGui = Module.DisplayControls(Player, "Keys H, J, K, and L change pitch Keys Z, X, C, V, B, N, M play notes Click to equip", Color3.new(217, 36, 60), {Position = UDim2.new(0, 0, 0, 0)})
	ControlGui.Frame.Position = UDim2.new(0, 0, 1, -300)
	ToolEquipped = true
	Spawn(Activated)
end

function Unequipped()
	Equipped = false
	ShiftDown = false
	IsPlayingMusic = false
	Debris:AddItem(ControlGui, 0)
	Tool.Grip = Grips.Unequipped
	ToolEquipped = false
end

Tool.Equipped:connect(Equipped)
Tool.Unequipped:connect(Unequipped)]]></ProtectedString>
			</Properties>
		</Item>
		<Item class="Camera" referent="RBX03ADBC5E6F8D43D9B5F556E99F670788">
			<Properties>
				<Ref name="CameraSubject">null</Ref>
				<token name="CameraType">0</token>
				<CoordinateFrame name="CoordinateFrame">
					<X>-0.319687486</X>
					<Y>5.51647806</Y>
					<Z>-3.23784018</Z>
					<R00>-0.996492803</R00>
					<R01>0.00612872187</R01>
					<R02>-0.0834534466</R02>
					<R10>-4.65661287e-010</R10>
					<R11>0.997314155</R11>
					<R12>0.0732415766</R12>
					<R20>0.0836781859</R20>
					<R21>0.0729847029</R21>
					<R22>-0.993816435</R22>
				</CoordinateFrame>
				<float name="FieldOfView">70</float>
				<CoordinateFrame name="Focus">
					<X>-0.19450736</X>
					<Y>5.40661573</Y>
					<Z>-1.74711609</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<string name="Name">ThumbnailCamera</string>
			</Properties>
		</Item>
		<Item class="LocalScript" referent="RBX019B7A889AFD4E959102822F7DCE8244">
			<Properties>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">LocalScript</string>
				<ProtectedString name="Source"><![CDATA[--Made by Luckymaxer

Tool = script.Parent
Handle = Tool:WaitForChild("Handle")

Players = game:GetService("Players")
Debris = game:GetService("Debris")
RunService = game:GetService("RunService")

Camera = game:GetService("Workspace").CurrentCamera

CurrentGui = script:WaitForChild("Gui")

BaseUrl = "http://www.roblox.com/asset/?id="

Animations = {}
LocalObjects = {}

Gui = script:WaitForChild("Gui")
MainFrame = Gui:WaitForChild("MainFrame")
Marker = MainFrame:WaitForChild("Marker")
TemplateNote = MainFrame:WaitForChild("TemplateNote")
WinFrame = MainFrame:WaitForChild("WinText")

ValidKeys = {"z", "x", "c", "v", "b", "n", "m"}
WinText = {116037822, 116037835, 116037848, 116037852}
MinNotes = 2
MaxNotes = 8
NumSlots = 12
MarkerSpeed = 6.0666
CurrentString = {}
MarkerPos = UDim2.new()
InRiff = false
LastPos = 0

Rate = (1 / 60)

ServerControl = Tool:WaitForChild("ServerControl")
ClientControl = Tool:WaitForChild("ClientControl")

ToolEquipped = false

function MakeNote(Index)
	if not CurrentGui or not CurrentGui.Parent then
		return
	end
	local NewNote = {}
	NewNote.Key = ValidKeys[math.random(#ValidKeys)]
	local Frame = TemplateNote:Clone()
	Frame = TemplateNote:Clone()
	Frame.Text = string.upper(NewNote.Key)
	Frame.Position = UDim2.new(0,(((Index - 1) * 30) + (10 * Index)), 0.5, -15)
	Frame.Parent = CurrentGui.MainFrame
	Frame.Visible = true
	NewNote.Frame = Frame
	NewNote.Hit = false
	NewNote.Missed = false
	return NewNote
end

function SetupNoteString()
	if not CurrentGui or not CurrentGui.Parent then
		return
	end
	for i = 1, NumSlots, 1 do
		if CurrentString[i] and CurrentString[i].Frame and CurrentString[i].Frame.Parent then
			CurrentString[i].Frame:Destroy()
		end
	end
	CurrentString = {}
	local NumNotes = math.random(MinNotes, MaxNotes)
	CurrentString[1] = MakeNote(1)
	for i = 1, NumNotes, 1 do
		local Index = math.random(2, NumSlots)
		while CurrentString[Index] do
			Index = math.random(2, NumSlots)
		end
		CurrentString[Index] = MakeNote(Index)
	end
	CurrentGui.MainFrame.Marker.Position = UDim2.new(0, 0, 0, 0)
end

function StartRiff()
	if not CurrentGui or not CurrentGui.Parent then
		return
	end
	InRiff = true
	CurrentGui.MainFrame.Marker.Position = UDim2.new(0, 0, 0, 0)
	LastPos = 0
	CurrentString[1].Hit = true
	CurrentString[1].Frame.BackgroundColor3 = Color3.new(0, 0.8, 0)
	local StartTime = tick()
	while (tick() - StartTime) < MarkerSpeed and CurrentGui.Parent do
		LastPos = (500 * ((tick() - StartTime) / MarkerSpeed))
		CurrentGui.MainFrame.Marker.Position = UDim2.new(0, LastPos, 0, 0)
		wait(Rate)
	end
	for i = 1, NumSlots, 1 do
		if CurrentString[i] and not CurrentString[i].Hit then
			InRiff = false
			for j = 1, NumSlots, 1 do
				if CurrentString[j] then
					CurrentString[j].Hit = false
					CurrentString[j].Missed = false
					CurrentString[j].Frame.BackgroundColor3 = TemplateNote.BackgroundColor3
				end
			end
			return false
		end
	end
	SetupNoteString()
	InRiff = false
	return true
end

function SetAnimation(mode, value)
	if mode == "PlayAnimation" and value and ToolEquipped and Humanoid then
		for i, v in pairs(Animations) do
			if v.Animation == value.Animation then
				v.AnimationTrack:Stop()
				table.remove(Animations, i)
			end
		end
		local AnimationTrack = Humanoid:LoadAnimation(value.Animation)
		table.insert(Animations, {Animation = value.Animation, AnimationTrack = AnimationTrack})
		AnimationTrack:Play(value.FadeTime, value.Weight, value.Speed)
	elseif mode == "StopAnimation" and value then
		for i, v in pairs(Animations) do
			if v.Animation == value.Animation then
				v.AnimationTrack:Stop()
				table.remove(Animations, i)
			end
		end
	end
end

function DisableJump(Boolean)
	if PreventJump then
		PreventJump:disconnect()
	end
	if Boolean then
		PreventJump = Humanoid.Changed:connect(function(Property)
			if Property ==  "Jump" then
				Humanoid.Jump = false
			end
		end)
	end
end

function CheckIfAlive()
	return (((Character and Character.Parent and Humanoid and Humanoid.Parent and Humanoid.Health > 0 and Player and Player.Parent) and true) or false)
end

function Equipped(Mouse)
	Character = Tool.Parent
	Player = Players:GetPlayerFromCharacter(Character)
	Humanoid = Character:FindFirstChild("Humanoid")
	ToolEquipped = true
	if not CheckIfAlive() then
		return
	end
	Spawn(function()
		local PlayerGui = Player:FindFirstChild("PlayerGui")
		if PlayerGui then
			CurrentGui = Gui:Clone()
			CurrentGui.Parent = PlayerGui
			SetupNoteString()
		end
	end)
	PlayerMouse = Player:GetMouse()
	Mouse.Button1Down:connect(function()
		InvokeServer("MouseClick", {Down = true})
	end)
	Mouse.Button1Up:connect(function()
		InvokeServer("MouseClick", {Down = false})
	end)
	Mouse.KeyDown:connect(function(Key)
		InvokeServer("KeyPress", {Key = Key, Down = true})
		if not CurrentGui or not CurrentGui.Parent then
			return
		end
		local KeyValid = false
		for i, v in pairs(ValidKeys) do
			if string.lower(Key) == string.lower(v) then
				KeyValid = true
			end
		end
		if InRiff and KeyValid then
			local Index = (math.floor(LastPos / 40) + 1)
			if CurrentString[Index] then
				if not CurrentString[Index].Missed and CurrentString[Index].Key == Key then
					CurrentString[Index].Hit = true
					CurrentString[Index].Frame.BackgroundColor3 = Color3.new(0, 0.8, 0)
				else
					CurrentString[Index].Missed = true
					CurrentString[Index].Hit = false
					CurrentString[Index].Frame.BackgroundColor3 = Color3.new(0.8, 0, 0)
				end
			end
		else
			if Key == CurrentString[1].Key then
				Spawn(function()
					if StartRiff() then
						if CurrentGui and CurrentGui.Parent then
							CurrentGui.MainFrame.WinText.Image = (BaseUrl .. WinText[math.random(#WinText)])
							CurrentGui.MainFrame.WinText.Visible = true
							Delay(3, function()
								if CurrentGui and CurrentGui.Parent then
									CurrentGui.MainFrame.WinText.Visible = false
								end
							end)
						end
						Spawn(function()
							InvokeServer("CastLightning", {Mode = true})
						end)
					end
				end)
			end
		end
	end)
	Mouse.KeyUp:connect(function(Key)
		InvokeServer("KeyPress", {Key = Key, Down = false})
	end)
end

function Unequipped()
	LocalObjects = {}
	Debris:AddItem(CurrentGui, 0)
	for i, v in pairs({PreventJump, ObjectLocalTransparencyModifier}) do
		if v then
			v:disconnect()
		end
	end
	for i, v in pairs(Animations) do
		if v and v.AnimationTrack then
			v.AnimationTrack:Stop()
		end
	end
	Animations = {}
	ToolEquipped = false
end

function InvokeServer(mode, value)
	local ServerReturn
	pcall(function()
		ServerReturn = ServerControl:InvokeServer(mode, value)
	end)
	return ServerReturn
end

function OnClientInvoke(mode, value)
	if mode == "PlayAnimation" and value and ToolEquipped and Humanoid then
		SetAnimation("PlayAnimation", value)
	elseif mode == "StopAnimation" and value then
		SetAnimation("StopAnimation", value)
	elseif mode == "PlaySound" and value then
		value:Play()
	elseif mode == "StopSound" and value then
		value:Stop()
	elseif mode == "MousePosition" then
		return {Position = PlayerMouse.Hit.p, Target = PlayerMouse.Target}
	elseif mode == "DisableJump" then
		DisableJump(value)
	elseif mode == "SetLocalTransparencyModifier" and value and ToolEquipped then
		pcall(function()
			local ObjectFound = false
			for i, v in pairs(LocalObjects) do
				if v == value then
					ObjectFound = true
				end
			end
			if not ObjectFound then
				table.insert(LocalObjects, value)
				if ObjectLocalTransparencyModifier then
					ObjectLocalTransparencyModifier:disconnect()
				end
				ObjectLocalTransparencyModifier = RunService.RenderStepped:connect(function()
					for i, v in pairs(LocalObjects) do
						if v.Object and v.Object.Parent then
							local CurrentTransparency = v.Object.LocalTransparencyModifier
							if ((not v.AutoUpdate and (CurrentTransparency == 1 or  CurrentTransparency == 0)) or v.AutoUpdate) then
								v.Object.LocalTransparencyModifier = v.Transparency
							end
						else
							table.remove(LocalObjects, i)
						end
					end
				end)
			end
		end)
	end
end

ClientControl.OnClientInvoke = OnClientInvoke
Tool.Equipped:connect(Equipped)
Tool.Unequipped:connect(Unequipped)]]></ProtectedString>
			</Properties>
			<Item class="ScreenGui" referent="RBXC56918890AA34A6988B0127879AED019">
				<Properties>
					<string name="Name">Gui</string>
				</Properties>
				<Item class="Frame" referent="RBX5CE7F6BF59914A5A9F67605C5FCA490E">
					<Properties>
						<bool name="Active">false</bool>
						<Color3 name="BackgroundColor3">4278190080</Color3>
						<float name="BackgroundTransparency">0</float>
						<Color3 name="BorderColor3">4279970357</Color3>
						<int name="BorderSizePixel">0</int>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<string name="Name">MainFrame</string>
						<UDim2 name="Position">
							<XS>0.5</XS>
							<XO>-250</XO>
							<YS>1</YS>
							<YO>-170</YO>
						</UDim2>
						<float name="Rotation">0</float>
						<UDim2 name="Size">
							<XS>0</XS>
							<XO>500</XO>
							<YS>0</YS>
							<YO>55</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<token name="Style">0</token>
						<bool name="Visible">true</bool>
						<int name="ZIndex">1</int>
					</Properties>
					<Item class="TextLabel" referent="RBX6EEBA40539C2456CB845E80450222527">
						<Properties>
							<bool name="Active">false</bool>
							<Color3 name="BackgroundColor3">4288914085</Color3>
							<float name="BackgroundTransparency">0</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">1</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<token name="Font">2</token>
							<token name="FontSize">8</token>
							<string name="Name">TemplateNote</string>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>10</XO>
								<YS>0.5</YS>
								<YO>-15</YO>
							</UDim2>
							<float name="Rotation">0</float>
							<UDim2 name="Size">
								<XS>0</XS>
								<XO>30</XO>
								<YS>0</YS>
								<YO>30</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<string name="Text">C</string>
							<Color3 name="TextColor3">4278190080</Color3>
							<bool name="TextScaled">false</bool>
							<Color3 name="TextStrokeColor3">4278190080</Color3>
							<float name="TextStrokeTransparency">1</float>
							<float name="TextTransparency">0</float>
							<bool name="TextWrapped">false</bool>
							<token name="TextXAlignment">2</token>
							<token name="TextYAlignment">1</token>
							<bool name="Visible">false</bool>
							<int name="ZIndex">2</int>
						</Properties>
					</Item>
					<Item class="Frame" referent="RBX969C9CFCF5C14CD98A6F783D1B331864">
						<Properties>
							<bool name="Active">false</bool>
							<Color3 name="BackgroundColor3">4294704908</Color3>
							<float name="BackgroundTransparency">0</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">0</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<string name="Name">Marker</string>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>50</XO>
								<YS>0</YS>
								<YO>0</YO>
							</UDim2>
							<float name="Rotation">0</float>
							<UDim2 name="Size">
								<XS>0</XS>
								<XO>5</XO>
								<YS>1</YS>
								<YO>0</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<token name="Style">0</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">3</int>
						</Properties>
					</Item>
					<Item class="ImageLabel" referent="RBX35AFA255177F41EC89CD2C5E0487CAD7">
						<Properties>
							<bool name="Active">false</bool>
							<Color3 name="BackgroundColor3">4288914085</Color3>
							<float name="BackgroundTransparency">0</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">1</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<Content name="Image"><url>http://www.roblox.com/asset/?id=116037822</url></Content>
							<Color3 name="ImageColor3">4294967295</Color3>
							<Vector2 name="ImageRectOffset">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<Vector2 name="ImageRectSize">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<float name="ImageTransparency">0</float>
							<string name="Name">WinText</string>
							<UDim2 name="Position">
								<XS>0.5</XS>
								<XO>-100</XO>
								<YS>0</YS>
								<YO>-115</YO>
							</UDim2>
							<float name="Rotation">0</float>
							<UDim2 name="Size">
								<XS>0</XS>
								<XO>200</XO>
								<YS>0</YS>
								<YO>115</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<bool name="Visible">false</bool>
							<int name="ZIndex">4</int>
						</Properties>
					</Item>
				</Item>
			</Item>
		</Item>
	</Item>
</roblox>