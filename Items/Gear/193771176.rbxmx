<roblox xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.roblox.com/roblox.xsd" version="4">
	<External>null</External>
	<External>nil</External>
	<Item class="Tool" referent="RBXE072D15C8E3047B89A95305E62FDC63B">
		<Properties>
			<bool name="CanBeDropped">true</bool>
			<bool name="Enabled">true</bool>
			<CoordinateFrame name="Grip">
				<X>-0.300000012</X>
				<Y>0.349999994</Y>
				<Z>-0.0500000007</Z>
				<R00>0.780771196</R00>
				<R01>-0.624816954</R01>
				<R02>-9.65498657e-006</R02>
				<R10>0.624816895</R10>
				<R11>0.780771315</R11>
				<R12>1.2064872e-005</R12>
				<R20>0</R20>
				<R21>-1.5452506e-005</R21>
				<R22>1</R22>
			</CoordinateFrame>
			<bool name="ManualActivationOnly">false</bool>
			<string name="Name">PinkElectricGuitar</string>
			<Content name="TextureId"><url>http://www.roblox.com/asset?id=192462126</url></Content>
			<string name="ToolTip"></string>
		</Properties>
		<Item class="Part" referent="RBX6380603F967F4FCEAF062D84DD1C6D17">
			<Properties>
				<bool name="Anchored">false</bool>
				<float name="BackParamA">-0.5</float>
				<float name="BackParamB">0.5</float>
				<token name="BackSurface">0</token>
				<token name="BackSurfaceInput">0</token>
				<float name="BottomParamA">-0.5</float>
				<float name="BottomParamB">0.5</float>
				<token name="BottomSurface">0</token>
				<token name="BottomSurfaceInput">0</token>
				<int name="BrickColor">194</int>
				<CoordinateFrame name="CFrame">
					<X>4.02658272</X>
					<Y>3.0109961</Y>
					<Z>-17.9586143</Z>
					<R00>0</R00>
					<R01>0.99999994</R01>
					<R02>0</R02>
					<R10>-0.99999994</R10>
					<R11>0</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<bool name="CanCollide">true</bool>
				<float name="Elasticity">0.5</float>
				<float name="Friction">0.300000012</float>
				<float name="FrontParamA">-0.5</float>
				<float name="FrontParamB">0.5</float>
				<token name="FrontSurface">0</token>
				<token name="FrontSurfaceInput">0</token>
				<float name="LeftParamA">-0.5</float>
				<float name="LeftParamB">0.5</float>
				<token name="LeftSurface">0</token>
				<token name="LeftSurfaceInput">0</token>
				<bool name="Locked">true</bool>
				<token name="Material">256</token>
				<string name="Name">Handle</string>
				<float name="Reflectance">0</float>
				<float name="RightParamA">-0.5</float>
				<float name="RightParamB">0.5</float>
				<token name="RightSurface">0</token>
				<token name="RightSurfaceInput">0</token>
				<Vector3 name="RotVelocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<float name="TopParamA">-0.5</float>
				<float name="TopParamB">0.5</float>
				<token name="TopSurface">0</token>
				<token name="TopSurfaceInput">0</token>
				<float name="Transparency">0</float>
				<Vector3 name="Velocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<token name="formFactorRaw">3</token>
				<token name="shape">1</token>
				<Vector3 name="size">
					<X>4.5</X>
					<Y>5</Y>
					<Z>0.5</Z>
				</Vector3>
			</Properties>
			<Item class="SpecialMesh" referent="RBXA821F5C59FC84A7C988671A602375F6E">
				<Properties>
					<token name="LODX">2</token>
					<token name="LODY">2</token>
					<Content name="MeshId"><url>http://www.roblox.com/asset?id=192462203</url></Content>
					<token name="MeshType">5</token>
					<string name="Name">Mesh</string>
					<Vector3 name="Offset">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<Vector3 name="Scale">
						<X>1</X>
						<Y>1</Y>
						<Z>1</Z>
					</Vector3>
					<Content name="TextureId"><url>http://www.roblox.com/asset?id=192462176</url></Content>
					<Vector3 name="VertexColor">
						<X>1</X>
						<Y>1</Y>
						<Z>1</Z>
					</Vector3>
				</Properties>
			</Item>
			<Item class="Sound" referent="RBX12A11065E6204674A5767CFEC8C92FF0">
				<Properties>
					<bool name="Looped">false</bool>
					<string name="Name">ChordSound</string>
					<float name="Pitch">2.5</float>
					<bool name="PlayOnRemove">false</bool>
					<Content name="SoundId"><url>http://www.roblox.com/asset?id=99170311</url></Content>
					<float name="Volume">1</float>
				</Properties>
			</Item>
		</Item>
		<Item class="Animation" referent="RBXB41D2435D03D48D6B6481F81F84E75BF">
			<Properties>
				<Content name="AnimationId"><url>http://www.roblox.com/asset/?id=192906348</url></Content>
				<string name="Name">Hold</string>
			</Properties>
		</Item>
		<Item class="Animation" referent="RBX9D78ABE69552424C8C1DCFBD2859E84E">
			<Properties>
				<Content name="AnimationId"><url>http://www.roblox.com/asset/?id=192900081</url></Content>
				<string name="Name">Pluck</string>
			</Properties>
		</Item>
		<Item class="Script" referent="RBX84AD9C1EA0444369955FAE97D4FF7FD1">
			<Properties>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">Script</string>
				<ProtectedString name="Source">--Made by Luckymaxer

Tool = script.Parent
Handle = Tool:WaitForChild(&quot;Handle&quot;)

Players = game:GetService(&quot;Players&quot;)
Debris = game:GetService(&quot;Debris&quot;)

Module = require(185791213)
LightningModule = require(Tool:WaitForChild(&quot;LightningModule&quot;))

NoteData = {
&#9;Chords = {
&#9;&#9;{Key = &quot;z&quot;, Sound = {Normal = 99170172, Sharp = 99189531}},
&#9;&#9;{Key = &quot;x&quot;, Sound = {Normal = 99170311, Sharp = 99189711}},
&#9;&#9;{Key = &quot;c&quot;, Sound = {Normal = 99170354, Sharp = 99189785}},
&#9;&#9;{Key = &quot;v&quot;, Sound = {Normal = 99170403, Sharp = 99190216}},
&#9;&#9;{Key = &quot;b&quot;, Sound = {Normal = 99170481, Sharp = 99189905}},
&#9;&#9;{Key = &quot;n&quot;, Sound = {Normal = 99170537, Sharp = 99190021}},
&#9;&#9;{Key = &quot;m&quot;, Sound = {Normal = 99170583, Sharp = 99190550}}
&#9;},
&#9;Pitches = {
&#9;&#9;{Key = &quot;g&quot;, Pitch = 2},
&#9;&#9;{Key = &quot;h&quot;, Pitch = 2.25},
&#9;&#9;{Key = &quot;j&quot;, Pitch = 2.5},
&#9;&#9;{Key = &quot;k&quot;, Pitch = 2.75},
&#9;&#9;{Key = &quot;l&quot;, Pitch = 3},
&#9;}
}

Grips = {
&#9;Hold = CFrame.new(-0.3, 0.35, -0.05, 0.780771196, -0.624816954, -9.65498657e-006, 0.624816895, 0.780771315, 1.2064872e-005, 0, -1.5452506e-005, 1),
&#9;Play = CFrame.new(-1.1, 1.25, -0.1, 0.775343955, -0.196550965, 0.600174427, 0.552064478, 0.672464013, -0.492967427, -0.306702495, 0.713554323, 0.62989974),
&#9;Unequipped = CFrame.new(0.5, -1.25, 0.7, -1, 8.10044585e-005, -1.06224526e-011, 0, 1.31134158e-007, 1, 8.10044585e-005, 1, -1.31134158e-007)
}

Animations = {
&#9;Hold = {Animation = Tool:WaitForChild(&quot;Hold&quot;), FadeTime = nil, Weight = nil, Speed = nil, Duration = nil},
&#9;Pluck = {Animation = Tool:WaitForChild(&quot;Pluck&quot;), FadeTime = nil, Weight = nil, Speed = 6, Duration = nil}
}

Sounds = {
&#9;ChordSound = Handle:WaitForChild(&quot;ChordSound&quot;),
}

ChordDuration = 0.25

ShiftDown = false
IsPlayingMusic = false
CurrentNote = 1
CurrentPitch = NoteData.Pitches[3] --((NoteData.Pitches[1] and NoteData.Pitches[1]) or nil)

ClientControl = (Tool:FindFirstChild(&quot;ClientControl&quot;) or Instance.new(&quot;RemoteFunction&quot;))
ClientControl.Name = &quot;ClientControl&quot;
ClientControl.Parent = Tool

ServerControl = (Tool:FindFirstChild(&quot;ServerControl&quot;) or Instance.new(&quot;RemoteFunction&quot;))
ServerControl.Name = &quot;ServerControl&quot;
ServerControl.Parent = Tool

ServerControl.OnServerInvoke = (function(player, Mode, Value)
&#9;if Mode == &quot;KeyPress&quot; and Value then
&#9;&#9;local Key = string.lower(Value.Key)
&#9;&#9;local ByteKey = string.byte(Key)
&#9;&#9;local Down = Value.Down
&#9;&#9;if Key == &quot;0&quot; or ByteKey == 48 then
&#9;&#9;&#9;ShiftDown = Down
&#9;&#9;elseif (Key == &quot;2&quot; or ByteKey == 50) and IsPlayingMusic then
&#9;&#9;&#9;LightningModule.HandleLightning(NoteGuiInfo, &quot;Start&quot;, Player)
&#9;&#9;else
&#9;&#9;&#9;if Value.Down then
&#9;&#9;&#9;&#9;if IsPlayingMusic then
&#9;&#9;&#9;&#9;&#9;for i, v in pairs(NoteData.Chords) do
&#9;&#9;&#9;&#9;&#9;&#9;if v.Key == Key then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;local Duration = 1
&#9;&#9;&#9;&#9;&#9;&#9;&#9;local Chord = v
&#9;&#9;&#9;&#9;&#9;&#9;&#9;local SoundId = ((not ShiftDown and v.Sound.Normal) or v.Sound.Sharp)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;local Pitch = CurrentPitch.Pitch
&#9;&#9;&#9;&#9;&#9;&#9;&#9;Module.PlaySound(Handle, {Sound = Sounds.ChordSound, SoundId = SoundId}, ((Chord.Pitch and Chord.Pitch) or (CurrentPitch and CurrentPitch.Pitch) or nil), ChordDuration)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;InvokeClient(&quot;PlayAnimation&quot;, Animations.Pluck)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;LightningModule.HandleLightning(NoteGuiInfo, Key, Player)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;return
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;for i, v in pairs(NoteData.Pitches) do
&#9;&#9;&#9;&#9;&#9;if v.Key == Key then
&#9;&#9;&#9;&#9;&#9;&#9;CurrentPitch = v
&#9;&#9;&#9;&#9;&#9;&#9;return
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end
end)

Tool.Grip = Grips.Hold
Tool.Enabled = true

function InvokeClient(Mode, Value)
&#9;local ClientReturn = nil
&#9;pcall(function()
&#9;&#9;ClientReturn = ClientControl:InvokeClient(Player, Mode, Value)
&#9;end)
&#9;return ClientReturn
end

function Activated()
&#9;if not Tool.Enabled or not CheckIfAlive() then
&#9;&#9;return
&#9;end
&#9;Tool.Enabled = false
&#9;IsPlayingMusic = not IsPlayingMusic
&#9;if IsPlayingMusic then
&#9;&#9;Tool.Grip = Grips.Play
&#9;&#9;InvokeClient(&quot;PlayAnimation&quot;, Animations.Hold)
&#9;else
&#9;&#9;Tool.Grip = Grips.Hold
&#9;&#9;for i, v in pairs(Animations) do
&#9;&#9;&#9;InvokeClient(&quot;StopAnimation&quot;, v)
&#9;&#9;end
&#9;end
&#9;Tool.Enabled = true
end

function CheckIfAlive()
&#9;return (((Player and Player.Parent and Humanoid and Humanoid.Parent and Humanoid.Health &gt; 0 and Torso and Torso.Parent) and true) or false)
end

function Equipped(Mouse)
&#9;Equipped = true
&#9;Character = Tool.Parent
&#9;Player = Players:GetPlayerFromCharacter(Character)
&#9;PlayerGui = Player:FindFirstChild(&quot;PlayerGui&quot;)
&#9;Backpack = Player:FindFirstChild(&quot;Backpack&quot;)
&#9;Humanoid = Character:FindFirstChild(&quot;Humanoid&quot;)
&#9;Torso = Character:FindFirstChild(&quot;Torso&quot;)
&#9;if not CheckIfAlive() then
&#9;&#9;return
&#9;end
&#9;Tool.Grip = Grips.Hold
&#9;ControlGui = Module.DisplayControls(
&#9;&#9;Player,
&#9;&#9;&quot;Keys H, J, K, and L change pitch Keys Z, X, C, V, B, N, M play notes Ctrl to play special&quot;,
&#9;&#9;nil,
&#9;&#9;{
&#9;&#9;&#9;TextColor3 = Color3.new((255 / 255), (170 / 255), (255 / 255)),
&#9;&#9;&#9;TextStrokeColor3 = Color3.new((255 / 255), (85 / 255), (255 / 255)),
&#9;&#9;&#9;TextStrokeTransparency = 0.25
&#9;&#9;}
&#9;)
&#9;Spawn(function()
&#9;&#9;if PlayerGui and PlayerGui.Parent then
&#9;&#9;&#9;NoteGuiInfo = LightningModule.CreateGui()
&#9;&#9;&#9;NoteGui = NoteGuiInfo.NoteGui
&#9;&#9;&#9;NoteGui.Parent = PlayerGui
&#9;&#9;&#9;LightningModule.SetupNoteString(NoteGuiInfo)
&#9;&#9;end
&#9;end)
end

function Unequipped()
&#9;Equipped = false
&#9;ShiftDown = false
&#9;IsPlayingMusic = false
&#9;for i, v in pairs({ControlGui, NoteGui}) do
&#9;&#9;if v and v.Parent then
&#9;&#9;&#9;v:Destroy()
&#9;&#9;end
&#9;end
&#9;for i, v in pairs(Animations) do
&#9;&#9;InvokeClient(&quot;StopAnimation&quot;, v)
&#9;end
end

Tool.Changed:connect(function(Property)
&#9;if Property == &quot;Parent&quot; then
&#9;&#9;if FakeGuitar and FakeGuitar.Parent then
&#9;&#9;&#9;FakeGuitar:Destroy()
&#9;&#9;end
&#9;&#9;if Tool.Grip == Grips.Play then
&#9;&#9;&#9;if Backpack and Backpack.Parent and Tool.Parent == Backpack then
&#9;&#9;&#9;&#9;FakeGuitar = Handle:Clone()
&#9;&#9;&#9;&#9;FakeGuitar.Name = &quot;FakeGuitar&quot;
&#9;&#9;&#9;&#9;FakeGuitar.CanCollide = false
&#9;&#9;&#9;&#9;local GuitarWeld = Instance.new(&quot;Weld&quot;)
&#9;&#9;&#9;&#9;GuitarWeld.Part0 = Torso
&#9;&#9;&#9;&#9;GuitarWeld.Part1 = FakeGuitar
&#9;&#9;&#9;&#9;GuitarWeld.C0 = CFrame.new(0, -1, 0, 1, 0, -0, 0, 0, 1, 0, -1, -0)
&#9;&#9;&#9;&#9;GuitarWeld.C1 = Grips.Unequipped
&#9;&#9;&#9;&#9;GuitarWeld.Parent = FakeGuitar
&#9;&#9;&#9;&#9;FakeGuitar.Parent = Character
&#9;&#9;&#9;&#9;Backpack = nil
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;if FakeGuitar and FakeGuitar.Parent then
&#9;&#9;&#9;&#9;&#9;FakeGuitar:Destroy()
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end
end)

Tool.Activated:connect(Activated)
Tool.Equipped:connect(Equipped)
Tool.Unequipped:connect(Unequipped)</ProtectedString>
			</Properties>
		</Item>
		<Item class="LocalScript" referent="RBX59D740ED7A134D268D97CDA4822AE86D">
			<Properties>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">LocalScript</string>
				<ProtectedString name="Source">--Made by Luckymaxer

Tool = script.Parent
Handle = Tool:WaitForChild(&quot;Handle&quot;)

Players = game:GetService(&quot;Players&quot;)
ContentProvider = game:GetService(&quot;ContentProvider&quot;)
UserInputService = game:GetService(&quot;UserInputService&quot;)

Camera = game:GetService(&quot;Workspace&quot;).CurrentCamera

Animations = {}

ServerControl = Tool:WaitForChild(&quot;ServerControl&quot;)
ClientControl = Tool:WaitForChild(&quot;ClientControl&quot;)

ClientControl.OnClientInvoke = (function(Mode, Value)
&#9;if Mode == &quot;PlayAnimation&quot; and Humanoid then
&#9;&#9;for i, v in pairs(Animations) do
&#9;&#9;&#9;if v.Animation == Value.Animation then
&#9;&#9;&#9;&#9;v.AnimationTrack:Stop()
&#9;&#9;&#9;&#9;table.remove(Animations, i)
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;local AnimationTrack = Humanoid:LoadAnimation(Value.Animation)
&#9;&#9;table.insert(Animations, {Animation = Value.Animation, AnimationTrack = AnimationTrack})
&#9;&#9;AnimationTrack:Play(Value.FadeTime, Value.Weight, Value.Speed)
&#9;elseif Mode == &quot;StopAnimation&quot; and Value then
&#9;&#9;for i, v in pairs(Animations) do
&#9;&#9;&#9;if v.Animation == Value.Animation then
&#9;&#9;&#9;&#9;v.AnimationTrack:Stop()
&#9;&#9;&#9;&#9;table.remove(Animations, i)
&#9;&#9;&#9;end
&#9;&#9;end
&#9;elseif Mode == &quot;Preload&quot; and Value then
&#9;&#9;ContentProvider:Preload(Value)
&#9;elseif Mode == &quot;PlaySound&quot; and Value then
&#9;&#9;Value:Play()
&#9;elseif Mode == &quot;StopSound&quot; and Value then
&#9;&#9;Value:Stop()
&#9;elseif Mode == &quot;MousePosition&quot; then
&#9;&#9;return PlayerMouse.Hit.p
&#9;elseif Mode == &quot;DisableJump&quot; then
&#9;&#9;DisableJump(Value)
&#9;end
end)

function InvokeServer(Mode, Value)
&#9;local ServerReturn = nil
&#9;pcall(function()
&#9;&#9;ServerReturn = ServerControl:InvokeServer(Mode, Value)
&#9;end)
&#9;return ServerReturn
end

function DisableJump(Boolean)
&#9;if PreventJump then
&#9;&#9;PreventJump:disconnect()
&#9;end
&#9;if Boolean then
&#9;&#9;PreventJump = Humanoid.Changed:connect(function(Property)
&#9;&#9;&#9;if Property ==  &quot;Jump&quot; then
&#9;&#9;&#9;&#9;Humanoid.Jump = false
&#9;&#9;&#9;end
&#9;&#9;end)
&#9;end
end

function CheckIfAlive()
&#9;return (Player and Player.Parent and Humanoid and Humanoid.Parent and Humanoid.Health &gt; 0)
end

function Equipped(Mouse)
&#9;Character = Tool.Parent
&#9;Player = Players:GetPlayerFromCharacter(Character)
&#9;Humanoid = Character:FindFirstChild(&quot;Humanoid&quot;)
&#9;if not CheckIfAlive() then
&#9;&#9;return
&#9;end
&#9;PlayerMouse = Player:GetMouse()
&#9;Mouse.Button1Down:connect(function()
&#9;&#9;InvokeServer(&quot;MouseClick&quot;, {Down = true})
&#9;end)
&#9;Mouse.Button1Up:connect(function()
&#9;&#9;InvokeServer(&quot;MouseClick&quot;, {Down = false})
&#9;end)
&#9;Mouse.KeyDown:connect(function(Key)
&#9;&#9;InvokeServer(&quot;KeyPress&quot;, {Key = Key, Down = true})
&#9;end)
&#9;Mouse.KeyUp:connect(function(Key)
&#9;&#9;InvokeServer(&quot;KeyPress&quot;, {Key = Key, Down = false})
&#9;end)
end

function Unequipped()
&#9;for i, v in pairs(Animations) do
&#9;&#9;if v and v.AnimationTrack then
&#9;&#9;&#9;v.AnimationTrack:Stop()
&#9;&#9;end
&#9;end
&#9;if PreventJump then
&#9;&#9;PreventJump:disconnect()
&#9;end
&#9;Animations = {}
end

Tool.Equipped:connect(Equipped)
Tool.Unequipped:connect(Unequipped)</ProtectedString>
			</Properties>
		</Item>
		<Item class="ModuleScript" referent="RBXBFC10F760CEB4CFB94E94D1D097B39C0">
			<Properties>
				<string name="Name">LightningModule</string>
				<ProtectedString name="Source">--Made by Luckymaxer

Tool = script.Parent
Handle = Tool:WaitForChild(&quot;Handle&quot;)

Players = game:GetService(&quot;Players&quot;)
Debris = game:GetService(&quot;Debris&quot;)

BasePart = Instance.new(&quot;Part&quot;)
BasePart.Material = Enum.Material.Plastic
BasePart.TopSurface = Enum.SurfaceType.Smooth
BasePart.BottomSurface = Enum.SurfaceType.Smooth
BasePart.FormFactor = Enum.FormFactor.Custom
BasePart.Locked = true
BasePart.CanCollide = true
BasePart.Anchored = false

ValidKeys = {&quot;z&quot;, &quot;x&quot;, &quot;c&quot;, &quot;v&quot;, &quot;b&quot;, &quot;n&quot;, &quot;m&quot;}
MinNotes = 2
MaxNotes = 8
CurrentString = {}
LightningRadius = 60
InRiff = false

Module = {}

function LightningStrike(Source, Destination)
&#9;local MaxSegLength = 7
&#9;local MinSegLength = 3
&#9;local MaxOffset = 4
&#9;local Direction = (Destination - Source).unit
&#9;local Distance = (Source - Destination).magnitude
&#9;
&#9;local Points = {}&#9;
&#9;Points[1] = Source
&#9;local LastDist = 0
&#9;
&#9;while (Distance - LastDist) &gt; MaxSegLength do
&#9;&#9;LastDist = (LastDist + ((math.random() * (MaxSegLength - MinSegLength)) + MinSegLength))
&#9;&#9;local NewVector = (Source + (LastDist * Direction) + Vector3.new(math.random(), math.random(), math.random()))
&#9;&#9;table.insert(Points, NewVector)
&#9;&#9;wait()
&#9;end&#9;
&#9;table.insert(Points, Destination)
&#9;
&#9;local Parts = {}
&#9;
&#9;for Index, i in ipairs(Points) do
&#9;&#9;local LastPart = BasePart:Clone()
&#9;&#9;LastPart.BrickColor = BrickColor.new(&quot;Hot pink&quot;)
&#9;&#9;LastPart.Transparency = 0.3
&#9;&#9;LastPart.Anchored = true
&#9;&#9;LastPart.CanCollide = false
&#9;&#9;local Mesh = Instance.new(&quot;CylinderMesh&quot;)
&#9;&#9;Mesh.Scale = Vector3.new(0.5, 1, 0.5)
&#9;&#9;Mesh.Parent = LastPart
&#9;&#9;if Points[Index + 1] then&#9;&#9;
&#9;&#9;&#9;LastPart.Size = Vector3.new(0.5, (i - Points[Index + 1]).magnitude, 0.5)
&#9;&#9;&#9;LastPart.CFrame = CFrame.new(((i + Points[Index + 1]) / 2), Points[Index + 1]) * CFrame.Angles((math.pi / 2), 0, 0)
&#9;&#9;&#9;Debris:AddItem(LastPart, 1)
&#9;&#9;&#9;LastPart.Parent = game:GetService(&quot;Workspace&quot;)
&#9;&#9;&#9;wait()
&#9;&#9;end
&#9;&#9;
&#9;end
end

function DoLightning(Root, HitPlayers, Player)
&#9;for i, v in pairs(Players:GetChildren()) do
&#9;&#9;if v:IsA(&quot;Player&quot;) and not HitPlayers[v] and v ~= Player then
&#9;&#9;&#9;local character = v.Character
&#9;&#9;&#9;if character then
&#9;&#9;&#9;&#9;local humanoid = character:FindFirstChild(&quot;Humanoid&quot;)
&#9;&#9;&#9;&#9;local torso = character:FindFirstChild(&quot;Torso&quot;)
&#9;&#9;&#9;&#9;if humanoid and humanoid.Health &gt; 0 and torso and (torso.Position - Root).magnitude &lt; LightningRadius then
&#9;&#9;&#9;&#9;&#9;HitPlayers[v] = true
&#9;&#9;&#9;&#9;&#9;Spawn(function()
&#9;&#9;&#9;&#9;&#9;&#9;LightningStrike(Root, torso.Position)
&#9;&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;&#9;humanoid:TakeDamage(100)
&#9;&#9;&#9;&#9;&#9;DoLightning(Handle.Position, HitPlayers, Player)
&#9;&#9;&#9;&#9;&#9;return true
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end
&#9;return false
end

function CreateGui()
&#9;local NoteGui = Instance.new(&quot;ScreenGui&quot;)
&#9;NoteGui.Name = &quot;NoteGui&quot;
&#9;local Frame = Instance.new(&quot;Frame&quot;)
&#9;Frame.Position = UDim2.new(0, 0, 1, -95)
&#9;Frame.Size = UDim2.new(0, 260, 0, 55)
&#9;Frame.BackgroundColor3 = Color3.new((0 / 255), (0 / 255), (0 / 255))
&#9;Frame.BorderSizePixel = 0
&#9;Frame.ClipsDescendants = true
&#9;Frame.Parent = NoteGui
&#9;local Marker = Instance.new(&quot;Frame&quot;)
&#9;Marker.Name = &quot;Marker&quot;
&#9;Marker.Position = UDim2.new(0, 75, 0, 0)
&#9;Marker.Size = UDim2.new(0, 5, 1, 0)
&#9;Marker.BackgroundColor3 = Color3.new((251 / 255), (255 / 255), (12 / 255))
&#9;Marker.BorderSizePixel = 0
&#9;Marker.ZIndex = 3
&#9;Marker.Parent = Frame
&#9;local TemplateNote = Instance.new(&quot;TextButton&quot;)
&#9;TemplateNote.Name = &quot;TemplateNote&quot;
&#9;TemplateNote.Position = UDim2.new(0, 0, 0, 0)
&#9;TemplateNote.Size = UDim2.new(0, 30, 0, 30)
&#9;TemplateNote.Font = Enum.Font.ArialBold
&#9;TemplateNote.FontSize = Enum.FontSize.Size36
&#9;TemplateNote.BackgroundColor3 = Color3.new((255 / 255), (0 / 255), (255 / 255))
&#9;TemplateNote.TextColor3 = Color3.new((0 / 255), (0 / 255), (0 / 255))
&#9;TemplateNote.TextXAlignment = Enum.TextXAlignment.Center
&#9;TemplateNote.TextYAlignment = Enum.TextYAlignment.Center
&#9;TemplateNote.ZIndex = 2
&#9;TemplateNote.AutoButtonColor = false
&#9;TemplateNote.Visible = false
&#9;return {NoteGui = NoteGui, Frame = Frame, Marker = Marker, TemplateNote = TemplateNote}
end

function MakeNote(Gui)
&#9;local NewNote = {}
&#9;local Key = ValidKeys[math.random(#ValidKeys)]
&#9;local Frame = CreateGui().TemplateNote:Clone()
&#9;Frame.Text = string.upper(Key)
&#9;Frame.Visible = true
&#9;local NewNote = {
&#9;&#9;Frame = Frame,
&#9;&#9;Key = Key,
&#9;&#9;Hit = false,
&#9;&#9;Missed = false,
&#9;}
&#9;return NewNote
end

function SetupNoteString(Gui)
&#9;for i, v in pairs(CurrentString) do
&#9;&#9;if v and v.Frame and v.Frame.Parent then
&#9;&#9;&#9;v.Frame:Destroy()
&#9;&#9;end
&#9;end
&#9;CurrentString = {}
&#9;local NumNotes = math.random(MinNotes, MaxNotes)
&#9;FirstNote = nil
&#9;LastNote = nil
&#9;for i = 1, NumNotes do
&#9;&#9;local Note = MakeNote(Gui)
&#9;&#9;local Offset = math.random(5, 30)
&#9;&#9;Note.Frame.Position = UDim2.new(0, (((LastNote and (LastNote.Frame.Position.X.Offset + Note.Frame.Size.X.Offset)) or (Gui.Marker.Position.X.Offset + Gui.Marker.Size.X.Offset)) + Offset), 0.25, 0)
&#9;&#9;FirstNote = ((not FirstNote and Note) or FirstNote)
&#9;&#9;LastNote = Note
&#9;&#9;Note.Frame.Parent = Gui.Frame
&#9;&#9;table.insert(CurrentString, Note)
&#9;end
end

function MarkFrame(Gui, Note, Key)
&#9;if not Note.Missed then
&#9;&#9;local Frame = Note.Frame
&#9;&#9;if (Gui.Marker.Position.X.Offset + (Gui.Marker.Size.X.Offset / 2)) &gt;= Frame.Position.X.Offset and (Gui.Marker.Position.X.Offset + (Gui.Marker.Size.X.Offset / 2)) &lt; (Frame.Position.X.Offset + Frame.Size.X.Offset) then
&#9;&#9;&#9;if Key then
&#9;&#9;&#9;&#9;if Key == Note.Key then
&#9;&#9;&#9;&#9;&#9;Note.Hit = true
&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;Note.Hit = false
&#9;&#9;&#9;&#9;&#9;Note.Missed = true
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;elseif (Gui.Marker.Position.X.Offset + (Gui.Marker.Size.X.Offset / 2)) &lt; Frame.Position.X.Offset then
&#9;&#9;elseif (Key and Key ~= Note.Key) or Gui.Marker.Position.X.Offset &gt; (Frame.Position.X.Offset + Frame.Size.X.Offset) then
&#9;&#9;&#9;Note.Missed = true
&#9;&#9;end
&#9;&#9;Frame.BackgroundColor3 = ((Note.Hit and BrickColor.new(&quot;New Yeller&quot;).Color) or (Note.Missed and BrickColor.new(&quot;Really red&quot;).Color) or Frame.BackgroundColor3)
&#9;end
end

function HandleLightning(Gui, Key, Player)
&#9;if not InRiff and Key == &quot;Start&quot; then --[[Key == CurrentString[1].Key]]
&#9;&#9;InRiff = true
&#9;&#9;local Length = (FirstNote.Frame.Position.X.Offset + (LastNote.Frame.Position.X.Offset + LastNote.Frame.Size.X.Offset))
&#9;&#9;while Gui.NoteGui and Gui.NoteGui.Parent and (LastNote.Frame.Position.X.Offset + LastNote.Frame.Size.X.Offset) &gt; 0 do
&#9;&#9;&#9;for ii, vv in pairs(CurrentString) do
&#9;&#9;&#9;&#9;local Frame = vv.Frame
&#9;&#9;&#9;&#9;Frame.Position = Frame.Position - UDim2.new(0, 2, 0, 0)
&#9;&#9;&#9;&#9;MarkFrame(Gui, vv, nil)
&#9;&#9;&#9;end
&#9;&#9;&#9;wait(0.001)
&#9;&#9;end
&#9;&#9;InRiff = false
&#9;&#9;if Gui.NoteGui and Gui.NoteGui.Parent then
&#9;&#9;&#9;local Ratio = {Success = 0, Failure = 0}
&#9;&#9;&#9;for i, v in pairs(CurrentString) do
&#9;&#9;&#9;&#9;if v.Hit then
&#9;&#9;&#9;&#9;&#9;Ratio.Success = (Ratio.Success + 1)
&#9;&#9;&#9;&#9;elseif v.Missed then
&#9;&#9;&#9;&#9;&#9;Ratio.Failure = (Ratio.Failure + 1)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;&#9;if Ratio.Success &gt;= ((#CurrentString / 4) * 3) then
&#9;&#9;&#9;&#9;--local HitPlayers = {}
&#9;&#9;&#9;&#9;--if not DoLightning(Handle.Position, HitPlayers, Player) then
&#9;&#9;&#9;&#9;&#9;for i = 1, math.random(8, 25), 1 do&#9;
&#9;&#9;&#9;&#9;&#9;&#9;Spawn(function()&#9;&#9;&#9;&#9;&#9;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;LightningStrike(Handle.Position, (Handle.Position +(Vector3.new(((math.random() - 0.5) * 2),((math.random() - 0.5) * 2),((math.random() - 0.5) * 2)) * 45)))
&#9;&#9;&#9;&#9;&#9;&#9;end)&#9;&#9;&#9;&#9;&#9;&#9;
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;--end&#9;&#9;
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;--Loss
&#9;&#9;&#9;end
&#9;&#9;&#9;SetupNoteString(Gui)
&#9;&#9;end
&#9;elseif InRiff then
&#9;&#9;for i, v in pairs(CurrentString) do
&#9;&#9;&#9;MarkFrame(Gui, v, Key)
&#9;&#9;end
&#9;end
end

return {
&#9;CreateGui = CreateGui,
&#9;MakeNote = MakeNote,
&#9;SetupNoteString = SetupNoteString,
&#9;LightningStrike = LightningStrike,
&#9;DoLightning = DoLightning,
&#9;HandleLightning = HandleLightning
}</ProtectedString>
			</Properties>
		</Item>
		<Item class="Camera" referent="RBX84FFC61968EF4795A7E5F5BD3C9249C7">
			<Properties>
				<Ref name="CameraSubject">null</Ref>
				<token name="CameraType">5</token>
				<CoordinateFrame name="CoordinateFrame">
					<X>3.04584146</X>
					<Y>2.68576884</Y>
					<Z>-21.6545639</Z>
					<R00>-0.984415412</R00>
					<R01>-0.00393597782</R01>
					<R02>-0.175814733</R02>
					<R10>-0</R10>
					<R11>0.999749422</R11>
					<R12>-0.0223814659</R12>
					<R20>0.175858796</R20>
					<R21>-0.0220326595</R21>
					<R22>-0.984168768</R22>
				</CoordinateFrame>
				<float name="FieldOfView">70</float>
				<CoordinateFrame name="Focus">
					<X>3.32714415</X>
					<Y>2.72157907</Y>
					<Z>-20.0798988</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<string name="Name">ThumbnailCamera</string>
			</Properties>
		</Item>
	</Item>
</roblox>