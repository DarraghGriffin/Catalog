<roblox xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.roblox.com/roblox.xsd" version="4">
	<External>null</External>
	<External>nil</External>
	<Item class="Tool" referent="RBX878BA2707FC14182884B1F45D509FF43">
		<Properties>
			<bool name="CanBeDropped">true</bool>
			<bool name="Enabled">true</bool>
			<CoordinateFrame name="Grip">
				<X>0</X>
				<Y>0.25</Y>
				<Z>-0.0500000007</Z>
				<R00>0.995037138</R00>
				<R01>0.0995037258</R01>
				<R02>1.83218879e-006</R02>
				<R10>-0.0995037183</R10>
				<R11>0.995037198</R11>
				<R12>1.83218854e-005</R12>
				<R20>0</R20>
				<R21>-1.84132678e-005</R21>
				<R22>0.99999994</R22>
			</CoordinateFrame>
			<bool name="ManualActivationOnly">false</bool>
			<string name="Name">CoolRockerGuitar</string>
			<Content name="TextureId"><url>http://www.roblox.com/asset/?id=248269885</url></Content>
			<string name="ToolTip"></string>
		</Properties>
		<Item class="Part" referent="RBXA8CA54ECFC684C99A8979EFD2F46646E">
			<Properties>
				<bool name="Anchored">false</bool>
				<float name="BackParamA">-0.5</float>
				<float name="BackParamB">0.5</float>
				<token name="BackSurface">0</token>
				<token name="BackSurfaceInput">0</token>
				<float name="BottomParamA">-0.5</float>
				<float name="BottomParamB">0.5</float>
				<token name="BottomSurface">0</token>
				<token name="BottomSurfaceInput">0</token>
				<int name="BrickColor">194</int>
				<CoordinateFrame name="CFrame">
					<X>-6.10000038</X>
					<Y>15.0000048</Y>
					<Z>1.90734863e-006</Z>
					<R00>0</R00>
					<R01>0</R01>
					<R02>1</R02>
					<R10>-0.70710665</R10>
					<R11>0.70710659</R11>
					<R12>0</R12>
					<R20>-0.70710659</R20>
					<R21>-0.70710665</R21>
					<R22>0</R22>
				</CoordinateFrame>
				<bool name="CanCollide">true</bool>
				<float name="Elasticity">0.5</float>
				<float name="Friction">0.300000012</float>
				<float name="FrontParamA">-0.5</float>
				<float name="FrontParamB">0.5</float>
				<token name="FrontSurface">0</token>
				<token name="FrontSurfaceInput">0</token>
				<float name="LeftParamA">-0.5</float>
				<float name="LeftParamB">0.5</float>
				<token name="LeftSurface">0</token>
				<token name="LeftSurfaceInput">0</token>
				<bool name="Locked">true</bool>
				<token name="Material">256</token>
				<string name="Name">Handle</string>
				<float name="Reflectance">0</float>
				<float name="RightParamA">-0.5</float>
				<float name="RightParamB">0.5</float>
				<token name="RightSurface">0</token>
				<token name="RightSurfaceInput">0</token>
				<Vector3 name="RotVelocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<float name="TopParamA">-0.5</float>
				<float name="TopParamB">0.5</float>
				<token name="TopSurface">0</token>
				<token name="TopSurfaceInput">0</token>
				<float name="Transparency">0</float>
				<Vector3 name="Velocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<token name="formFactorRaw">3</token>
				<token name="shape">1</token>
				<Vector3 name="size">
					<X>2</X>
					<Y>5</Y>
					<Z>0.25</Z>
				</Vector3>
			</Properties>
			<Item class="SpecialMesh" referent="RBXFFB32F9E4F9E41EC88E37A07BFF59B24">
				<Properties>
					<token name="LODX">2</token>
					<token name="LODY">2</token>
					<Content name="MeshId"><url>http://www.roblox.com/asset/?id=248269832</url></Content>
					<token name="MeshType">5</token>
					<string name="Name">Mesh</string>
					<Vector3 name="Offset">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<Vector3 name="Scale">
						<X>0.850000024</X>
						<Y>0.850000024</Y>
						<Z>0.850000024</Z>
					</Vector3>
					<Content name="TextureId"><url>http://www.roblox.com/asset/?id=248269856</url></Content>
					<Vector3 name="VertexColor">
						<X>1</X>
						<Y>1</Y>
						<Z>1</Z>
					</Vector3>
				</Properties>
			</Item>
			<Item class="Sound" referent="RBXE0C4C018D0404A83A8B2B250A0EC724C">
				<Properties>
					<bool name="Looped">false</bool>
					<string name="Name">ChordSound</string>
					<float name="Pitch">2.5</float>
					<bool name="PlayOnRemove">false</bool>
					<Content name="SoundId"><url>http://www.roblox.com/asset?id=99170537</url></Content>
					<float name="Volume">1</float>
				</Properties>
			</Item>
		</Item>
		<Item class="ModuleScript" referent="RBXBB3628527E2C4757BA58E95C707A974B">
			<Properties>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">LightningModule</string>
				<ProtectedString name="Source"><![CDATA[--Made by Luckymaxer

Tool = script.Parent
Handle = Tool:WaitForChild("Handle")

Players = game:GetService("Players")
Debris = game:GetService("Debris")

BasePart = Instance.new("Part")
BasePart.Material = Enum.Material.Plastic
BasePart.TopSurface = Enum.SurfaceType.Smooth
BasePart.BottomSurface = Enum.SurfaceType.Smooth
BasePart.FormFactor = Enum.FormFactor.Custom
BasePart.Locked = true
BasePart.CanCollide = true
BasePart.Anchored = false

ValidKeys = {"z", "x", "c", "v", "b", "n", "m"}
MinNotes = 2
MaxNotes = 8
CurrentString = {}
LightningRadius = 60
InRiff = false

Rate = (1 / 60)

Module = {}

function LightningStrike(Source, Destination)
	local MaxSegLength = 12
	local MinSegLength = 4
	local MaxOffset = 4
	local Direction = (Destination - Source).unit
	local Distance = (Source - Destination).magnitude
	
	local Points = {}	
	Points[1] = Source
	local LastDist = 0
	
	while (Distance - LastDist) > MaxSegLength do
		LastDist = (LastDist + ((math.random() * (MaxSegLength - MinSegLength)) + MinSegLength))
		for i = 1, 2 do
			local NewVector = (Source + (LastDist * Direction) + Vector3.new(math.random(), math.random(), math.random()))
			table.insert(Points, NewVector)
		end
		wait(Rate)
	end	
	table.insert(Points, Destination)
	
	local Parts = {}
	
	local LightningModel = Instance.new("Model")
	LightningModel.Name = "LightningModel"
	Debris:AddItem(LightningModel, 5)
	LightningModel.Parent = game:GetService("Workspace")	
	
	local Color = BrickColor.Random()
	for Index, i in ipairs(Points) do
		local LastPart = BasePart:Clone()
		LastPart.BrickColor = Color
		LastPart.Transparency = 0.3
		LastPart.Anchored = true
		LastPart.CanCollide = false
		for i, v in pairs({"Front", "Back", "Left", "Right", "Top", "Bottom"}) do
			local Light = Instance.new("SurfaceLight")
			Light.Face = Enum.NormalId[v]
			Light.Range = 4
			Light.Brightness = 100
			Light.Color = Color.Color
			Light.Enabled = true
			Light.Parent = LastPart
		end
		local Mesh = Instance.new("CylinderMesh")
		Mesh.Scale = Vector3.new(0.5, 1, 0.5)
		Mesh.Parent = LastPart
		if Points[Index + 1] then		
			LastPart.Size = Vector3.new(0.5, (i - Points[Index + 1]).magnitude, 0.5)
			LastPart.CFrame = CFrame.new(((i + Points[Index + 1]) / 2), Points[Index + 1]) * CFrame.Angles((math.pi / 2), 0, 0)
			Debris:AddItem(LastPart, 1)
			LastPart.Parent = LightningModel
			wait(Rate)
		end
	end
end

function DoLightning(Root, HitPlayers, Player)
	for i, v in pairs(Players:GetChildren()) do
		if v:IsA("Player") and not HitPlayers[v] and v ~= Player then
			local character = v.Character
			if character then
				local humanoid = character:FindFirstChild("Humanoid")
				local torso = character:FindFirstChild("Torso")
				if humanoid and humanoid.Health > 0 and torso and (torso.Position - Root).magnitude < LightningRadius then
					HitPlayers[v] = true
					Spawn(function()
						LightningStrike(Root, torso.Position)
					end)
					humanoid:TakeDamage(100)
					DoLightning(Handle.Position, HitPlayers, Player)
					return true
				end
			end
		end
	end
	return false
end

function CreateGui()
	local NoteGui = Instance.new("ScreenGui")
	NoteGui.Name = "NoteGui"
	local Frame = Instance.new("Frame")
	Frame.Position = UDim2.new(0, 0, 1, -95)
	Frame.Size = UDim2.new(0, 260, 0, 55)
	Frame.BackgroundColor3 = Color3.new((170 / 255), (255 / 255), (0 / 255))
	Frame.BorderSizePixel = 0
	Frame.ClipsDescendants = true
	Frame.Parent = NoteGui
	local Marker = Instance.new("Frame")
	Marker.Name = "Marker"
	Marker.Position = UDim2.new(0, 75, 0, 0)
	Marker.Size = UDim2.new(0, 5, 1, 0)
	Marker.BackgroundColor3 = Color3.new((251 / 255), (255 / 255), (12 / 255))
	Marker.BorderSizePixel = 0
	Marker.ZIndex = 3
	Marker.Parent = Frame
	local TemplateNote = Instance.new("TextButton")
	TemplateNote.Name = "TemplateNote"
	TemplateNote.Position = UDim2.new(0, 0, 0, 0)
	TemplateNote.Size = UDim2.new(0, 30, 0, 30)
	TemplateNote.Font = Enum.Font.ArialBold
	TemplateNote.FontSize = Enum.FontSize.Size36
	TemplateNote.BackgroundColor3 = Color3.new((255 / 255), (170 / 255), (0 / 255))
	TemplateNote.TextColor3 = Color3.new((255 / 255), (0 / 255), (0 / 255))
	TemplateNote.TextXAlignment = Enum.TextXAlignment.Center
	TemplateNote.TextYAlignment = Enum.TextYAlignment.Center
	TemplateNote.ZIndex = 2
	TemplateNote.AutoButtonColor = false
	TemplateNote.Visible = false
	return {NoteGui = NoteGui, Frame = Frame, Marker = Marker, TemplateNote = TemplateNote}
end

function MakeNote(Gui)
	local NewNote = {}
	local Key = ValidKeys[math.random(#ValidKeys)]
	local Frame = CreateGui().TemplateNote:Clone()
	Frame.Text = string.upper(Key)
	Frame.BorderSizePixel = 0
	Frame.Visible = true
	local NewNote = {
		Frame = Frame,
		Key = Key,
		Hit = false,
		Missed = false,
	}
	return NewNote
end

function SetupNoteString(Gui)
	for i, v in pairs(CurrentString) do
		if v and v.Frame and v.Frame.Parent then
			v.Frame:Destroy()
		end
	end
	InRiff = false
	CurrentString = {}
	local NumNotes = math.random(MinNotes, MaxNotes)
	FirstNote = nil
	LastNote = nil
	for i = 1, NumNotes do
		local Note = MakeNote(Gui)
		local Offset = math.random(5, 30)
		Note.Frame.Position = UDim2.new(0, (((LastNote and (LastNote.Frame.Position.X.Offset + Note.Frame.Size.X.Offset)) or (Gui.Marker.Position.X.Offset + Gui.Marker.Size.X.Offset)) + Offset), 0.25, 0)
		FirstNote = ((not FirstNote and Note) or FirstNote)
		LastNote = Note
		Note.Frame.Parent = Gui.Frame
		table.insert(CurrentString, Note)
	end
end

function MarkFrame(Gui, Note, Key)
	if not Note.Missed then
		local Frame = Note.Frame
		if (Gui.Marker.Position.X.Offset + (Gui.Marker.Size.X.Offset / 2)) >= Frame.Position.X.Offset and (Gui.Marker.Position.X.Offset + (Gui.Marker.Size.X.Offset / 2)) < (Frame.Position.X.Offset + Frame.Size.X.Offset) then
			if Key then
				if Key == Note.Key then
					Note.Hit = true
				else
					Note.Hit = false
					Note.Missed = true
				end
			end
		elseif (Gui.Marker.Position.X.Offset + (Gui.Marker.Size.X.Offset / 2)) < Frame.Position.X.Offset then
		elseif (Key and Key ~= Note.Key) or Gui.Marker.Position.X.Offset > (Frame.Position.X.Offset + Frame.Size.X.Offset) then
			Note.Missed = true
		end
		Frame.BackgroundColor3 = ((Note.Hit and BrickColor.new("New Yeller").Color) or (Note.Missed and Color3.new((170 / 255), (0 / 255), (0 / 255))) or Frame.BackgroundColor3)
	end
end

function HandleLightning(Gui, Key, Player)
	if not InRiff and Key == "Start" then --[[Key == CurrentString[1].Key]]
		InRiff = true
		local Length = (FirstNote.Frame.Position.X.Offset + (LastNote.Frame.Position.X.Offset + LastNote.Frame.Size.X.Offset))
		while Gui.NoteGui and Gui.NoteGui.Parent and (LastNote.Frame.Position.X.Offset + LastNote.Frame.Size.X.Offset) > 0 and InRiff do
			for ii, vv in pairs(CurrentString) do
				local Frame = vv.Frame
				Frame.Position = Frame.Position - UDim2.new(0, 2, 0, 0)
				MarkFrame(Gui, vv, nil)
			end
			wait(Rate)
		end
		local OverallRatio
		if Gui.NoteGui and Gui.NoteGui.Parent and InRiff then
			local Ratio = {Success = 0, Failure = 0}
			for i, v in pairs(CurrentString) do
				if v.Hit then
					Ratio.Success = (Ratio.Success + 1)
				elseif v.Missed then
					Ratio.Failure = (Ratio.Failure + 1)
				end
			end
			OverallRatio = (Ratio.Success / #CurrentString)
		end
		SetupNoteString(Gui)
		InRiff = false
		if OverallRatio and OverallRatio >= 0.75 then
			return true
		else
			return false --Loss
		end
	elseif InRiff then
		local KeyValid = false
		for i, v in pairs(ValidKeys) do
			if string.lower(v) == string.lower(Key) then
				KeyValid = true
			end
		end
		if not KeyValid then
			return
		end
		for i, v in pairs(CurrentString) do
			MarkFrame(Gui, v, Key)
		end
	end
end

function Strike()
	--local HitPlayers = {}
	--if not DoLightning(Handle.Position, HitPlayers, Player) then
	for i = 1, math.random(8, 25), 1 do	
		Spawn(function()					
			LightningStrike(Handle.Position, (Handle.Position +(Vector3.new(((math.random() - 0.5) * 2),((math.random() - 0.5) * 2),((math.random() - 0.5) * 2)) * 45)))
		end)						
	end
end

function EndRiff()
	InRiff = false
end

return {
	CreateGui = CreateGui,
	MakeNote = MakeNote,
	SetupNoteString = SetupNoteString,
	LightningStrike = LightningStrike,
	EndRiff = EndRiff,
	DoLightning = DoLightning,
	Strike = Strike,
	HandleLightning = HandleLightning
}]]></ProtectedString>
			</Properties>
		</Item>
		<Item class="LocalScript" referent="RBXA8C37483184244AFA48EAC367F34CA4A">
			<Properties>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">LocalScript</string>
				<ProtectedString name="Source"><![CDATA[--Made by Luckymaxer

Tool = script.Parent
Handle = Tool:WaitForChild("Handle")

Players = game:GetService("Players")
Debris = game:GetService("Debris")
RunService = game:GetService("RunService")

Camera = game:GetService("Workspace").CurrentCamera

LightningModule = require(Tool:WaitForChild("LightningModule"))

BaseUrl = "http://www.roblox.com/asset/?id="

Animations = {}
LocalObjects = {}

ServerControl = Tool:WaitForChild("ServerControl")
ClientControl = Tool:WaitForChild("ClientControl")

ShiftDown = false
ToolEquipped = false

function SetAnimation(mode, value)
	if mode == "PlayAnimation" and value and ToolEquipped and Humanoid then
		for i, v in pairs(Animations) do
			if v.Animation == value.Animation then
				v.AnimationTrack:Stop()
				table.remove(Animations, i)
			end
		end
		local AnimationTrack = Humanoid:LoadAnimation(value.Animation)
		table.insert(Animations, {Animation = value.Animation, AnimationTrack = AnimationTrack})
		AnimationTrack:Play(value.FadeTime, value.Weight, value.Speed)
	elseif mode == "StopAnimation" and value then
		for i, v in pairs(Animations) do
			if v.Animation == value.Animation then
				v.AnimationTrack:Stop()
				table.remove(Animations, i)
			end
		end
	end
end

function DisableJump(Boolean)
	if PreventJump then
		PreventJump:disconnect()
	end
	if Boolean then
		PreventJump = Humanoid.Changed:connect(function(Property)
			if Property ==  "Jump" then
				Humanoid.Jump = false
			end
		end)
	end
end

function CheckIfAlive()
	return (((Character and Character.Parent and Humanoid and Humanoid.Parent and Humanoid.Health > 0 and Player and Player.Parent) and true) or false)
end

function Equipped(Mouse)
	Character = Tool.Parent
	Player = Players:GetPlayerFromCharacter(Character)
	Humanoid = Character:FindFirstChild("Humanoid")
	ToolEquipped = true
	if not CheckIfAlive() then
		return
	end
	local PlayerGui = Player:FindFirstChild("PlayerGui")
	if PlayerGui then
		NoteGuiInfo = LightningModule.CreateGui()
		CurrentGui = NoteGuiInfo.NoteGui
		CurrentGui.Parent = PlayerGui
		Spawn(function()
			LightningModule.SetupNoteString(NoteGuiInfo)
		end)
	end
	PlayerMouse = Player:GetMouse()
	Mouse.Button1Down:connect(function()
		InvokeServer("MouseClick", {Down = true})
	end)
	Mouse.Button1Up:connect(function()
		InvokeServer("MouseClick", {Down = false})
	end)
	Mouse.KeyDown:connect(function(Key)
		local ByteKey = string.byte(Key)
		InvokeServer("KeyPress", {Key = Key, Down = true})
		LightningModule.HandleLightning(NoteGuiInfo, Key, Player)
		if (Key == "2" or ByteKey == 50) and InvokeServer("PlayingMode") then
			local CanStrike = LightningModule.HandleLightning(NoteGuiInfo, "Start", Player)
			if CanStrike then
				InvokeServer("Strike", {Value = CanStrike})
			end
		end
	end)
	Mouse.KeyUp:connect(function(Key)
		InvokeServer("KeyPress", {Key = Key, Down = false})
	end)
end

function Unequipped()
	ShiftDown = false
	LocalObjects = {}
	Debris:AddItem(CurrentGui, 0)
	for i, v in pairs({PreventJump, ObjectLocalTransparencyModifier}) do
		if v then
			v:disconnect()
		end
	end
	for i, v in pairs(Animations) do
		if v and v.AnimationTrack then
			v.AnimationTrack:Stop()
		end
	end
	Animations = {}
	ToolEquipped = false
end

function InvokeServer(mode, value)
	local ServerReturn
	pcall(function()
		ServerReturn = ServerControl:InvokeServer(mode, value)
	end)
	return ServerReturn
end

function OnClientInvoke(mode, value)
	if mode == "PlayAnimation" and value and ToolEquipped and Humanoid then
		SetAnimation("PlayAnimation", value)
	elseif mode == "StopAnimation" and value then
		SetAnimation("StopAnimation", value)
	elseif mode == "PlaySound" and value then
		value:Play()
	elseif mode == "StopSound" and value then
		value:Stop()
	elseif mode == "MousePosition" then
		return {Position = PlayerMouse.Hit.p, Target = PlayerMouse.Target}
	elseif mode == "DisableJump" then
		DisableJump(value)
	elseif mode == "SetLocalTransparencyModifier" and value and ToolEquipped then
		pcall(function()
			local ObjectFound = false
			for i, v in pairs(LocalObjects) do
				if v == value then
					ObjectFound = true
				end
			end
			if not ObjectFound then
				table.insert(LocalObjects, value)
				if ObjectLocalTransparencyModifier then
					ObjectLocalTransparencyModifier:disconnect()
				end
				ObjectLocalTransparencyModifier = RunService.RenderStepped:connect(function()
					for i, v in pairs(LocalObjects) do
						if v.Object and v.Object.Parent then
							local CurrentTransparency = v.Object.LocalTransparencyModifier
							if ((not v.AutoUpdate and (CurrentTransparency == 1 or  CurrentTransparency == 0)) or v.AutoUpdate) then
								v.Object.LocalTransparencyModifier = v.Transparency
							end
						else
							table.remove(LocalObjects, i)
						end
					end
				end)
			end
		end)
	elseif mode == "ResetNoteGui" then
		if CurrentGui and CurrentGui.Parent then
			LightningModule.EndRiff()
		end
	end
end

ClientControl.OnClientInvoke = OnClientInvoke
Tool.Equipped:connect(Equipped)
Tool.Unequipped:connect(Unequipped)]]></ProtectedString>
			</Properties>
		</Item>
		<Item class="Script" referent="RBXABC87B00D1714A589B0635D2DE6B6314">
			<Properties>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">Script</string>
				<ProtectedString name="Source"><![CDATA[--Made by Luckymaxer

Tool = script.Parent
Handle = Tool:WaitForChild("Handle")

Players = game:GetService("Players")
Debris = game:GetService("Debris")

Module = require(185791213)
LightningModule = require(Tool:WaitForChild("LightningModule"))

NoteData = {
	Chords = {
		{Key = "z", Sound = {Normal = 99170172, Sharp = 99189531}},
		{Key = "x", Sound = {Normal = 99170311, Sharp = 99189711}},
		{Key = "c", Sound = {Normal = 99170354, Sharp = 99189785}},
		{Key = "v", Sound = {Normal = 99170403, Sharp = 99190216}},
		{Key = "b", Sound = {Normal = 99170481, Sharp = 99189905}},
		{Key = "n", Sound = {Normal = 99170537, Sharp = 99190021}},
		{Key = "m", Sound = {Normal = 99170583, Sharp = 99190550}}
	},
	Pitches = {
		{Key = "g", Pitch = 4},
		{Key = "h", Pitch = 4.25},
		{Key = "j", Pitch = 4.5},
		{Key = "k", Pitch = 4.75},
		{Key = "l", Pitch = 5},
	}
}

Grips = {
	Hold = CFrame.new(0, 0.25, -0.05, 0.995037138, 0.0995037258, 1.83218879e-006, -0.0995037183, 0.995037198, 1.83218854e-005, 0, -1.84132678e-005, 0.99999994),
	Play = CFrame.new(0.25, 1.25, 0.1, 0.872270942, 0.462249398, 0.159589857, -0.141773224, 0.551365077, -0.822129548, -0.468021154, 0.694494069, 0.546474338),
	Unequipped = CFrame.new(0.5, -2, 0.7, -0.866025388, 8.10044585e-005, -0.5, -0.5, 1.31134158e-007, 0.866025388, 7.02174802e-005, 1, 4.03886625e-005)
}

Animations = {
	Hold = {Animation = Tool:WaitForChild("Hold"), FadeTime = nil, Weight = nil, Speed = nil, Duration = nil},
	Pluck = {Animation = Tool:WaitForChild("Pluck"), FadeTime = nil, Weight = nil, Speed = 6, Duration = nil}
}

Sounds = {
	ChordSound = Handle:WaitForChild("ChordSound"),
}

ChordDuration = 1

IsPlayingMusic = false
CurrentNote = 1
CurrentPitch = NoteData.Pitches[5]

ToolEquipped = false

ClientControl = (Tool:FindFirstChild("ClientControl") or Instance.new("RemoteFunction"))
ClientControl.Name = "ClientControl"
ClientControl.Parent = Tool

ServerControl = (Tool:FindFirstChild("ServerControl") or Instance.new("RemoteFunction"))
ServerControl.Name = "ServerControl"
ServerControl.Parent = Tool

ServerControl.OnServerInvoke = (function(player, Mode, Value)
	if not Tool.Enabled or not ToolEquipped then
		return
	end
	if Mode == "KeyPress" and Value then
		local Key = string.lower(Value.Key)
		local ByteKey = string.byte(Key)
		local Down = Value.Down
		if Key == "0" or ByteKey == 48 then
			ShiftDown = Down
		else
			if Down then
				if IsPlayingMusic then
					for i, v in pairs(NoteData.Chords) do
						if v.Key == Key then
							local Duration = 1
							local Chord = v
							local SoundId = ((not ShiftDown and v.Sound.Normal) or v.Sound.Sharp)
							local Pitch = CurrentPitch.Pitch
							Spawn(function()
								Module.PlaySound(Handle, {Sound = Sounds.ChordSound, SoundId = SoundId, MakeNew = true}, ((Chord.Pitch and Chord.Pitch) or (CurrentPitch and CurrentPitch.Pitch) or nil), ChordDuration)
								InvokeClient("PlayAnimation", Animations.Pluck)
							end)
							return
						end
					end
				end
				for i, v in pairs(NoteData.Pitches) do
					if v.Key == Key then
						CurrentPitch = v
						return
					end
				end
			end
		end
	elseif Mode == "PlayingMode" then
		return IsPlayingMusic
	elseif Mode == "Strike" and Value then
		local Value = Value.Value
		if Value then
			Spawn(LightningModule.Strike)
		end
	end
end)

Tool.Grip = Grips.Hold
Tool.Enabled = true

function InvokeClient(Mode, Value)
	local ClientReturn = nil
	pcall(function()
		ClientReturn = ClientControl:InvokeClient(Player, Mode, Value)
	end)
	return ClientReturn
end

function Activated()
	if not Tool.Enabled or not CheckIfAlive() or not ToolEquipped then
		return
	end
	Tool.Enabled = false
	IsPlayingMusic = not IsPlayingMusic
	if IsPlayingMusic then
		Tool.Grip = Grips.Play
		Spawn(function()
			InvokeClient("PlayAnimation", Animations.Hold)
		end)
	else
		Tool.Grip = Grips.Hold
		Spawn(function()
			InvokeClient("ResetNoteGui")
		end)
		for i, v in pairs(Animations) do
			Spawn(function()
				InvokeClient("StopAnimation", v)
			end)
		end
	end
	Tool.Enabled = true
end

function CheckIfAlive()
	return (((Player and Player.Parent and Humanoid and Humanoid.Parent and Humanoid.Health > 0 and Torso and Torso.Parent) and true) or false)
end

function Equipped(Mouse)
	Character = Tool.Parent
	Player = Players:GetPlayerFromCharacter(Character)
	Backpack = Player:FindFirstChild("Backpack")
	Humanoid = Character:FindFirstChild("Humanoid")
	Torso = Character:FindFirstChild("Torso")
	if not CheckIfAlive() then
		return
	end
	Tool.Grip = Grips.Hold
	Spawn(function()
		ControlGui = Module.DisplayControls(
			Player,
			"Keys H, J, K, and L change pitch Keys Z, X, C, V, B, N, M play notes Ctrl to play special",
			nil,
			{
				TextColor3 = Color3.new((85 / 255), (255 / 255), (255 / 255)),
				TextStrokeColor3 = Color3.new((85 / 255), (170 / 255), (255 / 255)),
				TextStrokeTransparency = 0.25
			}
		)
		ControlGui.Frame.BackgroundColor3 = Color3.new((170 / 255), (255 / 255), (0 / 255))
	end)
	ToolEquipped = true
end

function Unequipped()
	ShiftDown = false
	IsPlayingMusic = false
	Debris:AddItem(ControlGui, 0)
	ToolEquipped = false
end

Tool.Changed:connect(function(Property)
	if Property == "Parent" then
		if FakeGuitar and FakeGuitar.Parent then
			FakeGuitar:Destroy()
		end
		if Tool.Grip == Grips.Play then
			if Backpack and Backpack.Parent and Tool.Parent == Backpack then
				FakeGuitar = Handle:Clone()
				FakeGuitar.Name = "FakeGuitar"
				FakeGuitar.CanCollide = false
				local GuitarWeld = Instance.new("Weld")
				GuitarWeld.Part0 = Torso
				GuitarWeld.Part1 = FakeGuitar
				GuitarWeld.C0 = CFrame.new(0, -1, 0, 1, 0, -0, 0, 0, 1, 0, -1, -0)
				GuitarWeld.C1 = Grips.Unequipped
				GuitarWeld.Parent = FakeGuitar
				FakeGuitar.Parent = Character
				Backpack = nil
			else
				if FakeGuitar and FakeGuitar.Parent then
					FakeGuitar:Destroy()
				end
			end
		end
	end
end)

Tool.Activated:connect(Activated)
Tool.Equipped:connect(Equipped)
Tool.Unequipped:connect(Unequipped)]]></ProtectedString>
			</Properties>
		</Item>
		<Item class="Animation" referent="RBX120C204CB310481180DEA9C32088EEB5">
			<Properties>
				<Content name="AnimationId"><url>http://www.roblox.com/asset/?id=192906348</url></Content>
				<string name="Name">Hold</string>
			</Properties>
		</Item>
		<Item class="Animation" referent="RBX0038E07305CE4B2C8C62F84E4E78449C">
			<Properties>
				<Content name="AnimationId"><url>http://www.roblox.com/asset/?id=192900081</url></Content>
				<string name="Name">Pluck</string>
			</Properties>
		</Item>
		<Item class="Camera" referent="RBX6C69583062DF4F23A905698F39418F5D">
			<Properties>
				<Ref name="CameraSubject">null</Ref>
				<token name="CameraType">0</token>
				<CoordinateFrame name="CoordinateFrame">
					<X>-9.58795643</X>
					<Y>15.5033302</Y>
					<Z>0.315150112</Z>
					<R00>0.049910754</R00>
					<R01>0.23817952</R01>
					<R02>-0.969937921</R02>
					<R10>9.31322575e-010</R10>
					<R11>0.971148372</R11>
					<R12>0.238476723</R12>
					<R20>0.998753726</R20>
					<R21>-0.011902554</R21>
					<R22>0.048470743</R22>
				</CoordinateFrame>
				<float name="FieldOfView">70</float>
				<CoordinateFrame name="Focus">
					<X>-7.1049118</X>
					<Y>14.8928289</Y>
					<Z>0.191064835</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<string name="Name">ThumbnailCamera</string>
			</Properties>
		</Item>
	</Item>
</roblox>