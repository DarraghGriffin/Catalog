<roblox xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.roblox.com/roblox.xsd" version="4">
	<External>null</External>
	<External>nil</External>
	<Item class="Tool" referent="RBXFB53CED85A3C42E18FD775AD87FC4E4D">
		<Properties>
			<bool name="CanBeDropped">true</bool>
			<bool name="Enabled">true</bool>
			<CoordinateFrame name="Grip">
				<X>0</X>
				<Y>0</Y>
				<Z>1.125</Z>
				<R00>1</R00>
				<R01>0</R01>
				<R02>0</R02>
				<R10>0</R10>
				<R11>1</R11>
				<R12>0</R12>
				<R20>0</R20>
				<R21>0</R21>
				<R22>1</R22>
			</CoordinateFrame>
			<bool name="ManualActivationOnly">false</bool>
			<string name="Name">DragonEye</string>
			<Content name="TextureId"><url>http://www.roblox.com/asset/?id=252790309</url></Content>
			<string name="ToolTip"></string>
		</Properties>
		<Item class="Part" referent="RBX3AA43AB44B38452CB9DEFD823C6A3C9D">
			<Properties>
				<bool name="Anchored">false</bool>
				<float name="BackParamA">-0.5</float>
				<float name="BackParamB">0.5</float>
				<token name="BackSurface">0</token>
				<token name="BackSurfaceInput">0</token>
				<float name="BottomParamA">-0.5</float>
				<float name="BottomParamB">0.5</float>
				<token name="BottomSurface">0</token>
				<token name="BottomSurfaceInput">0</token>
				<int name="BrickColor">194</int>
				<CoordinateFrame name="CFrame">
					<X>47.4668198</X>
					<Y>4.64359093</Y>
					<Z>-39.224308</Z>
					<R00>0.89170599</R00>
					<R01>0.00972591341</R01>
					<R02>-0.452509463</R02>
					<R10>2.25259711e-007</R10>
					<R11>0.999768853</R11>
					<R12>0.021488741</R12>
					<R20>0.45261398</R20>
					<R21>-0.0191617608</R21>
					<R22>0.891500056</R22>
				</CoordinateFrame>
				<bool name="CanCollide">true</bool>
				<float name="Elasticity">0.5</float>
				<float name="Friction">0.300000012</float>
				<float name="FrontParamA">-0.5</float>
				<float name="FrontParamB">0.5</float>
				<token name="FrontSurface">0</token>
				<token name="FrontSurfaceInput">0</token>
				<float name="LeftParamA">-0.5</float>
				<float name="LeftParamB">0.5</float>
				<token name="LeftSurface">0</token>
				<token name="LeftSurfaceInput">0</token>
				<bool name="Locked">true</bool>
				<token name="Material">256</token>
				<string name="Name">Handle</string>
				<float name="Reflectance">0</float>
				<float name="RightParamA">-0.5</float>
				<float name="RightParamB">0.5</float>
				<token name="RightSurface">0</token>
				<token name="RightSurfaceInput">0</token>
				<Vector3 name="RotVelocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<float name="TopParamA">-0.5</float>
				<float name="TopParamB">0.5</float>
				<token name="TopSurface">0</token>
				<token name="TopSurfaceInput">0</token>
				<float name="Transparency">0</float>
				<Vector3 name="Velocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<token name="formFactorRaw">3</token>
				<token name="shape">1</token>
				<Vector3 name="size">
					<X>0.75</X>
					<Y>0.75</Y>
					<Z>2.25</Z>
				</Vector3>
			</Properties>
			<Item class="SpecialMesh" referent="RBX9AC97A50AB404D5A9C9F24EB81C42CDD">
				<Properties>
					<token name="LODX">2</token>
					<token name="LODY">2</token>
					<Content name="MeshId"><url>http://www.roblox.com/asset/?id=252790127</url></Content>
					<token name="MeshType">5</token>
					<string name="Name">Mesh</string>
					<Vector3 name="Offset">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<Vector3 name="Scale">
						<X>1</X>
						<Y>1</Y>
						<Z>1</Z>
					</Vector3>
					<Content name="TextureId"><url>http://www.roblox.com/asset/?id=252790234</url></Content>
					<Vector3 name="VertexColor">
						<X>1</X>
						<Y>1</Y>
						<Z>1</Z>
					</Vector3>
				</Properties>
			</Item>
			<Item class="SpotLight" referent="RBX68707005EBAF4FC0910EE226FE9390AF">
				<Properties>
					<float name="Angle">100</float>
					<float name="Brightness">100</float>
					<Color3 name="Color">4289353215</Color3>
					<bool name="Enabled">false</bool>
					<token name="Face">5</token>
					<string name="Name">Light</string>
					<float name="Range">10</float>
					<bool name="Shadows">false</bool>
				</Properties>
			</Item>
		</Item>
		<Item class="LocalScript" referent="RBX535F5B230355452EBA7C179218F763C0">
			<Properties>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">LocalScript</string>
				<ProtectedString name="Source"><![CDATA[--Made by Luckymaxer

Tool = script.Parent
Handle = Tool:WaitForChild("Handle")

Players = game:GetService("Players")
RunService = game:GetService("RunService")
UserInputService = game:GetService("UserInputService")
ContentProvider = game:GetService("ContentProvider")

RbxUtility = LoadLibrary("RbxUtility")
Create = RbxUtility.Create

Animations = {}
LocalObjects = {}

Remotes = Tool:WaitForChild("Remotes")
ServerControl = Remotes:WaitForChild("ServerControl")
ClientControl = Remotes:WaitForChild("ClientControl")

InputCheck = Instance.new("ScreenGui")
InputCheck.Name = "InputCheck"
InputButton = Instance.new("ImageButton")
InputButton.Name = "InputButton"
InputButton.Image = ""
InputButton.BackgroundTransparency = 1
InputButton.ImageTransparency = 1
InputButton.Size = UDim2.new(1, 0, 1, 0)
InputButton.Parent = InputCheck

Rate = (1 / 60)

ToolEquipped = false

function SetAnimation(mode, value)
	if not ToolEquipped or not CheckIfAlive() then
		return
	end
	local function StopAnimation(Animation, Fade)
		for i, v in pairs(Animations) do
			if v.Animation == Animation then
				v.AnimationTrack:Stop((Fade and value.FadeTime) or nil)
				if v.TrackStopped then
					v.TrackStopped:disconnect()
				end
				table.remove(Animations, i)
			end
		end
	end
	if mode == "PlayAnimation" then
		for i, v in pairs(Animations) do
			if v.Animation == value.Animation then
				if value.Speed then
					v.AnimationTrack:AdjustSpeed(value.Speed)
					return
				elseif value.Weight or value.FadeTime then
					v.AnimationTrack:AdjustWeight(value.Weight, value.FadeTime)
					return
				else
					StopAnimation(value.Animation, false)
				end
			end
		end
		local AnimationMonitor = Create("Model"){}
		local TrackEnded = Create("StringValue"){Name = "Ended"}
		local AnimationTrack = Humanoid:LoadAnimation(value.Animation)
		local TrackStopped
		TrackStopped = AnimationTrack.Stopped:connect(function()
			if TrackStopped then
				TrackStopped:disconnect()
			end
			StopAnimation(value.Animation, true)
			TrackEnded.Parent = AnimationMonitor
		end)
		table.insert(Animations, {Animation = value.Animation, AnimationTrack = AnimationTrack, TrackStopped = TrackStopped})
		AnimationTrack:Play(value.FadeTime, value.Weight, value.Speed)
		AnimationMonitor:WaitForChild(TrackEnded.Name)
		return TrackEnded.Name
	elseif mode == "StopAnimation" and value then
		StopAnimation(value.Animation, true)
	end
end

function CheckIfAlive()
	return (((Character and Character.Parent and Humanoid and Humanoid.Parent and Humanoid.Health > 0 and Player and Player.Parent) and true) or false)
end

function Equipped(Mouse)
	Character = Tool.Parent
	Player = Players:GetPlayerFromCharacter(Character)
	Humanoid = Character:FindFirstChild("Humanoid")
	ToolEquipped = true
	if not CheckIfAlive() then
		return
	end
	Spawn(function()
		PlayerMouse = Player:GetMouse()
		Mouse.Button1Down:connect(function()
			InvokeServer("Button1Click", {Down = true})
		end)
		Mouse.Button1Up:connect(function()
			InvokeServer("Button1Click", {Down = false})
		end)
		Mouse.KeyDown:connect(function(Key)
			InvokeServer("KeyPress", {Key = Key, Down = true})
		end)
		Mouse.KeyUp:connect(function(Key)
			InvokeServer("KeyPress", {Key = Key, Down = false})
		end)
		local PlayerGui = Player:FindFirstChild("PlayerGui")
		if PlayerGui then
			if UserInputService.TouchEnabled then
				InputCheckClone = InputCheck:Clone()
				InputCheckClone.InputButton.InputBegan:connect(function()
					InvokeServer("Button1Click", {Down = true})
				end)
				InputCheckClone.InputButton.InputEnded:connect(function()
					InvokeServer("Button1Click", {Down = false})
				end)
				InputCheckClone.Parent = PlayerGui
			end
		end
		for i, v in pairs(Tool:GetChildren()) do
			if v:IsA("Animation") then
				ContentProvider:Preload(v.AnimationId)
			end
		end
	end)
end

function Unequipped()
	LocalObjects = {}
	if InputCheckClone and InputCheckClone.Parent then
		InputCheckClone:Destroy()
	end
	for i, v in pairs(Animations) do
		if v and v.AnimationTrack then
			v.AnimationTrack:Stop()
		end
	end
	for i, v in pairs({ObjectLocalTransparencyModifier}) do
		if v then
			v:disconnect()
		end
	end
	Animations = {}
	ToolEquipped = false
end

function InvokeServer(mode, value)
	pcall(function()
		local ServerReturn = ServerControl:InvokeServer(mode, value)
		return ServerReturn
	end)
end

function OnClientInvoke(mode, value)
	if mode == "PlayAnimation" and value and ToolEquipped and Humanoid then
		SetAnimation("PlayAnimation", value)
	elseif mode == "StopAnimation" and value then
		SetAnimation("StopAnimation", value)
	elseif mode == "PlaySound" and value then
		value:Play()
	elseif mode == "StopSound" and value then
		value:Stop()
	elseif mode == "MousePosition" then
		return ((PlayerMouse and {Position = PlayerMouse.Hit.p, Target = PlayerMouse.Target}) or nil)
	elseif mode == "SetLocalTransparencyModifier" and value and ToolEquipped then
		pcall(function()
			local ObjectFound = false
			for i, v in pairs(LocalObjects) do
				if v == value then
					ObjectFound = true
				end
			end
			if not ObjectFound then
				table.insert(LocalObjects, value)
				if ObjectLocalTransparencyModifier then
					ObjectLocalTransparencyModifier:disconnect()
				end
				ObjectLocalTransparencyModifier = RunService.RenderStepped:connect(function()
					for i, v in pairs(LocalObjects) do
						if v.Object and v.Object.Parent then
							local CurrentTransparency = v.Object.LocalTransparencyModifier
							if ((not v.AutoUpdate and (CurrentTransparency == 1 or  CurrentTransparency == 0)) or v.AutoUpdate) then
								v.Object.LocalTransparencyModifier = v.Transparency
							end
						else
							table.remove(LocalObjects, i)
						end
					end
				end)
			end
		end)
	end
end

ClientControl.OnClientInvoke = OnClientInvoke
Tool.Equipped:connect(Equipped)
Tool.Unequipped:connect(Unequipped)]]></ProtectedString>
			</Properties>
		</Item>
		<Item class="Folder" referent="RBXA0807632DD1F48189C489A2FB3BE5851">
			<Properties>
				<string name="Name">Remotes</string>
			</Properties>
			<Item class="RemoteFunction" referent="RBX0DB82035C8294CCE8D4B8E7C05B295A6">
				<Properties>
					<string name="Name">ServerControl</string>
				</Properties>
			</Item>
			<Item class="RemoteFunction" referent="RBX004C0317B3654ED5B4F73820B8AECDC1">
				<Properties>
					<string name="Name">ClientControl</string>
				</Properties>
			</Item>
		</Item>
		<Item class="Camera" referent="RBX374FEDC293F74969A0C2E53E670DF61E">
			<Properties>
				<Ref name="CameraSubject">null</Ref>
				<token name="CameraType">0</token>
				<CoordinateFrame name="CoordinateFrame">
					<X>47.0058479</X>
					<Y>5.1190424</Y>
					<Z>-41.5439072</Z>
					<R00>-0.954784274</R00>
					<R01>0.0744498223</R01>
					<R02>-0.287826777</R02>
					<R10>-0</R10>
					<R11>0.968137264</R11>
					<R12>0.250420243</R12>
					<R20>0.297299534</R20>
					<R21>0.239097312</R21>
					<R22>-0.924362242</R22>
				</CoordinateFrame>
				<float name="FieldOfView">50.0000038</float>
				<CoordinateFrame name="Focus">
					<X>47.7086143</X>
					<Y>4.50760889</Y>
					<Z>-39.2869568</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<string name="Name">ThumbnailCamera</string>
			</Properties>
		</Item>
		<Item class="Script" referent="RBXDF486BDB32104ADEBB95BC875DF639F8">
			<Properties>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">Script</string>
				<ProtectedString name="Source"><![CDATA[--Made by Luckymaxer

Tool = script.Parent
Handle = Tool:WaitForChild("Handle")
Light = Handle:WaitForChild("Light")

Players = game:GetService("Players")
Debris = game:GetService("Debris")

RbxUtility = LoadLibrary("RbxUtility")
Create = RbxUtility.Create

SplashScreen = script:WaitForChild("SplashScreen")

BaseUrl = "http://www.roblox.com/asset/?id="

BasePart = Create("Part"){
	Shape = Enum.PartType.Block,
	Material = Enum.Material.Plastic,
	TopSurface = Enum.SurfaceType.Smooth,
	BottomSurface = Enum.SurfaceType.Smooth,
	FormFactor = Enum.FormFactor.Custom,
	Size = Vector3.new(0.2, 0.2, 0.2),
	CanCollide = true,
	Locked = true,
	Anchored = false,
}

BaseLight = BasePart:Clone()
BaseLight.Transparency = 0.375
BaseLight.Name = "Effect"
BaseLight.Material = Enum.Material.Fabric
BaseLight.CanCollide = false
LightMesh = Create("SpecialMesh"){
	Name = "Mesh",
	MeshType = Enum.MeshType.FileMesh,
	VertexColor = Vector3.new(0.55, 0.25, 1),
	Offset = Vector3.new(0, 0, 0),
	Scale = Vector3.new(0, 0, 0), --(Vector3.new(1, 1, 1) / Vector3.new(0.5, 0.75, 0.5))
	MeshId = (BaseUrl .. "1033714"),
	TextureId = (BaseUrl .. "252883294"),
	Parent = BaseLight,
}

BaseDragon = BasePart:Clone()
BaseDragon.Name = "Effect"
BaseDragon.Transparency = 0
BaseDragon.CanCollide = false
DragonMesh = Create("SpecialMesh"){
	Name = "Mesh",
	MeshType = Enum.MeshType.FileMesh,
	VertexColor = Vector3.new(1, 1, 1),
	Offset = Vector3.new(0, 0, 0),
	Scale = Vector3.new(20, 20, 20),
	MeshId = (BaseUrl .. "252790481"),
	TextureId = (BaseUrl .. "252790885"),
	Parent = BaseDragon,
}

BaseDragonSize = Vector3.new(7.5, 2, 4) --Mesh scale Vector3.new(1, 1, 1)

Rate = (1 / 60)

MaxRange = 200

Remotes = Tool:WaitForChild("Remotes")
ServerControl = (Remotes:FindFirstChild("ServerControl") or Create("RemoteFunction"){
	Name = "ServerControl",
	Parent = Remotes,
})
ClientControl = (Remotes:FindFirstChild("ClientControl") or Create("RemoteFunction"){
	Name = "ClientControl",
	Parent = Remotes,
})

EquipTime = 0

LightEnabled = false
ToolEquipped = false

Light.Enabled = false
Tool.Enabled = true

function Clamp(Number, Min, Max)
	return math.max(math.min(Max, Number), Min)
end

function GetPercentage(Start, End, Number)
	return (((Number - Start) / (End - Start)) * 100)
end

function Round(Number, RoundDecimal)
	local WholeNumber, Decimal = math.modf(Number)
	return ((Decimal >= RoundDecimal and math.ceil(Number)) or (Decimal < RoundDecimal and math.floor(Number)))
end

function CheckTableForString(Table, String)
	for i, v in pairs(Table) do
		if string.lower(v) == string.lower(String) then
			return true
		end
	end
	return false
end
	
function CheckIntangible(Hit)
	local ProjectileNames = {"Water", "Arrow", "Projectile", "Effect", "Rail", "Laser", "Bullet"}
	if Hit and Hit.Parent then
		if CheckTableForString(ProjectileNames, Hit.Name) then
			return true
		end
		local character = Hit.Parent
		for i, v in pairs(character:GetChildren()) do
			if v:IsA("Humanoid") then
				return true
			end
		end
	end
	return false
end
	
function CastRay(StartPos, Vec, Length, Ignore, DelayIfHit)
	local RayHit, RayPos, RayNormal = game:GetService("Workspace"):FindPartOnRayWithIgnoreList(Ray.new(StartPos, Vec * Length), Ignore)
	if RayHit and CheckIntangible(RayHit) then
		if DelayIfHit then
			wait()
		end
		RayHit, RayPos, RayNormal = CastRay((RayPos + (Vec * 0.01)), Vec, (Length - ((StartPos - RayPos).magnitude)), Ignore, DelayIfHit)
	end
	return RayHit, RayPos, RayNormal
end

function CreateLight(Display)
	if LightPart and LightPart.Parent then
		LightPart:Destroy()
	end
	for i, v in pairs(Tool:GetChildren()) do
		if v:IsA("BasePart") and v ~= Handle then
			v:Destroy()
		end
	end
	if not Display then
		return
	end
	Dragon = BaseDragon:Clone()
	RotatorPart = BasePart:Clone()
	RotatorPart.Name = "Effect"
	RotatorPart.Transparency = 1
	RotatorPart.CanCollide = false
	RotatorWeld = Create("Weld"){
		Part0 = Handle,
		Part1 = RotatorPart,
		Parent = RotatorPart
	}
	LightPart = BaseLight:Clone()
	LightWeld = Create("Weld"){
		Part0 = RotatorPart,
		Part1 = LightPart,
		Parent = LightPart
	}
	DragonWeld = Create("Weld"){
		Part0 = LightPart,
		Part1 = Dragon,
		Parent = Dragon,
	}
	LightPart.Parent = RotatorPart
	RotatorPart.Parent = Tool
	LookDirection = Handle.CFrame
	LightPart.Parent = Tool
end

function Activated()
	LightEnabled = not LightEnabled
	Light.Enabled = LightEnabled
	CreateLight(LightEnabled)
	if LightEnabled then
		while LightEnabled and LightPart.Parent and LightPart:FindFirstChild("Mesh") and LightWeld.Parent and RotatorPart.Parent and RotatorWeld.Parent do
			if not ToolEquipped or not CheckIfAlive() or not LightEnabled then
				break
			end
			local MousePosition = InvokeClient("MousePosition")
			if MousePosition then
				MousePosition = MousePosition.Position
				--local Angle = (math.acos((MousePosition - Handle.Position).unit:Dot(Handle.CFrame.lookVector)))
				--if Angle >= 0 and Angle <= (math.pi / 3) then
					LookDirection = CFrame.new(Handle.Position, MousePosition)
				--end
				if LookDirection and LightEnabled then
					local RayHit, RayPos, RayNormal = CastRay(Handle.Position, LookDirection.lookVector, ((Handle.Size.Z / 2) + MaxRange), {Character}, false)
					local Length = ((Handle.Position - RayPos).magnitude - (Handle.Size.Z / 2))
					local Mesh = LightPart:FindFirstChild("Mesh")
					if Mesh then
						Mesh.Scale = Vector3.new(Clamp((1.5 * Length / 5), 1.5, 7.5), Clamp(Length, 6.5, MaxRange), Clamp((1.5 * Length / 5), 1.5, 7.5))
					end
					
					local LightOffset = ((Handle.Size.Z / 2) + (Length / 3) + (GetPercentage(1, MaxRange, Length) * 0.075))
					
					local Vec = LookDirection.lookVector
					local Pos = (Handle.CFrame * CFrame.new(0, 0, -((Handle.Size.Z / 2) - 0.5))).p
					local NewCFrame = CFrame.new(Pos, (Pos + Vec))
					RotatorWeld.C0 = Handle.CFrame:toObjectSpace(NewCFrame)
					RotatorWeld.C1 = CFrame.new(0, 0, 0)
					LightWeld.C0 = (CFrame.new(0, 0, -LightOffset) * CFrame.Angles((math.pi / 2), 0, 0))
					
					DragonWeld.C0 = CFrame.new(0, -((Length / 2) - (BaseDragonSize.X * 2.5)), 0) * CFrame.Angles(-(math.pi / 2), (math.pi / 2), 0)
					
					if Length >= (MaxRange * 0.5) and math.abs(Handle.Position.Y - MousePosition.Y) > 20 then
						Dragon.Parent = Tool
					else
						Dragon.Parent = nil
					end
					
				end
			end
			wait(Rate)
		end
		if not LightEnabled then
			if LightPart and LightPart.Parent then
				LightPart:Destroy()
			end
		end
	end
end

function CheckIfAlive()
	return (Player and Player.Parent and Humanoid and Humanoid.Parent and Humanoid.Health > 0 and Head and Head.Parent)
end

function Equipped()
	Character = Tool.Parent
	Player = Players:GetPlayerFromCharacter(Character)
	Humanoid = Character:FindFirstChild("Humanoid")
	Head = Character:FindFirstChild("Head")
	if not CheckIfAlive() then
		return
	end
	local PlayerGui = Player:FindFirstChild("PlayerGui")
	if PlayerGui and ((tick() - EquipTime) > 5 or LastPlayer ~= Player) then
		EquipTime = tick()
		SplashScreenCopy = SplashScreen:Clone()
		Debris:AddItem(SplashScreenCopy)
		SplashScreenCopy.Parent = PlayerGui
	end
	LastPlayer = Player
	ToolEquipped = true
end

function Unequipped()
	LightEnabled = false
	Light.Enabled = false
	CreateLight(false)
	ToolEquipped = false
end

function InvokeClient(Mode, Value)
	local ClientReturn = nil
	pcall(function()
		ClientReturn = ClientControl:InvokeClient(Player, Mode, Value)
	end)
	return ClientReturn
end

function OnServerInvoke(player, Mode, Value)
	if Player ~= player or not ToolEquipped or not CheckIfAlive() then
		return
	end
end

CreateLight(false)

ServerControl.OnServerInvoke = OnServerInvoke

Tool.Activated:connect(Activated)
Tool.Equipped:connect(Equipped)
Tool.Unequipped:connect(Unequipped)]]></ProtectedString>
			</Properties>
			<Item class="ScreenGui" referent="RBX19B18BB805604CCCBC0700C91E92D11A">
				<Properties>
					<string name="Name">SplashScreen</string>
				</Properties>
				<Item class="Frame" referent="RBXDFDFCF3ACA7948209599082EC2E9176C">
					<Properties>
						<bool name="Active">true</bool>
						<Color3 name="BackgroundColor3">4294967295</Color3>
						<float name="BackgroundTransparency">1</float>
						<Color3 name="BorderColor3">4279970357</Color3>
						<int name="BorderSizePixel">1</int>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<string name="Name">Frame</string>
						<Ref name="NextSelectionDown">null</Ref>
						<Ref name="NextSelectionLeft">null</Ref>
						<Ref name="NextSelectionRight">null</Ref>
						<Ref name="NextSelectionUp">null</Ref>
						<UDim2 name="Position">
							<XS>0.5</XS>
							<XO>-300</XO>
							<YS>0.5</YS>
							<YO>-162</YO>
						</UDim2>
						<float name="Rotation">0</float>
						<UDim2 name="Size">
							<XS>0</XS>
							<XO>600</XO>
							<YS>0</YS>
							<YO>325</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<token name="Style">0</token>
						<bool name="Visible">true</bool>
						<int name="ZIndex">1</int>
					</Properties>
					<Item class="ImageLabel" referent="RBXD25A7088D6344509BE525234B63D25C6">
						<Properties>
							<bool name="Active">true</bool>
							<Color3 name="BackgroundColor3">4294967295</Color3>
							<float name="BackgroundTransparency">1</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">1</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<Content name="Image"><url>http://www.roblox.com/asset/?id=255862565</url></Content>
							<Color3 name="ImageColor3">4294967295</Color3>
							<Vector2 name="ImageRectOffset">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<Vector2 name="ImageRectSize">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<float name="ImageTransparency">0</float>
							<string name="Name">Image</string>
							<Ref name="NextSelectionDown">null</Ref>
							<Ref name="NextSelectionLeft">null</Ref>
							<Ref name="NextSelectionRight">null</Ref>
							<Ref name="NextSelectionUp">null</Ref>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>0</XO>
								<YS>0</YS>
								<YO>0</YO>
							</UDim2>
							<float name="Rotation">0</float>
							<UDim2 name="Size">
								<XS>1</XS>
								<XO>0</XO>
								<YS>1</YS>
								<YO>0</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">2</int>
						</Properties>
						<Item class="ImageButton" referent="RBX4C67B6B83CF646C5B3C042A415B89917">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4294967295</Color3>
								<float name="BackgroundTransparency">1</float>
								<Color3 name="BorderColor3">4279970357</Color3>
								<int name="BorderSizePixel">1</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<Content name="Image"><url>http://www.roblox.com/asset/?id=252792021</url></Content>
								<Color3 name="ImageColor3">4294967295</Color3>
								<Vector2 name="ImageRectOffset">
									<X>0</X>
									<Y>0</Y>
								</Vector2>
								<Vector2 name="ImageRectSize">
									<X>0</X>
									<Y>0</Y>
								</Vector2>
								<float name="ImageTransparency">0</float>
								<bool name="Modal">false</bool>
								<string name="Name">Button</string>
								<Ref name="NextSelectionDown">null</Ref>
								<Ref name="NextSelectionLeft">null</Ref>
								<Ref name="NextSelectionRight">null</Ref>
								<Ref name="NextSelectionUp">null</Ref>
								<UDim2 name="Position">
									<XS>0.5</XS>
									<XO>-75</XO>
									<YS>0.5</YS>
									<YO>75</YO>
								</UDim2>
								<float name="Rotation">0</float>
								<bool name="Selected">false</bool>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>150</XO>
									<YS>0</YS>
									<YO>50</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">3</int>
							</Properties>
							<Item class="ImageLabel" referent="RBX7DD09EB0BCEB4A6F9F9CF7F87C06BCFE">
								<Properties>
									<bool name="Active">true</bool>
									<Color3 name="BackgroundColor3">4294967295</Color3>
									<float name="BackgroundTransparency">1</float>
									<Color3 name="BorderColor3">4279970357</Color3>
									<int name="BorderSizePixel">1</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<Content name="Image"><url>http://www.roblox.com/asset/?id=252792049</url></Content>
									<Color3 name="ImageColor3">4294967295</Color3>
									<Vector2 name="ImageRectOffset">
										<X>0</X>
										<Y>0</Y>
									</Vector2>
									<Vector2 name="ImageRectSize">
										<X>0</X>
										<Y>0</Y>
									</Vector2>
									<float name="ImageTransparency">0</float>
									<string name="Name">Clicked</string>
									<Ref name="NextSelectionDown">null</Ref>
									<Ref name="NextSelectionLeft">null</Ref>
									<Ref name="NextSelectionRight">null</Ref>
									<Ref name="NextSelectionUp">null</Ref>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<float name="Rotation">0</float>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>1</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<bool name="Visible">false</bool>
									<int name="ZIndex">4</int>
								</Properties>
							</Item>
						</Item>
					</Item>
				</Item>
				<Item class="LocalScript" referent="RBX7B1AC2419DAB4BE6B9394B95F6AA3979">
					<Properties>
						<bool name="Disabled">false</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">LocalScript</string>
						<ProtectedString name="Source"><![CDATA[--Made by Luckymaxer

Gui = script.Parent
Frame = Gui:WaitForChild("Frame")

Debris = game:GetService("Debris")

Image = Frame:WaitForChild("Image")
Button = Image:WaitForChild("Button")
Clicked = Button:WaitForChild("Clicked")

MouseHovering = false
MouseDown = false
Closed = false

Clicked.Visible = false

Button.MouseEnter:connect(function()
	if Closed then
		return
	end
	MouseHovering = true
end)

Button.MouseLeave:connect(function()
	if Closed then
		return
	end
	MouseHovering = false
	MouseDown = false
	Clicked.Visible = false
end)

Button.MouseButton1Down:connect(function()
	if not MouseHovering or MouseDown or Closed then
		return
	end
	MouseDown = true
	Clicked.Visible = true
end)

Button.MouseButton1Up:connect(function()
	if Closed then
		return
	end
	Clicked.Visible = false
	if MouseHovering and MouseDown then
		Closed = true
		wait(0.1)
		Gui:Destroy()
	end
	MouseDown = false
end)]]></ProtectedString>
					</Properties>
				</Item>
			</Item>
		</Item>
	</Item>
</roblox>