<roblox xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.roblox.com/roblox.xsd" version="4">
	<External>null</External>
	<External>nil</External>
	<Item class="Tool" referent="RBXBA13E7C4D0924774B8B4BEA8E903959B">
		<Properties>
			<bool name="CanBeDropped">true</bool>
			<bool name="Enabled">true</bool>
			<CoordinateFrame name="Grip">
				<X>0</X>
				<Y>0</Y>
				<Z>0</Z>
				<R00>1</R00>
				<R01>0</R01>
				<R02>0</R02>
				<R10>0</R10>
				<R11>1</R11>
				<R12>0</R12>
				<R20>0</R20>
				<R21>0</R21>
				<R22>1</R22>
			</CoordinateFrame>
			<bool name="ManualActivationOnly">false</bool>
			<string name="Name">MysticalStaff</string>
			<Content name="TextureId"><url>http://www.roblox.com/asset/?id=276092020</url></Content>
			<string name="ToolTip"></string>
		</Properties>
		<Item class="Part" referent="RBX18B745064CE14245BF72B26DA4E16202">
			<Properties>
				<bool name="Anchored">false</bool>
				<float name="BackParamA">-0.5</float>
				<float name="BackParamB">0.5</float>
				<token name="BackSurface">0</token>
				<token name="BackSurfaceInput">0</token>
				<float name="BottomParamA">-0.5</float>
				<float name="BottomParamB">0.5</float>
				<token name="BottomSurface">0</token>
				<token name="BottomSurfaceInput">0</token>
				<int name="BrickColor">194</int>
				<CoordinateFrame name="CFrame">
					<X>-0.499998987</X>
					<Y>3.064224</Y>
					<Z>0.000426999992</Z>
					<R00>0.00102147646</R00>
					<R01>-2.19987669e-006</R01>
					<R02>0.999999404</R02>
					<R10>0.690043509</R10>
					<R11>0.723767221</R11>
					<R12>-0.000703365542</R12>
					<R20>-0.723767221</R20>
					<R21>0.690043867</R21>
					<R22>0.000740786083</R22>
				</CoordinateFrame>
				<bool name="CanCollide">true</bool>
				<float name="Elasticity">0.5</float>
				<float name="Friction">0.300000012</float>
				<float name="FrontParamA">-0.5</float>
				<float name="FrontParamB">0.5</float>
				<token name="FrontSurface">0</token>
				<token name="FrontSurfaceInput">0</token>
				<float name="LeftParamA">-0.5</float>
				<float name="LeftParamB">0.5</float>
				<token name="LeftSurface">0</token>
				<token name="LeftSurfaceInput">0</token>
				<bool name="Locked">true</bool>
				<token name="Material">256</token>
				<string name="Name">Handle</string>
				<float name="Reflectance">0</float>
				<float name="RightParamA">-0.5</float>
				<float name="RightParamB">0.5</float>
				<token name="RightSurface">0</token>
				<token name="RightSurfaceInput">0</token>
				<Vector3 name="RotVelocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<float name="TopParamA">-0.5</float>
				<float name="TopParamB">0.5</float>
				<token name="TopSurface">0</token>
				<token name="TopSurfaceInput">0</token>
				<float name="Transparency">0</float>
				<Vector3 name="Velocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<token name="formFactorRaw">3</token>
				<token name="shape">1</token>
				<Vector3 name="size">
					<X>0.5</X>
					<Y>6</Y>
					<Z>0.5</Z>
				</Vector3>
			</Properties>
			<Item class="SpecialMesh" referent="RBX344D007063E140ECA63991AF95143885">
				<Properties>
					<token name="LODX">2</token>
					<token name="LODY">2</token>
					<Content name="MeshId"><url>http://www.roblox.com/asset/?id=276091747</url></Content>
					<token name="MeshType">5</token>
					<string name="Name">Mesh</string>
					<Vector3 name="Offset">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<Vector3 name="Scale">
						<X>1</X>
						<Y>1</Y>
						<Z>1</Z>
					</Vector3>
					<Content name="TextureId"><url>http://www.roblox.com/asset/?id=276091966</url></Content>
					<Vector3 name="VertexColor">
						<X>1</X>
						<Y>1</Y>
						<Z>1</Z>
					</Vector3>
				</Properties>
			</Item>
			<Item class="PointLight" referent="RBX5E43A94D4DBF496A88DFB284B6611DA1">
				<Properties>
					<float name="Brightness">50</float>
					<Color3 name="Color">4278255615</Color3>
					<bool name="Enabled">true</bool>
					<string name="Name">PointLight</string>
					<float name="Range">6</float>
					<bool name="Shadows">false</bool>
				</Properties>
			</Item>
			<Item class="ParticleEmitter" referent="RBXD70F31C365084BEA862330267B681541">
				<Properties>
					<Vector3 name="Acceleration">
						<X>0</X>
						<Y>10</Y>
						<Z>0</Z>
					</Vector3>
					<ColorSequence name="Color">0 0 1 1 0 1 0 0.666667 1 0 </ColorSequence>
					<bool name="Enabled">true</bool>
					<NumberRange name="Lifetime">0.2 0.3 </NumberRange>
					<float name="LightEmission">1</float>
					<string name="Name">Particles</string>
					<float name="Rate">1000</float>
					<NumberRange name="RotSpeed">15 25 </NumberRange>
					<NumberRange name="Rotation">0 5 </NumberRange>
					<NumberSequence name="Size">0 0.32 0 0.79 1.18 0 1 1.25 0 </NumberSequence>
					<NumberRange name="Speed">-0.25 -0.25 </NumberRange>
					<Content name="Texture"><url>rbxasset://textures/particles/fire_main.dds</url></Content>
					<NumberSequence name="Transparency">0 0.6 0 1 0.6 0 </NumberSequence>
					<float name="VelocitySpread">0</float>
					<float name="ZOffset">0</float>
				</Properties>
			</Item>
			<Item class="Sound" referent="RBXF08DDB2AF3BF474A9A8167C85E8850A4">
				<Properties>
					<bool name="Looped">true</bool>
					<string name="Name">Strike</string>
					<float name="Pitch">2</float>
					<bool name="PlayOnRemove">false</bool>
					<Content name="SoundId"><url>http://www.roblox.com/asset/?id=115327352</url></Content>
					<float name="Volume">0.734608471</float>
				</Properties>
			</Item>
			<Item class="Sound" referent="RBX470D067DB9BE4B638D8629A3B101A930">
				<Properties>
					<bool name="Looped">false</bool>
					<string name="Name">Lightning</string>
					<float name="Pitch">1</float>
					<bool name="PlayOnRemove">false</bool>
					<Content name="SoundId"><url>http://www.roblox.com/asset/?id=156190087</url></Content>
					<float name="Volume">1</float>
				</Properties>
			</Item>
			<Item class="Sound" referent="RBX3E922F97E11D4DC59733E9028C76B7F5">
				<Properties>
					<bool name="Looped">false</bool>
					<string name="Name">Zap</string>
					<float name="Pitch">1.25</float>
					<bool name="PlayOnRemove">false</bool>
					<Content name="SoundId"><url>http://www.roblox.com/asset/?id=156190087</url></Content>
					<float name="Volume">1</float>
				</Properties>
			</Item>
			<Item class="Sound" referent="RBX3E107CDC361E44948C4FAF3BBE4E37A9">
				<Properties>
					<bool name="Looped">false</bool>
					<string name="Name">Lightning2</string>
					<float name="Pitch">1</float>
					<bool name="PlayOnRemove">false</bool>
					<Content name="SoundId"><url>http://www.roblox.com/asset/?id=96478426</url></Content>
					<float name="Volume">1</float>
				</Properties>
			</Item>
		</Item>
		<Item class="LocalScript" referent="RBX5E247E7934B84E3E970E431F35DE55FB">
			<Properties>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">LocalScript</string>
				<ProtectedString name="Source"><![CDATA[--Made by Luckymaxer

Tool = script.Parent
Handle = Tool:WaitForChild("Handle")

Players = game:GetService("Players")
RunService = game:GetService("RunService")
ContentProvider = game:GetService("ContentProvider")

RbxUtility = LoadLibrary("RbxUtility")
Create = RbxUtility.Create

Animations = {}

ServerControl = Tool:WaitForChild("ServerControl")
ClientControl = Tool:WaitForChild("ClientControl")

Rate = (1 / 60)

MobilityDisabled = false
ToolEquipped = false

function SetAnimation(mode, value)
	if not ToolEquipped or not CheckIfAlive() then
		return
	end
	local function StopAnimation(Animation)
		for i, v in pairs(Animations) do
			if v.Animation == Animation then
				v.AnimationTrack:Stop(value.EndFadeTime)
				for i, v in pairs({v.KeyframeReached, v.TrackStopped}) do
					if v then
						v:disconnect()
					end
				end
				table.remove(Animations, i)
			end
		end
	end
	if mode == "PlayAnimation" then
		for i, v in pairs(Animations) do
			if v.Animation == value.Animation then
				if value.Speed then
					v.AnimationTrack:AdjustSpeed(value.Speed)
					return
				elseif value.Weight or value.FadeTime then
					v.AnimationTrack:AdjustWeight(value.Weight, value.FadeTime)
					return
				else
					StopAnimation(value.Animation, false)
				end
			end
		end
		local AnimationMonitor = Create("Model"){}
		local TrackEnded = Create("StringValue"){Name = "Ended"}
		local AnimationTrack = Humanoid:LoadAnimation(value.Animation)
		local TrackStopped, KeyframeReached
		if value.PauseAt then
			KeyframeReached = AnimationTrack.KeyframeReached:connect(function(Keyframe)
				if Keyframe == value.PauseAt then
					AnimationTrack:AdjustSpeed(0)
					if KeyframeReached then
						KeyframeReached:disconnect()
					end
				end
			end)
		end
		if not value.Manual then
			TrackStopped = AnimationTrack.Stopped:connect(function()
				if TrackStopped then
					TrackStopped:disconnect()
				end
				StopAnimation(value.Animation, true)
				TrackEnded.Parent = AnimationMonitor
			end)
		end
		table.insert(Animations, {Animation = value.Animation, AnimationTrack = AnimationTrack, KeyframeReached = KeyframeReached, TrackStopped = TrackStopped})
		AnimationTrack:Play(value.FadeTime, value.Weight, value.Speed)
		if TrackStopped then
			AnimationMonitor:WaitForChild(TrackEnded.Name)
		end
		return TrackEnded.Name
	elseif mode == "StopAnimation" and value then
		StopAnimation(value.Animation)
	end
end

function DisableMobility(Boolean)
	if Boolean and MobilityDisabled then
		return
	end
	if MobilityDisabler then
		MobilityDisabler:disconnect()
	end
	MobilityDisabled = Boolean
	if MobilityDisabled then
		Humanoid.AutoRotate = false
		Humanoid.WalkSpeed = 0
		MobilityDisabler = Humanoid.Changed:connect(function(Property)
			Humanoid.Jump = false
			Humanoid.AutoRotate = false
			Humanoid.WalkSpeed = 0
		end)
	else
		Humanoid.AutoRotate = true
		Humanoid.WalkSpeed = 16
	end
end

function CheckIfAlive()
	return (((Character and Character.Parent and Humanoid and Humanoid.Parent and Humanoid.Health > 0 and Player and Player.Parent) and true) or false)
end

function Equipped(Mouse)
	Character = Tool.Parent
	Player = Players:GetPlayerFromCharacter(Character)
	Humanoid = Character:FindFirstChild("Humanoid")
	ToolEquipped = true
	if not CheckIfAlive() then
		return
	end
	Spawn(function()
		PlayerMouse = Player:GetMouse()
		Mouse.Button1Down:connect(function()
			InvokeServer("Button1Click", {Down = true})
		end)
		Mouse.Button1Up:connect(function()
			InvokeServer("Button1Click", {Down = false})
		end)
		Mouse.KeyDown:connect(function(Key)
			InvokeServer("KeyPress", {Key = Key, Down = true})
		end)
		Mouse.KeyUp:connect(function(Key)
			InvokeServer("KeyPress", {Key = Key, Down = false})
		end)
		for i, v in pairs(Tool:GetChildren()) do
			if v:IsA("Animation") then
				ContentProvider:Preload(v.AnimationId)
			end
		end
	end)
end

function Unequipped()
	for i, v in pairs(Animations) do
		if v and v.AnimationTrack then
			v.AnimationTrack:Stop()
		end
	end
	DisableMobility(false)
	Animations = {}
	ToolEquipped = false
end

function InvokeServer(mode, value)
	local ServerReturn = nil
	pcall(function()
		ServerReturn = ServerControl:InvokeServer(mode, value)
	end)
	return ServerReturn
end

function OnClientInvoke(mode, value)
	if mode == "PlayAnimation" and value and ToolEquipped and Humanoid then
		SetAnimation("PlayAnimation", value)
	elseif mode == "StopAnimation" and value then
		SetAnimation("StopAnimation", value)
	elseif mode == "PlaySound" and value then
		value:Play()
	elseif mode == "StopSound" and value then
		value:Stop()
	elseif mode == "MousePosition" then
		return {Position = PlayerMouse.Hit.p, Target = PlayerMouse.Target}
	elseif mode == "SetMouse" then
		pcall(function()
			Mouse[value.Property] = value.Value
		end)
	elseif mode == "DisableMobility" then
		local Disabled = value.Disabled
		DisableMobility(value.Disabled)
	end
end

ClientControl.OnClientInvoke = OnClientInvoke
Tool.Equipped:connect(Equipped)
Tool.Unequipped:connect(Unequipped)]]></ProtectedString>
			</Properties>
		</Item>
		<Item class="LocalScript" referent="RBX341B3E3EF13C46898338061C5F8AC3B2">
			<Properties>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">MouseIcon</string>
				<ProtectedString name="Source"><![CDATA[--Made by Luckymaxer

Mouse_Icon = "rbxasset://textures/GunCursor.png"
Reloading_Icon = "rbxasset://textures/GunWaitCursor.png"

Tool = script.Parent

Mouse = nil

function UpdateIcon()
	if Mouse then
		Mouse.Icon = Tool.Enabled and Mouse_Icon or Reloading_Icon
	end
end

function OnEquipped(ToolMouse)
	Mouse = ToolMouse
	UpdateIcon()
end

function OnChanged(Property)
	if Property == "Enabled" then
		UpdateIcon()
	end
end

Tool.Equipped:connect(OnEquipped)
Tool.Changed:connect(OnChanged)
]]></ProtectedString>
			</Properties>
		</Item>
		<Item class="Animation" referent="RBX6E5350E939664D66BA990025A55AAA0F">
			<Properties>
				<Content name="AnimationId"><url>http://www.roblox.com/asset/?id=277780975</url></Content>
				<string name="Name">Blast</string>
			</Properties>
		</Item>
		<Item class="Animation" referent="RBX34AC6DC2732E46F7AE270B0025E8E209">
			<Properties>
				<Content name="AnimationId"><url>http://www.roblox.com/asset/?id=280211525</url></Content>
				<string name="Name">ArmsUp</string>
			</Properties>
		</Item>
		<Item class="Animation" referent="RBXE40E8166222749519E2662CBE84195BB">
			<Properties>
				<Content name="AnimationId"><url>http://www.roblox.com/asset/?id=232937965</url></Content>
				<string name="Name">Spin</string>
			</Properties>
		</Item>
		<Item class="Script" referent="RBX2DB9BC5667F6485184E662213F371D6E">
			<Properties>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">Script</string>
				<ProtectedString name="Source"><![CDATA[--Made by Luckymaxer

Tool = script.Parent
Handle = Tool:WaitForChild("Handle")

Players = game:GetService("Players")
Debris = game:GetService("Debris")
RunService = game:GetService("RunService")

LightningFunctions = require(script:WaitForChild("LightningFunctions"))

RbxUtility = LoadLibrary("RbxUtility")
Create = RbxUtility.Create

BaseUrl = "http://www.roblox.com/asset/?id="

Gravity = 196.20
Rate = (1 / 60)

BasePart = Create("Part"){
	Material = Enum.Material.Plastic,
	Shape = Enum.PartType.Block,
	TopSurface = Enum.SurfaceType.Smooth,
	BottomSurface = Enum.SurfaceType.Smooth,
	FormFactor = Enum.FormFactor.Custom,
	Size = Vector3.new(0.2, 0.2, 0.2),
	CanCollide = true,
	Locked = true,
}

ManaBar = script:WaitForChild("ManaBar")

Animations = {
	Blast = {Animation = Tool:WaitForChild("Blast"), FadeTime = nil, Weight = nil, Speed = 1, Duration = 1.5, PauseAt = "Complete"},
	ArmsUp = {Animation = Tool:WaitForChild("ArmsUp"), FadeTime = nil, Weight = nil, Speed = 1, Duration = 1},
	Spin = {Animation = Tool:WaitForChild("Spin"), FadeTime = nil, Weight = nil, Speed = 1, Duration = 0.5},
}

Sounds = {
	Lightning = Handle:WaitForChild("Lightning"),
	Lightning2 = Handle:WaitForChild("Lightning2"),
	Strike = Handle:WaitForChild("Strike"),
	Zap = Handle:WaitForChild("Zap"),
	
}

CurrentMana = Create("DoubleConstrainedValue"){
	MinValue = 0,
	MaxValue = 100,
}
CurrentMana.Value = (CurrentMana.MaxValue * 0.75)
ManaCharging = Create("BoolValue"){
	Value = false,
}

InUse = Create("BoolValue"){
	Value = false,
}
MouseDown = Create("BoolValue"){
	Value = false,
}
ToolEquipped = Create("BoolValue"){
	Value = false,
}

ServerControl = (Tool:FindFirstChild("ServerControl") or Create("RemoteFunction"){
	Name = "ServerControl",
	Parent = Tool,
})

ClientControl = (Tool:FindFirstChild("ClientControl") or Create("RemoteFunction"){
	Name = "ClientControl",
	Parent = Tool,
})

Handle.Transparency = 0
Tool.Enabled = true

function IsTeamMate(Player1, Player2)
	return (Player1 and Player2 and not Player1.Neutral and not Player2.Neutral and Player1.TeamColor == Player2.TeamColor)
end

function TagHumanoid(humanoid, player)
	local Creator_Tag = Create("ObjectValue"){
		Name = "creator",
		Value = player,
	}
	Debris:AddItem(Creator_Tag, 2)
	Creator_Tag.Parent = humanoid
end

function UntagHumanoid(humanoid)
	for i, v in pairs(humanoid:GetChildren()) do
		if v:IsA("ObjectValue") and v.Name == "creator" then
			v:Destroy()
		end
	end
end

function TakeDamage(humanoid, Damage)
	if not humanoid or not humanoid:IsA("Humanoid") or not Damage or not Player then
		return
	end
	local character = humanoid.Parent
	for i, v in pairs(character:GetChildren()) do
		if v:IsA("ForceField") then
			return
		end
	end
	local player = Players:GetPlayerFromCharacter(Character)
	if player then
		if IsTeamMate(Player, player) then
			return
		end
		CurrentMana.Value = CurrentMana.Value + (CurrentMana.MaxValue * 0.02)
	end
	TagHumanoid(humanoid, Player)
	humanoid:TakeDamage(Damage)
	UntagHumanoid(humanoid)
end

function Clamp(Number, Min, Max)
	return math.max(math.min(Max, Number), Min)
end

function GetPercentage(Start, End, Number)
	return (((Number - Start) / (End - Start)) * 100)
end

function Round(Number, RoundDecimal)
	local WholeNumber, Decimal = math.modf(Number)
	return ((Decimal >= RoundDecimal and math.ceil(Number)) or (Decimal < RoundDecimal and math.floor(Number)))
end

function MakeCircle(Origin, Radius, Parts)
	local Circle = Create("Model"){
		Name = "Circle",
	}
	for i = 1, Parts do
		local Part = BasePart:Clone()
		Part.Name = "Effect"
		Part.Transparency = 1
		Part.Size = Vector3.new(6, 0.2, (Radius * 2))
		Part.Anchored = true
		Part.CanCollide = false
		Part.CFrame = (Origin * CFrame.Angles(0, ((math.pi * 2) / (Parts / i)), 0))
		Part.CFrame = (Part.CFrame + Part.CFrame.lookVector * (Radius / 2))
		Part.Parent = Circle
	end
	return Circle
end

function CheckTableForInstance(Table, Instance)
	for i, v in pairs(Table) do
		if v == Instance then
			return true
		end
	end
	return false
end
	
function GetAllConnectedParts(Object)
	local Parts = {}
	local function GetConnectedParts(Object)
		for i, v in pairs(Object:GetConnectedParts()) do
			local Ignore = false
			for ii, vv in pairs(Parts) do
				if v == vv then
					Ignore = true
				end
			end
			if not Ignore then
				table.insert(Parts, v)
				GetConnectedParts(v)
			end
		end
	end
	GetConnectedParts(Object)
	return Parts
end
	
function GetTotalParts(MaxParts, PossibleParts, Parts)
	if MaxParts < PossibleParts then
		return MaxParts
	elseif Parts >= MaxParts then
		return 0
	elseif MaxParts >= PossibleParts then
		local PartCount = (MaxParts - PossibleParts)
		if Parts <= MaxParts then
			PartCount = (MaxParts - Parts)
			if PartCount > PossibleParts then
				return PossibleParts
			else
				return PartCount
			end
		elseif PartCount >= PossibleParts then
			return PossibleParts
		else
			return PartCount
		end
	end
end
	
function GetParts(Region, MaxParts, Ignore)
	local Parts = {}
	local RerunFailed = false
	while #Parts < MaxParts and not RerunFailed do
		local Region = Region
		local PossibleParts = GetTotalParts(MaxParts, 100, #Parts)
		local PartsNearby = game:GetService("Workspace"):FindPartsInRegion3WithIgnoreList(Region, Ignore, PossibleParts)
		if #PartsNearby == 0 then
			RerunFailed = true
		else
			for i, v in pairs(PartsNearby) do
				table.insert(Parts, v)
				table.insert(Ignore, v)
			end
		end
	end
	return Parts
end

function GetNearbyObjects(Region)
	local IgnoreList = {Character}
	for i, v in pairs(Players:GetChildren()) do
		if v:IsA("Player") and v ~= Player and v.Character and v.Character.Parent and IsTeamMate(Player, v) then
			table.insert(IgnoreList, v.Character)
		end
	end
	return GetParts(Region, 500, IgnoreList)
end

function ManageMana(Gui)
	local Mana = {}
	if not Gui then
		return
	end
	local Frame = Gui:FindFirstChild("Frame")
	if not Frame then
		return
	end
	local Bar = Frame:FindFirstChild("Bar")
	if not Bar then
		return
	end
	local function AdjustBar()
		local ChargePercent = (GetPercentage(0, 100, CurrentMana.Value) * 0.01)
		local NewMana = Clamp((Frame.AbsoluteSize.X * ChargePercent), 0, Frame.AbsoluteSize.X)
		Bar.Size = (UDim2.new(Bar.Size.X.Scale, 0, Bar.Size.Y.Scale, Bar.Size.Y.Offset) + UDim2.new(0, NewMana, 0, 0))
	end
	for i, v in pairs({ToolUnequipped, ManaAltered}) do
		if v then
			v:disconnect()
		end
	end
	local CurrentlyEquipped = true
	ToolUnequipped = Tool.Unequipped:connect(function()
		CurrentlyEquipped = false
	end)
	ManaAltered = CurrentMana.Changed:connect(function()
		AdjustBar()
	end)
	function Mana:UseMana(Amount)
		CurrentMana.Value = (CurrentMana.Value - Amount)
		if CurrentMana.Value < CurrentMana.MaxValue and not ManaCharging.Value then
			ManaCharging.Value = true
		end
	end
	AdjustBar()
	return Mana
end

function ChargeMana()
	--[[if not ManaCharging.Value then
		return
	end]]
	Spawn(function()
		local ChargeTimeRate = 0.15
		local ChargeRate = 1
		local ChargePercent = 0.005
		while --[[ManaCharging.Value and CurrentMana.Value < CurrentMana.MaxValue]]true do
			wait(ChargeTimeRate)
			--if not InUse.Value then
				CurrentMana.Value = (CurrentMana.Value + ((CurrentMana.MaxValue * ChargePercent) * ChargeRate))
			--end
		end
		--ManaCharging.Value = false
	end)
end

function CreateStaff(CreateNew)
	for i, v in pairs(Tool:GetChildren()) do
		if v:IsA("BasePart") and v ~= Handle then
			v:Destroy()
		end
	end
	Handle.Transparency = ((CreateNew and 1) or 0)
	if not CreateNew then
		return
	end
	Staff = BasePart:Clone()
	Staff.Name = "Staff"
	Staff.Size = Vector3.new(0.5, 6, 0.5)
	Staff.CanCollide = false
	local Mesh = Create("SpecialMesh"){
		Name = "Mesh",
		MeshType = Enum.MeshType.FileMesh,
		MeshId = (BaseUrl .. "276091843"),
		TextureId = (BaseUrl .. "276091966"),
		Scale = Vector3.new(1, 1, 1),
		Parent = Staff,
	}
	GripPiece = Staff:Clone()
	GripPiece.Name = "GripPiece"
	GripPiece.Size = Vector3.new(0.5, 1.5, 0.5)
	GripPiece.Mesh.MeshId = (BaseUrl .. "276091878")
	Orb = Staff:Clone()
	Orb.Name = "Orb"
	Orb.Size = Vector3.new(0.2, 0.2, 0.2)
	Orb.Mesh.MeshId = (BaseUrl .. "276091920")
	local Joints = {
		{Class = "Weld", Parent = Staff, Properties = {Part0 = Handle, Part1 = Staff, C0 = CFrame.new(0, 0, 0), C1 = CFrame.new(0, 0, 0)}},
		{Class = "Weld", Parent = Staff, Properties = {Part0 = Staff, Part1 = GripPiece, C0 = CFrame.new(-0.05, 1.925, -0.0375), C1 = CFrame.new(0, 0, 0)}},
		{Class = "Motor6D", Parent = Staff, Properties = {Part0 = GripPiece, Part1 = Orb, MaxVelocity = 0.05, DesiredAngle = 99999999, C0 = CFrame.new(-0.0225, 0.3, 0.0275), C1 = CFrame.new(0, 0, 0)}},
	}
	for i, v in pairs(Joints) do
		local Joint = Create(v.Class){}
		for ii, vv in pairs(v.Properties) do
			Joint[ii] = vv
		end
		Joint.Parent = v.Parent
	end
	for i, v in pairs({Staff, GripPiece, Orb}) do
		v.Parent = Tool
	end
end

function CheckIfAlive()
	return (((Character and Character.Parent and Humanoid and Humanoid.Parent and Humanoid.Health > 0 and Torso and Torso.Parent and Player and Player.Parent) and true) or false)
end

function Activated()
	if not Tool.Enabled or not ToolEquipped.Value or MouseDown.Value or not CheckIfAlive() or InUse.Value then
		return
	end
	Tool.Enabled = false
	MouseDown.Value = true
	local CurrentlyEquipped = true
	local CurrentlyDown = true
	local ToolUnequipped = Tool.Unequipped:connect(function()
		CurrentlyEquipped = false
	end)
	local MouseButtonUp = MouseDown.Changed:connect(function()
		if not MouseDown.Value then
			CurrentlyDown = false
		end
	end)
	InUse.Value = true
	Sounds.Lightning:Play()
	Delay(0.25, (function()
		for i, v in pairs({ToolUnequipped, MouseButtonUp}) do
			if v then
				v:disconnect()
			end
		end
		if CurrentlyEquipped and CurrentlyDown and CheckIfAlive() then
			Sounds.Strike:Play()
		end
	end))
	local ManaCost = 2.5
	local MaxDuration = 5
	local StartTime = tick()
	local StrikeCount = 0
	local LightningDamage = 10
	local FireRate = 0.1
	local LightningReloadTime = 2
	while CheckIfAlive() and ToolEquipped.Value and MouseDown.Value and Orb.Parent --[[and (tick() - StartTime) <= MaxDuration]] and CurrentMana.Value >= ManaCost do
		StrikeCount = (StrikeCount + 1)
		if StrikeCount > 1 then
			ManaUsage:UseMana(ManaCost)
		end
		Sounds.Strike.Volume = (((math.sin(tick() * 3) + 1) * 0.25) + 0.25)
		local MousePosition = InvokeClient("MousePosition")
		if MousePosition then
			MousePosition = MousePosition.Position
			LightningFunctions.RemoveLightning()
			local RayData = LightningFunctions.Zap({StartPosition = Orb.Position, TargetPosition = MousePosition, Character = Character, Color = "Cyan", Individual = false})
			if RayData then
				local RayHit = RayData.RayHit
				if RayHit then
					local character = RayHit.Parent
					if character == Character then
						return
					end
					if character:IsA("Hat") then
						character = character.Parent
					end
					local humanoid = character:FindFirstChild("Humanoid")
					if humanoid and humanoid.Health > 0 then
						local player = Players:GetPlayerFromCharacter(character)
						if not player or (player and not IsTeamMate(Player, player)) then
							UntagHumanoid(humanoid)
							TagHumanoid(humanoid, Player)
							humanoid:TakeDamage(LightningDamage)
						end
					end
				end
				Spawn(function()
					InvokeClient("SetMouse", {Property = "TargetFilter", Value = RayData.LightningModel})
				end)
			end
		end
		wait(FireRate)
	end
	InUse.Value = false
	Sounds.Strike:Stop()
	if StrikeCount > 1 then
		wait(LightningReloadTime)
	else
		wait(LightningReloadTime / 4)
	end
	Tool.Enabled = true
end

function ResetStuff()
	for i, v in pairs({ManaBarCopy, ManaAltered, ToolUnequipped}) do
		if v then
			if tostring(v) == "Connection" then
				v:disconnect()
			elseif type(v) == "userdata" and v.Parent then
				v:Destroy()
			end
		end
	end
	for i, v in pairs(Sounds) do
		v:Stop()
	end
	for i, v in pairs({InUse, MouseDown}) do
		v.Value = false
	end
end

function Equipped(Mouse)
	Character = Tool.Parent
	Humanoid = Character:FindFirstChild("Humanoid")
	Torso = Character:FindFirstChild("Torso")
	Player = Players:GetPlayerFromCharacter(Character)
	if not CheckIfAlive() then
		return
	end
	Spawn(function()
		EquipTick = tick()
		ResetStuff()
		--[[if CurrentMana.Value >= (CurrentMana.MaxValue * 0.8) then
			CurrentMana.Value = (CurrentMana.MaxValue * 0.8)
		end]]
		CreateStaff(true)
		local PlayerGui = Player:FindFirstChild("PlayerGui")
		if PlayerGui then
			ManaBarCopy = ManaBar:Clone()
			ManaUsage = ManageMana(ManaBarCopy)
			ManaBarCopy.Parent = PlayerGui
		end
	end)
	ToolEquipped.Value = true
end

function Unequipped()
	ResetStuff()
	CreateStaff(false)
	ToolEquipped.Value = false
end

function OnServerInvoke(player, mode, value)
	if player ~= Player or not ToolEquipped.Value or not value or not CheckIfAlive() then
		return
	end
	if mode == "Button1Click" then
		local Down = value.Down
		if not Down and MouseDown.Value then
			MouseDown.Value = false
		end
	elseif mode == "KeyPress" then
		local Key = value.Key
		local Down = value.Down
		if Down and Tool.Enabled and not InUse.Value then
			if Key == "z" then
				local ManaCost = 100
				if CurrentMana.Value < ManaCost or (tick() - EquipTick) < 5 then
					return
				end
				ManaUsage:UseMana(ManaCost)
				Tool.Enabled = false
				InUse.Value = true
				local PlayersNearby = {}
				for i, v in pairs(Players:GetChildren()) do
					if v:IsA("Player") and v ~= Player and not IsTeamMate(Player, v) and v.Character then
						local character = v.Character
						local ForceField = nil
						for i, v in pairs(character:GetChildren()) do
							if v:IsA("ForceField") then
								ForceField = v
								break
							end
						end
						if not ForceField then
							local torso = character:FindFirstChild("Torso")
							table.insert(PlayersNearby, v)
						end
					end
				end
				local ClosestPlayer = {Player = nil, Distance = 40}
				for i, v in pairs(PlayersNearby) do
					local character = v.Character
					local torso = character:FindFirstChild("Torso")
					if torso then
						local DistanceApart = (Torso.Position - torso.Position).Magnitude
						if DistanceApart < ClosestPlayer.Distance then
							ClosestPlayer.Player = character
							ClosestPlayer.Distance = DistanceApart
						end
					end
				end
				if not ClosestPlayer.Player then
					local HumanoidsHit = {}
					local NPCsNearby = {}
					local LightningRadius = ClosestPlayer.Distance
					local LightningRegion = Region3.new((Torso.Position - Vector3.new(LightningRadius, LightningRadius, LightningRadius)), (Torso.Position + Vector3.new(LightningRadius, LightningRadius, LightningRadius)))
					for i, v in pairs(GetNearbyObjects(LightningRegion)) do
						if v and v.Parent then
							local character = v.Parent
							if character ~= Character then
								local humanoid = character:FindFirstChild("Humanoid")
								if humanoid and humanoid.Health > 0 then
									local player = Players:GetPlayerFromCharacter(character)
									if not player then
										if not CheckTableForInstance(HumanoidsHit, humanoid) then
											local ForceField = nil
											for ii, vv in pairs(character:GetChildren()) do
												if vv:IsA("ForceField") then
													ForceField = vv
													break
												end
											end
											if not ForceField then
												table.insert(NPCsNearby, character)
											end
										end
									end
								end
							end
						end
					end
					for i, v in pairs(NPCsNearby) do
						local torso = v:FindFirstChild("Torso")
						if torso then
							local DistanceApart = (Torso.Position - torso.Position).Magnitude
							if DistanceApart < ClosestPlayer.Distance then
								ClosestPlayer.Player = v
								ClosestPlayer.Distance = DistanceApart
							end
						end
					end
				end
				if ClosestPlayer.Player then
					local character = ClosestPlayer.Player
					local humanoid = character:FindFirstChild("Humanoid")
					local torso = character:FindFirstChild("Torso")
					if humanoid and humanoid.Health > 0 and torso then
						local StartPosition = (CFrame.new(torso.Position) * CFrame.new(0, 50, 0))
						local TargetPosition = (StartPosition + Vector3.new(0, -1, 0) * 75)
						local RayData = LightningFunctions.Zap({StartPosition = StartPosition.p, TargetPosition = TargetPosition.p, Character = Character, Color = "Cyan", Individual = true, Duration = 2, TimeToFade = 1, MaxRange = 150, SegmentLength = 5, Ignore = {character}})
						for i = 1, 4 do
							Spawn(function()
								LightningFunctions.Zap({StartPosition = StartPosition.p, TargetPosition = TargetPosition.p, Character = Character, Color = "Cyan", Individual = true, Duration = 2, TimeToFade = 1, MaxRange = 150, SegmentLength = 5, Ignore = {character}})
							end)
						end
						if RayData then
							local RayPos = RayData.RayPos
							local SoundPart = BasePart:Clone()
							SoundPart.Name = "Effect"
							SoundPart.Transparency = 1
							SoundPart.CanCollide = false
							local Sound = Sounds.Lightning2:Clone()
							Sound.Parent = SoundPart
							Debris:AddItem(SoundPart, 2)
							SoundPart.Parent = game:GetService("Workspace")
							SoundPart.CFrame = CFrame.new(RayPos)
							Sound:Play()
							wait(0.1)
							for i = 1, math.random(10, 15) do
								local StartPosition = (CFrame.new(RayData.RayPos) * CFrame.new(0, 0, 0))
								local TargetPosition = (StartPosition + Vector3.new((math.random(-360, 360) * 0.01), 1, (math.random(-360, 360) * 0.01)) * 2)
								local Spark = LightningFunctions.Zap({StartPosition = StartPosition.p, TargetPosition = TargetPosition.p, Character = Character, Color = "Cyan", Individual = true, Duration = 1.9, TimeToFade = 0.9, MaxRange = (math.random(800, 1500) * 0.01), SegmentLength = (math.random(200, 1000) * 0.001), Ignore = {character}})
							end
						end
						TakeDamage(humanoid, 100)
					end
				end
				InUse.Value = false
				Tool.Enabled = true
			end
			if Key == "x" then
				local ManaCost = 25
				if CurrentMana.Value < ManaCost then
					return
				end
				ManaUsage:UseMana(ManaCost)
				Tool.Enabled = false
				InUse.Value = true
				Sounds.Zap:Play()
				local Animation = Animations.Spin
				Spawn(function()
					InvokeClient("StopAnimation", Animation)
					InvokeClient("PlayAnimation", Animation)
				end)
				Spawn(function()
					local Animation = Animations.ArmsUp
					InvokeClient("StopAnimation", Animation)
					InvokeClient("PlayAnimation", {Animation = Animation.Animation, FadeTime = Animation.FadeTime, Weight = Animation.Weight, Speed = 1.5})
				end)
				Spawn(function()
					local WaitTime = (Animation.Duration / 10)
					for i = 1, 10 do
						if not ToolEquipped or not CheckIfAlive() then
							return
						end
						local StartPosition = (Orb.CFrame * CFrame.new(0, 0, 0))
						local TargetPosition = (StartPosition * CFrame.new((math.random(-100, 100) * 0.01), 0, (math.random(-500, 500) * 0.01)))
						local RayData = LightningFunctions.Zap({StartPosition = StartPosition.p, TargetPosition = TargetPosition.p, Character = Character, Color = "Cyan", Individual = true, Duration = 2.5, MaxRange = 2, SegmentLength = 0.5})
						wait(WaitTime)
					end
				end)
				local HumanoidsHit = {}
				local LightningRadius = 6
				local LightningRegion = Region3.new((Torso.Position - Vector3.new(LightningRadius, LightningRadius, LightningRadius)), (Torso.Position + Vector3.new(LightningRadius, LightningRadius, LightningRadius)))
				for i, v in pairs(GetNearbyObjects(LightningRegion)) do
					if v and v.Parent then
						local character = v.Parent
						if character ~= Character then
							local humanoid = character:FindFirstChild("Humanoid")
							if humanoid and humanoid.Health > 0 then
								local player = Players:GetPlayerFromCharacter(character)
								if not player or (player and not IsTeamMate(Player, player)) then
									if not CheckTableForInstance(HumanoidsHit, humanoid) then
										local ForceField = nil
										for ii, vv in pairs(character:GetChildren()) do
											if vv:IsA("ForceField") then
												ForceField = vv
												break
											end
										end
										if not ForceField then
											table.insert(HumanoidsHit, humanoid)
											TakeDamage(humanoid, 10)
											local torso = character:FindFirstChild("Torso")
											if torso then
												humanoid.Sit = true
												torso.Velocity = (CFrame.new(Torso.Position, torso.Position).lookVector * 50)
											end
										end
									end
								end
							end
						end
					end
				end
				InUse.Value = false
				Tool.Enabled = true
			elseif Key == "q" then
				local ManaCost = 50
				if CurrentMana.Value < ManaCost then
					return
				end
				Spawn(function()
					InvokeClient("DisableMobility", {Disabled = true})
				end)
				local SpellDuration = 1
				ManaUsage:UseMana(ManaCost)
				Tool.Enabled = false
				InUse.Value = true
				local Animation = Animations.Blast
				Spawn(function()
					InvokeClient("StopAnimation", Animation)
					InvokeClient("PlayAnimation", Animation)
				end)
				wait(Animation.Duration)
				local TorsoCFrame = Torso.CFrame
				local StartPoint = (TorsoCFrame + TorsoCFrame.lookVector * -10)
				local DesiredPoint = (StartPoint + StartPoint.lookVector * 3)
				local Direction = CFrame.new(StartPoint.p, Vector3.new(DesiredPoint.X, StartPoint.Y, DesiredPoint.Z)).lookVector
				Spawn(function()
					local HumanoidsHit = {}
					local LightningRadius = 6
					for i = 1, 10 do
						if not ToolEquipped or not CheckIfAlive() then
							return
						end
						Spawn(function()
							local StartPosition = ((StartPoint * CFrame.new(0, 75, 0)) + Direction * i * 5)
							local TargetPosition = (StartPosition + Vector3.new(0, -1, 0) * 2)
							local RayData = LightningFunctions.Zap({StartPosition = StartPosition.p, TargetPosition = TargetPosition.p, Character = Character, Color = "Cyan", Individual = true, Duration = 2.5, TimeToFade = 1.5, MaxRange = 150, SegmentLength = 5})
							if RayData then
								local RayPos = RayData.RayPos
								local SoundPart = BasePart:Clone()
								SoundPart.Name = "Effect"
								SoundPart.Transparency = 1
								SoundPart.CanCollide = false
								local Sound = Sounds.Lightning:Clone()
								Sound.Parent = SoundPart
								Debris:AddItem(SoundPart, 2)
								SoundPart.Parent = game:GetService("Workspace")
								SoundPart.CFrame = CFrame.new(RayPos)
								Sound:Play()
								local LightningRegion = Region3.new((RayPos - Vector3.new(LightningRadius, LightningRadius, LightningRadius)), (RayPos + Vector3.new(LightningRadius, LightningRadius, LightningRadius)))
								for i, v in pairs(GetNearbyObjects(LightningRegion)) do
									if v and v.Parent then
										local character = v.Parent
										if character ~= Character then
											local humanoid = character:FindFirstChild("Humanoid")
											if humanoid and humanoid.Health > 0 then
												local player = Players:GetPlayerFromCharacter(character)
												if not player or (player and not IsTeamMate(Player, player)) then
													if not CheckTableForInstance(HumanoidsHit, humanoid) then
														local ForceField = nil
														for ii, vv in pairs(character:GetChildren()) do
															if vv:IsA("ForceField") then
																ForceField = vv
																break
															end
														end
														if not ForceField then
															table.insert(HumanoidsHit, humanoid)
															TakeDamage(humanoid, 40)
															local torso = character:FindFirstChild("Torso")
															if torso then
																humanoid.Sit = true
																torso.Velocity = (CFrame.new(Torso.Position, torso.Position).lookVector * 10)
															end
														end
													end
												end
											end
										end
									end
								end
							end
						end)
						wait(0.05)
					end
				end)
				wait(SpellDuration)
				Spawn(function()
					InvokeClient("StopAnimation", Animation)
				end)
				Spawn(function()
					InvokeClient("DisableMobility", {Disabled = false})
				end)
				InUse.Value = false
				Tool.Enabled = true
			elseif Key == "e" then
				local ManaCost = 75
				if CurrentMana.Value < ManaCost then
					return
				end
				Tool.Enabled = false
				InUse.Value = true
				ManaUsage:UseMana(ManaCost)
				local Animation = Animations.ArmsUp
				Spawn(function()
					InvokeClient("StopAnimation", Animation)
					InvokeClient("PlayAnimation", Animation)
				end)
				local LightningStrikeDamage = 40
				local MaxLightningStrikeDamage = 70
				local Strikes = {
					{NumberOfStrikes = 16, Radius = 14},
					{NumberOfStrikes = 8, Radius = 8},
					{NumberOfStrikes = 5, Radius = 5},
				}
				local HumanoidsHit = {}
				local LightningRadius = Strikes[1].Radius
				local LightningRegion = Region3.new((Torso.Position - Vector3.new(LightningRadius, LightningRadius, LightningRadius)), (Torso.Position + Vector3.new(LightningRadius, LightningRadius, LightningRadius)))
				local function DamageHumanoid(character)
					local HumanoidFound = false
					local DeterminedDamage = 0
					local humanoid = character:FindFirstChild("Humanoid")
					if not humanoid or humanoid.Health == 0 then
						return
					end
					for i, v in pairs(character:GetChildren()) do
						if v:IsA("ForceField") then
							return
						end
					end
					for i, v in pairs(HumanoidsHit) do
						if v and v.Humanoid == humanoid then
							HumanoidFound = true
							if v.DamageDealt < MaxLightningStrikeDamage then
								DeterminedDamage = (((v.DamageDealt + LightningStrikeDamage) <= MaxLightningStrikeDamage and LightningStrikeDamage) or (MaxLightningStrikeDamage - v.DamageDealt))
								v.DamageDealt = (v.DamageDealt + DeterminedDamage)
							end
							break
						end
					end
					if not HumanoidFound then
						table.insert(HumanoidsHit, {Humanoid = humanoid, DamageDealt = DeterminedDamage})
					end
					TakeDamage(humanoid, DeterminedDamage)
					humanoid.Sit = true
				end
				for i, v in pairs(GetNearbyObjects(LightningRegion)) do
					if v and v.Parent then
						local character = v.Parent
						if character ~= Character then
							local humanoid = character:FindFirstChild("Humanoid")
							if humanoid and humanoid.Health > 0 then
								local player = Players:GetPlayerFromCharacter(character)
								if not player or (player and not IsTeamMate(Player, player)) then
									DamageHumanoid(character)
								end
							end
						end
					end
				end
				for i, v in pairs(Strikes) do
					local LightningPoints = MakeCircle((CFrame.new(Torso.Position) * CFrame.Angles(0, 0, 0)), v.Radius, v.NumberOfStrikes)
					for ii, vv in pairs(LightningPoints:GetChildren()) do
						if vv:IsA("BasePart") then
							Spawn(function()
								local StartPosition = (CFrame.new(vv.Position) * CFrame.new(0, 50, 0))
								local TargetPosition = (StartPosition + Vector3.new(0, -1, 0) * 75)
								local RayData = LightningFunctions.Zap({StartPosition = StartPosition.p, TargetPosition = TargetPosition.p, Character = Character, Color = "Cyan", Individual = true, Duration = 2.5, MaxRange = 150, SegmentLength = 5})
								if RayData then
									local RayPos = RayData.RayPos
									local SoundPart = BasePart:Clone()
									SoundPart.Name = "Effect"
									SoundPart.Transparency = 1
									SoundPart.CanCollide = false
									local Sound = Sounds.Lightning:Clone()
									Sound.Parent = SoundPart
									Debris:AddItem(SoundPart, 2)
									SoundPart.Parent = game:GetService("Workspace")
									SoundPart.CFrame = CFrame.new(RayPos)
									Sound:Play()
									local RayHit = RayData.RayHit
									if RayHit then
										local character = RayHit.Parent
										if character ~= Character then
											if character:IsA("Hat") then
												character = character.Parent
											end
											local humanoid = character:FindFirstChild("Humanoid")
											if humanoid and humanoid.Health > 0 then
												local player = Players:GetPlayerFromCharacter(character)
												if not player or (player and not IsTeamMate(Player, player)) then
													DamageHumanoid(character)
												end
											end
										end
									end
								end
							end)
						end
					end
					InUse.Value = false
					Tool.Enabled = true
				end
			end
		end
	end
end

function InvokeClient(Mode, Value)
	local ClientReturn = nil
	pcall(function()
		ClientReturn = ClientControl:InvokeClient(Player, Mode, Value)
	end)
	return ClientReturn
end

--[[ManaCharging.Changed:connect(function()
	ChargeMana()
end)
ManaCharging.Value = true]]
ChargeMana()

CreateStaff(false)

ServerControl.OnServerInvoke = OnServerInvoke

Tool.Activated:connect(Activated)
Tool.Equipped:connect(Equipped)
Tool.Unequipped:connect(Unequipped)]]></ProtectedString>
			</Properties>
			<Item class="ScreenGui" referent="RBX7A4123BB27644180888448BA96C0F47A">
				<Properties>
					<string name="Name">ManaBar</string>
				</Properties>
				<Item class="Frame" referent="RBX89127AFEA6444C4AADFD4AC9EDCE3248">
					<Properties>
						<bool name="Active">false</bool>
						<Color3 name="BackgroundColor3">4294967295</Color3>
						<float name="BackgroundTransparency">0</float>
						<Color3 name="BorderColor3">4278233855</Color3>
						<int name="BorderSizePixel">0</int>
						<bool name="ClipsDescendants">true</bool>
						<bool name="Draggable">false</bool>
						<string name="Name">Frame</string>
						<Ref name="NextSelectionDown">null</Ref>
						<Ref name="NextSelectionLeft">null</Ref>
						<Ref name="NextSelectionRight">null</Ref>
						<Ref name="NextSelectionUp">null</Ref>
						<UDim2 name="Position">
							<XS>0.5</XS>
							<XO>-150</XO>
							<YS>0.75</YS>
							<YO>0</YO>
						</UDim2>
						<float name="Rotation">0</float>
						<bool name="Selectable">false</bool>
						<Ref name="SelectionImageObject">null</Ref>
						<UDim2 name="Size">
							<XS>0</XS>
							<XO>300</XO>
							<YS>0</YS>
							<YO>40</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<token name="Style">0</token>
						<bool name="Visible">true</bool>
						<int name="ZIndex">1</int>
					</Properties>
					<Item class="Frame" referent="RBXEA9CF973AB844373BA564F8E51586B8D">
						<Properties>
							<bool name="Active">false</bool>
							<Color3 name="BackgroundColor3">4278215935</Color3>
							<float name="BackgroundTransparency">0</float>
							<Color3 name="BorderColor3">4278233855</Color3>
							<int name="BorderSizePixel">0</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<string name="Name">Frame</string>
							<Ref name="NextSelectionDown">null</Ref>
							<Ref name="NextSelectionLeft">null</Ref>
							<Ref name="NextSelectionRight">null</Ref>
							<Ref name="NextSelectionUp">null</Ref>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>0</XO>
								<YS>0</YS>
								<YO>0</YO>
							</UDim2>
							<float name="Rotation">0</float>
							<bool name="Selectable">false</bool>
							<Ref name="SelectionImageObject">null</Ref>
							<UDim2 name="Size">
								<XS>1</XS>
								<XO>0</XO>
								<YS>1</YS>
								<YO>0</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<token name="Style">0</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">2</int>
						</Properties>
						<Item class="Frame" referent="RBX160B034CF2FE4040B374C5E93D4F64B4">
							<Properties>
								<bool name="Active">false</bool>
								<Color3 name="BackgroundColor3">4291348680</Color3>
								<float name="BackgroundTransparency">0</float>
								<Color3 name="BorderColor3">4278215935</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<string name="Name">Divider</string>
								<Ref name="NextSelectionDown">null</Ref>
								<Ref name="NextSelectionLeft">null</Ref>
								<Ref name="NextSelectionRight">null</Ref>
								<Ref name="NextSelectionUp">null</Ref>
								<UDim2 name="Position">
									<XS>0.333299994</XS>
									<XO>0</XO>
									<YS>0</YS>
									<YO>0</YO>
								</UDim2>
								<float name="Rotation">0</float>
								<bool name="Selectable">false</bool>
								<Ref name="SelectionImageObject">null</Ref>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>2</XO>
									<YS>1</YS>
									<YO>0</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">4</int>
							</Properties>
						</Item>
						<Item class="Frame" referent="RBX05FBDA7556FE44198B70FA34430E272E">
							<Properties>
								<bool name="Active">false</bool>
								<Color3 name="BackgroundColor3">4291348680</Color3>
								<float name="BackgroundTransparency">0</float>
								<Color3 name="BorderColor3">4278215935</Color3>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<string name="Name">Divider</string>
								<Ref name="NextSelectionDown">null</Ref>
								<Ref name="NextSelectionLeft">null</Ref>
								<Ref name="NextSelectionRight">null</Ref>
								<Ref name="NextSelectionUp">null</Ref>
								<UDim2 name="Position">
									<XS>0.666000009</XS>
									<XO>0</XO>
									<YS>0</YS>
									<YO>0</YO>
								</UDim2>
								<float name="Rotation">0</float>
								<bool name="Selectable">false</bool>
								<Ref name="SelectionImageObject">null</Ref>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>2</XO>
									<YS>1</YS>
									<YO>0</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">4</int>
							</Properties>
						</Item>
					</Item>
					<Item class="Frame" referent="RBXA6D2FB3E7B5F451888B1E85B43F1FE31">
						<Properties>
							<bool name="Active">false</bool>
							<Color3 name="BackgroundColor3">4278233855</Color3>
							<float name="BackgroundTransparency">0</float>
							<Color3 name="BorderColor3">4278233855</Color3>
							<int name="BorderSizePixel">0</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<string name="Name">Bar</string>
							<Ref name="NextSelectionDown">null</Ref>
							<Ref name="NextSelectionLeft">null</Ref>
							<Ref name="NextSelectionRight">null</Ref>
							<Ref name="NextSelectionUp">null</Ref>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>0</XO>
								<YS>0</YS>
								<YO>0</YO>
							</UDim2>
							<float name="Rotation">0</float>
							<bool name="Selectable">true</bool>
							<Ref name="SelectionImageObject">null</Ref>
							<UDim2 name="Size">
								<XS>0</XS>
								<XO>0</XO>
								<YS>1</YS>
								<YO>0</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<token name="Style">0</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">3</int>
						</Properties>
					</Item>
					<Item class="TextLabel" referent="RBX7F63D231345D40259677651D307E523B">
						<Properties>
							<bool name="Active">false</bool>
							<Color3 name="BackgroundColor3">4294967295</Color3>
							<float name="BackgroundTransparency">1</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">1</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<token name="Font">0</token>
							<token name="FontSize">5</token>
							<string name="Name">TextLabel</string>
							<Ref name="NextSelectionDown">null</Ref>
							<Ref name="NextSelectionLeft">null</Ref>
							<Ref name="NextSelectionRight">null</Ref>
							<Ref name="NextSelectionUp">null</Ref>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>0</XO>
								<YS>0</YS>
								<YO>0</YO>
							</UDim2>
							<float name="Rotation">0</float>
							<bool name="Selectable">false</bool>
							<Ref name="SelectionImageObject">null</Ref>
							<UDim2 name="Size">
								<XS>1</XS>
								<XO>0</XO>
								<YS>1</YS>
								<YO>0</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<string name="Text">   Mana</string>
							<Color3 name="TextColor3">4294967295</Color3>
							<bool name="TextScaled">false</bool>
							<Color3 name="TextStrokeColor3">4294967295</Color3>
							<float name="TextStrokeTransparency">0.899999976</float>
							<float name="TextTransparency">0</float>
							<bool name="TextWrapped">false</bool>
							<token name="TextXAlignment">0</token>
							<token name="TextYAlignment">1</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">5</int>
						</Properties>
					</Item>
				</Item>
			</Item>
			<Item class="ModuleScript" referent="RBX6A14A07CA8C245CE9C33BDC5B593A6D9">
				<Properties>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">LightningFunctions</string>
					<ProtectedString name="Source"><![CDATA[--Made by Luckymaxer

Players = game:GetService("Players")
Debris = game:GetService("Debris")
RunService = game:GetService("RunService")

RbxUtility = LoadLibrary("RbxUtility")
Create = RbxUtility.Create

LightningModelRemoval = script:WaitForChild("LightningModelRemoval")

BasePart = Create("Part"){
	Material = Enum.Material.Plastic,
	Shape = Enum.PartType.Block,
	TopSurface = Enum.SurfaceType.Smooth,
	BottomSurface = Enum.SurfaceType.Smooth,
	FormFactor = Enum.FormFactor.Custom,
	Size = Vector3.new(0.2, 0.2, 0.2),
	CanCollide = true,
	Locked = true,
}

BaseLightning = BasePart:Clone()
BaseLightning.Name = "Effect"
BaseLightning.Transparency = 0.1
BaseLightning.Material = Enum.Material.Neon
BaseLightning.Anchored = true
BaseLightning.CanCollide = false

Rate = 0.05

LightningBolts = {}
LastBolt = nil

function GetLightningModel()
	local LightningModelName = "LightningModel"
	local LightningModel = game:GetService("Workspace"):FindFirstChild(LightningModelName)
	if not LightningModel then
		LightningModel = Create("Model"){
			Name = LightningModelName,
		}
		local LightningModelRemovalClone = LightningModelRemoval:Clone()
		LightningModelRemovalClone.Disabled = false
		LightningModelRemovalClone.Parent = LightningModel
		LightningModel.Parent = game:GetService("Workspace")
	end
	return LightningModel
end

function CheckTableForString(Table, String)
	for i, v in pairs(Table) do
		if string.find(string.lower(String), string.lower(v)) then
			return true
		end
	end
	return false
end

function CheckIntangible(Hit)
	local ProjectileNames = {"Water", "Arrow", "Projectile", "Effect", "Rail", "Lightning", "Bullet"}
	if Hit and Hit.Parent then
		if ((not Hit.CanCollide or CheckTableForString(ProjectileNames, Hit.Name)) and not Hit.Parent:FindFirstChild("Humanoid")) then
			return true
		end
	end
	return false
end

function CastRay(StartPos, Vec, Length, Ignore, DelayIfHit)
	local Ignore = ((type(Ignore) == "table" and Ignore) or {Ignore})
	local RayHit, RayPos, RayNormal = game:GetService("Workspace"):FindPartOnRayWithIgnoreList(Ray.new(StartPos, Vec * Length), Ignore)
	if RayHit and CheckIntangible(RayHit) then
		if DelayIfHit then
			wait()
		end
		RayHit, RayPos, RayNormal = CastRay((RayPos + (Vec * 0.01)), Vec, (Length - ((StartPos - RayPos).magnitude)), Ignore, DelayIfHit)
	end
	return RayHit, RayPos, RayNormal
end

function Zap(Table)
	local StartPos, TargetPos, Character, Color = Table.StartPosition, Table.TargetPosition, Table.Character, Table.Color
	local Duration = (Table.Duration or 2)
	local FadeRate = (Table.FadeRate or 0.05)
	local Individualize = (Table.Individualize or false)
	local MaxRange = (Table.MaxRange or 40)
	local SegmentLength = (Table.SegmentLength or 5)
	local TimeToFade = (Table.TimeToFade or 0.5)
	local Ignore = (Table.Ignore or {})
	if not StartPos or not TargetPos or not Character then
		return
	end
	local LightningModel = GetLightningModel()
	for i, v in pairs({Character, LightningModel}) do
		table.insert(Ignore, v)
	end
	local LastPos = StartPos
	local Direction = CFrame.new(StartPos, TargetPos).lookVector
	local RayHit, RayPos, RayNormal = CastRay(StartPos, Direction, MaxRange, Ignore, false)
	local RayLength = (StartPos - RayPos).Magnitude
	local Struck = false
	local TotalSegments = math.ceil(RayLength / SegmentLength)
	Direction = CFrame.new(StartPos, RayPos).lookVector
	local LightningBolt = Create("Model"){
		Name = "LightningBolt",
	}
	if not Individualize then
		table.insert(LightningBolts, LightningBolt)
	end
	LastBolt = LightningBolt
	Debris:AddItem(LightningBolt, Duration)
	LightningBolt.Parent = LightningModel
	for i = 1, TotalSegments do
		if not Struck then
			local Entropy = Vector3.new(((math.random() * 2) - 1), ((math.random() * 2) - 1), ((math.random() * 2) - 1))
			local NewPos = (StartPos + (Direction * (RayLength * (i / TotalSegments))) + Entropy)
			local SegmentVec = (NewPos - LastPos)
			local RayHit, RayPos, RayNormal = CastRay(LastPos, SegmentVec.Unit, SegmentVec.Magnitude, {Character, LightningModel}, false) 
			local RayVec = (LastPos - RayPos)
			local LightningPart = BaseLightning:Clone()
			LightningPart.BrickColor = BrickColor.new(Color)
			LightningPart.Size = Vector3.new(0.4, 0.4, RayVec.Magnitude)
			LightningPart.CFrame = (CFrame.new(LastPos, RayPos) * CFrame.new(0, 0, -(RayVec.Magnitude / 2)))
			Debris:AddItem(LightningPart, (Duration - 0.5))
			local Light = Create("PointLight"){
				Name = "Light",
				Color = BrickColor.new(Color).Color,
				Brightness = 50,
				Range = 2,
				Shadows = false,
				Enabled = true,
				Parent = LightningPart,
			}
			--Make circular
			local CylinderMesh = Create("CylinderMesh"){
				Name = "Mesh",
				Parent = LightningPart,
			}
			local OrigCF = LightningPart.CFrame
			LightningPart.Size = Vector3.new(LightningPart.Size.X, LightningPart.Size.Z, LightningPart.Size.Y)
			LightningPart.CFrame = (OrigCF * CFrame.Angles((math.pi / 2), 0, 0))
			LightningPart.Parent = LightningBolt
			LastPos = NewPos
			Spawn(function()
				local FadeRate = 0.05
				local OrigTransparency = LightningPart.Transparency
				for i = 1, (TimeToFade / FadeRate) do
					wait(FadeRate)
					LightningPart.Transparency = (OrigTransparency + (i / (TimeToFade / FadeRate)))
				end
			end)
		end
	end
	return {RayHit = RayHit, RayPos = RayPos, RayNormal = RayNormal, LightningModel = LightningModel}
end

function RemoveLightning()
	for i, v in pairs(LightningBolts) do
		if v and v.Parent then
			v:Destroy()
		end
	end
	LightningBolts = {}
end

Functions = {
	Zap = Zap,
	RemoveLightning = RemoveLightning,
}

return Functions]]></ProtectedString>
				</Properties>
				<Item class="Script" referent="RBXBC06A3640F5C427793AF2FB79C6ABDFC">
					<Properties>
						<bool name="Disabled">true</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">LightningModelRemoval</string>
						<ProtectedString name="Source"><![CDATA[--Made by Luckymaxer

Model = script.Parent

Debris = game:GetService("Debris")

FadeRate = 0.025
Rate = (1 / 15)

Removing = false

function RemoveModel()
	if Removing then
		return
	end
	local Parts = {}
	for i, v in pairs(Model:GetChildren()) do
		if v:IsA("Model") then
			table.insert(Parts, v)
		end
	end
	if #Parts == 0 then
		Removing = true
		Model.Name = ""
		Debris:AddItem(Model, 0.5)
	end
end

Model.ChildRemoved:connect(function(Child)
	RemoveModel()
end)

wait(1.5)

RemoveModel()]]></ProtectedString>
					</Properties>
				</Item>
			</Item>
		</Item>
		<Item class="Camera" referent="RBXB6358FDA8B0849668BAED7ED79AE5A33">
			<Properties>
				<Ref name="CameraSubject">null</Ref>
				<token name="CameraType">0</token>
				<CoordinateFrame name="CoordinateFrame">
					<X>-3.35789323</X>
					<Y>4.59142017</Y>
					<Z>0.820566058</Z>
					<R00>0.0947238505</R00>
					<R01>0.289338768</R01>
					<R02>-0.952528417</R02>
					<R10>-0</R10>
					<R11>0.95683074</R11>
					<R12>0.290645629</R12>
					<R20>0.995503604</R20>
					<R21>-0.0275310725</R21>
					<R22>0.0906346887</R22>
				</CoordinateFrame>
				<float name="FieldOfView">70</float>
				<CoordinateFrame name="Focus">
					<X>-1.1194514</X>
					<Y>3.90840292</Y>
					<Z>0.607574522</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<string name="Name">ThumbnailCamera</string>
			</Properties>
		</Item>
	</Item>
</roblox>