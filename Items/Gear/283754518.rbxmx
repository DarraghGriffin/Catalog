<roblox xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.roblox.com/roblox.xsd" version="4">
	<External>null</External>
	<External>nil</External>
	<Item class="Tool" referent="RBX2EBD6EE02A604413A7C17FA1F49A5017">
		<Properties>
			<bool name="CanBeDropped">true</bool>
			<bool name="Enabled">true</bool>
			<CoordinateFrame name="Grip">
				<X>0.25</X>
				<Y>1.25</Y>
				<Z>0.100000001</Z>
				<R00>0.872270942</R00>
				<R01>0.462249398</R01>
				<R02>0.159589857</R02>
				<R10>-0.141773224</R10>
				<R11>0.551365077</R11>
				<R12>-0.822129548</R12>
				<R20>-0.468021154</R20>
				<R21>0.694494069</R21>
				<R22>0.546474338</R22>
			</CoordinateFrame>
			<bool name="ManualActivationOnly">false</bool>
			<string name="Name">ElectricLightningGuitar</string>
			<Content name="TextureId"><url>http://www.roblox.com/asset/?id=280037693</url></Content>
			<string name="ToolTip"></string>
		</Properties>
		<Item class="Part" referent="RBX8B839FCDEA97498BA91CA29B45D3A935">
			<Properties>
				<bool name="Anchored">false</bool>
				<float name="BackParamA">-0.5</float>
				<float name="BackParamB">0.5</float>
				<token name="BackSurface">0</token>
				<token name="BackSurfaceInput">0</token>
				<float name="BottomParamA">-0.5</float>
				<float name="BottomParamB">0.5</float>
				<token name="BottomSurface">0</token>
				<token name="BottomSurfaceInput">0</token>
				<int name="BrickColor">194</int>
				<CoordinateFrame name="CFrame">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
					<R00>0.726160765</R00>
					<R01>0.687523663</R01>
					<R02>2.04754315e-007</R02>
					<R10>-0.687523663</R10>
					<R11>0.726160765</R11>
					<R12>1.68303515e-007</R12>
					<R20>-3.29719825e-008</R20>
					<R21>-2.62989147e-007</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<bool name="CanCollide">true</bool>
				<float name="Elasticity">0.5</float>
				<float name="Friction">0.300000012</float>
				<float name="FrontParamA">-0.5</float>
				<float name="FrontParamB">0.5</float>
				<token name="FrontSurface">0</token>
				<token name="FrontSurfaceInput">0</token>
				<float name="LeftParamA">-0.5</float>
				<float name="LeftParamB">0.5</float>
				<token name="LeftSurface">0</token>
				<token name="LeftSurfaceInput">0</token>
				<bool name="Locked">true</bool>
				<token name="Material">256</token>
				<string name="Name">Handle</string>
				<float name="Reflectance">0</float>
				<float name="RightParamA">-0.5</float>
				<float name="RightParamB">0.5</float>
				<token name="RightSurface">0</token>
				<token name="RightSurfaceInput">0</token>
				<Vector3 name="RotVelocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<float name="TopParamA">-0.5</float>
				<float name="TopParamB">0.5</float>
				<token name="TopSurface">0</token>
				<token name="TopSurfaceInput">0</token>
				<float name="Transparency">0</float>
				<Vector3 name="Velocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<token name="formFactorRaw">3</token>
				<token name="shape">1</token>
				<Vector3 name="size">
					<X>2</X>
					<Y>5</Y>
					<Z>0.25</Z>
				</Vector3>
			</Properties>
			<Item class="SpecialMesh" referent="RBX6B1E0867684145C1B09BC6423B13B1C7">
				<Properties>
					<token name="LODX">2</token>
					<token name="LODY">2</token>
					<Content name="MeshId"><url>http://www.roblox.com/asset/?id=280037728</url></Content>
					<token name="MeshType">5</token>
					<string name="Name">Mesh</string>
					<Vector3 name="Offset">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<Vector3 name="Scale">
						<X>0.850000024</X>
						<Y>0.850000024</Y>
						<Z>0.850000024</Z>
					</Vector3>
					<Content name="TextureId"><url>http://www.roblox.com/asset/?id=280037672</url></Content>
					<Vector3 name="VertexColor">
						<X>1</X>
						<Y>1</Y>
						<Z>1</Z>
					</Vector3>
				</Properties>
			</Item>
		</Item>
		<Item class="LocalScript" referent="RBX872B8E13B66C4FBFA09B171B2988209E">
			<Properties>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">LocalScript</string>
				<ProtectedString name="Source"><![CDATA[--Made by Luckymaxer

Tool = script.Parent
Handle = Tool:WaitForChild("Handle")

Players = game:GetService("Players")
Debris = game:GetService("Debris")
UserInputService = game:GetService("UserInputService")

Folders = Tool:WaitForChild("Folders")
RemotesFolder = Folders:WaitForChild("Remotes")
ServerControl = RemotesFolder:WaitForChild("ServerControl")
ClientControl = RemotesFolder:WaitForChild("ClientControl")

Animations = {}

ToolEquipped = false

function SetAnimation(mode, value)
	if mode == "PlayAnimation" and value and ToolEquipped and Humanoid then
		for i, v in pairs(Animations) do
			if v.Animation == value.Animation then
				v.AnimationTrack:Stop()
				table.remove(Animations, i)
			end
		end
		local AnimationTrack = Humanoid:LoadAnimation(value.Animation)
		table.insert(Animations, {Animation = value.Animation, AnimationTrack = AnimationTrack})
		AnimationTrack:Play(value.FadeTime, value.Weight, value.Speed)
	elseif mode == "StopAnimation" and value then
		for i, v in pairs(Animations) do
			if v.Animation == value.Animation then
				v.AnimationTrack:Stop()
				table.remove(Animations, i)
			end
		end
	end
end

function CheckIfAlive()
	return (((Character and Character.Parent and Humanoid and Humanoid.Parent and Humanoid.Health > 0 and Player and Player.Parent) and true) or false)
end

function Equipped(Mouse)
	Character = Tool.Parent
	Player = Players:GetPlayerFromCharacter(Character)
	Humanoid = Character:FindFirstChild("Humanoid")
	ToolEquipped = true
	if not CheckIfAlive() then
		return
	end
	PlayerMouse = Mouse
	Mouse.Button1Down:connect(function()
		InvokeServer("MouseClick", {Down = true})
	end)
	Mouse.Button1Up:connect(function()
		InvokeServer("MouseClick", {Down = false})
	end)
	for i, v in pairs({KeyDown, KeyUp}) do
		if v then
			v:disconnect()
		end
	end
	KeyDown = UserInputService.InputBegan:connect(function(InputObject)
		local InputType = InputObject.UserInputType
		local KeyCode = InputObject.KeyCode
		if InputType == Enum.UserInputType.Keyboard then
			InvokeServer("KeyPressed", {Key = KeyCode.Name, Down = true})
		end
	end)
	KeyUp = UserInputService.InputEnded:connect(function(InputObject)
		local InputType = InputObject.UserInputType
		local KeyCode = InputObject.KeyCode
		if InputType == Enum.UserInputType.Keyboard then
			InvokeServer("KeyPressed", {Key = KeyCode.Name, Down = false})
		end
	end)
end

function Unequipped()
	for i, v in pairs({KeyDown, KeyUp}) do
		if v then
			v:disconnect()
		end
	end
	for i, v in pairs(Animations) do
		if v and v.AnimationTrack then
			v.AnimationTrack:Stop()
		end
	end
	Animations = {}
	ToolEquipped = false
end

function InvokeServer(mode, value)
	local ServerReturn
	pcall(function()
		ServerReturn = ServerControl:InvokeServer(mode, value)
	end)
	return ServerReturn
end

function OnClientInvoke(mode, value)
	if mode == "PlayAnimation" and value and ToolEquipped and Humanoid then
		SetAnimation("PlayAnimation", value)
	elseif mode == "StopAnimation" and value then
		SetAnimation("StopAnimation", value)
	elseif mode == "PlaySound" and value then
		value:Play()
	elseif mode == "StopSound" and value then
		value:Stop()
	elseif mode == "MousePosition" then
		return ((PlayerMouse and {Position = PlayerMouse.Hit.p, Target = PlayerMouse.Target}) or nil)
	end
end

ClientControl.OnClientInvoke = OnClientInvoke

Tool.Equipped:connect(Equipped)
Tool.Unequipped:connect(Unequipped)]]></ProtectedString>
			</Properties>
		</Item>
		<Item class="Folder" referent="RBX73BA29A2B54F447CBFB74241BC25970F">
			<Properties>
				<string name="Name">Folders</string>
			</Properties>
			<Item class="Folder" referent="RBX8B1DAF95504A4CD0AD983E7AB8E278C3">
				<Properties>
					<string name="Name">Animations</string>
				</Properties>
				<Item class="Animation" referent="RBXCD3630D2825D444687CAD8B52A3D34DA">
					<Properties>
						<Content name="AnimationId"><url>http://www.roblox.com/asset/?id=192906348</url></Content>
						<string name="Name">Hold</string>
					</Properties>
				</Item>
				<Item class="Animation" referent="RBX38E0A6C6337B4906B94FE9E68FB18F00">
					<Properties>
						<Content name="AnimationId"><url>http://www.roblox.com/asset/?id=192900081</url></Content>
						<string name="Name">Pluck</string>
					</Properties>
				</Item>
			</Item>
			<Item class="Folder" referent="RBX362E729AD9984256B82C04B1E1740A69">
				<Properties>
					<string name="Name">Remotes</string>
				</Properties>
				<Item class="RemoteFunction" referent="RBX32E3F764517B48779C7C69F48389459A">
					<Properties>
						<string name="Name">ServerControl</string>
					</Properties>
				</Item>
				<Item class="RemoteFunction" referent="RBX434B40D8B2004674B2DF1EE43355FDAF">
					<Properties>
						<string name="Name">ClientControl</string>
					</Properties>
				</Item>
			</Item>
		</Item>
		<Item class="Script" referent="RBX767AB1B895CD484894BE726E5AC95594">
			<Properties>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">Script</string>
				<ProtectedString name="Source"><![CDATA[--Made by Luckymaxer

Tool = script.Parent
Handle = Tool:WaitForChild("Handle")

Players = game:GetService("Players")
Debris = game:GetService("Debris")

RbxUtility = LoadLibrary("RbxUtility")
Create = RbxUtility.Create

Folders = Tool:WaitForChild("Folders")
AnimationsFolder = Folders:WaitForChild("Animations")
RemoteFolder = Folders:WaitForChild("Remotes")

Grips = {
	Hold = CFrame.new(0, 0.25, -0.05, 0.995037138, 0.0995037258, 1.83218879e-006, -0.0995037183, 0.995037198, 1.83218854e-005, 0, -1.84132678e-005, 0.99999994),
	Play = CFrame.new(0.25, 1.25, 0.1, 0.872270942, 0.462249398, 0.159589857, -0.141773224, 0.551365077, -0.822129548, -0.468021154, 0.694494069, 0.546474338),
	Unequipped = CFrame.new(0.5, -2, 0.7, -0.866025388, 8.10044585e-005, -0.5, -0.5, 1.31134158e-007, 0.866025388, 7.02174802e-005, 1, 4.03886625e-005),
}

Animations = {
	Hold = {Animation = AnimationsFolder:WaitForChild("Hold"), FadeTime = nil, Weight = nil, Speed = nil},
	Pluck = {Animation = AnimationsFolder:WaitForChild("Pluck"), FadeTime = nil, Weight = nil, Speed = 6},
}

NoteData = {
	Chords = {
		{Key = "Z", Sound = {Normal = 99170172, Sharp = 99189531}},
		{Key = "X", Sound = {Normal = 99170311, Sharp = 99189711}},
		{Key = "C", Sound = {Normal = 99170354, Sharp = 99189785}},
		{Key = "V", Sound = {Normal = 99170403, Sharp = 99190216}},
		{Key = "B", Sound = {Normal = 99170481, Sharp = 99189905}},
		{Key = "N", Sound = {Normal = 99170537, Sharp = 99190021}},
		{Key = "M", Sound = {Normal = 99170583, Sharp = 99190550}},
	},
	Pitches = {
		{Key = "G", Pitch = 4},
		{Key = "H", Pitch = 4.25},
		{Key = "J", Pitch = 4.5},
		{Key = "K", Pitch = 4.75},
		{Key = "L", Pitch = 5},
	},
}

Sound = {
	Volume = 0.75,
	Pitch = NoteData.Pitches[3].Pitch,
}

IsPlaying = false
ShiftDown = false
ToolEquipped = false

ServerControl = (RemoteFolder:FindFirstChild("ServerControl") or Create("RemoteFunction"){
	Name = "ServerControl",
	Parent = RemoteFolder,
})

ClientControl = (RemoteFolder:FindFirstChild("ClientControl") or Create("RemoteFunction"){
	Name = "ClientControl",
	Parent = RemoteFolder,
})

GuitarModule = require(191816425)
GuitarTable = GuitarModule.GetTable({Key = "Guitars"})
GuitarFunctions = GuitarTable.GetData({
	Tool = Tool,
	Communication = {Server = ServerControl, Client = ClientControl},
	KeyData = NoteData,
	UnequippedDisplay = {Enabled = true, Grips = Grips},
	SpecialEnabled = {Enabled = true, AcceptedRatio = 0.75},
})

LightningModule = require(script:WaitForChild("LightningModule"))()

Handle.Transparency = 0
Tool.Grip = Grips.Hold
Tool.Enabled = true

function Activated()
	if not Tool.Enabled or not CheckIfAlive() or not ToolEquipped then
		return
	end
	Tool.Enabled = false
	IsPlaying = not IsPlaying
	if IsPlaying then
		Tool.Grip = Grips.Play
		Spawn(function()
			InvokeClient("PlayAnimation", Animations.Hold)
		end)
	else
		Tool.Grip = Grips.Hold
		for i, v in pairs(Animations) do
			Spawn(function()
				InvokeClient("StopAnimation", v)
			end)
		end
	end
	Tool.Enabled = true
end

function CheckIfAlive()
	return (((Player and Player.Parent and Humanoid and Humanoid.Parent and Humanoid.Health > 0) and true) or false)
end

function Equipped(Mouse)
	Character = Tool.Parent
	Player = Players:GetPlayerFromCharacter(Character)
	Humanoid = Character:FindFirstChild("Humanoid")
	if not CheckIfAlive() then
		return
	end
	Tool.Grip = Grips.Hold
	IsPlaying = false
	ShiftDown = false
	ToolEquipped = true
end

function Unequipped()
	IsPlaying = false
	ShiftDown = false
	ToolEquipped = false
end

function InvokeClient(Mode, Value)
	local ClientReturn = nil
	pcall(function()
		ClientReturn = ClientControl:InvokeClient(Player, Mode, Value)
	end)
	return ClientReturn
end

function OnServerInvoke(player, Mode, Value)
	if player ~= Player then
		return
	end
	if Mode == "KeyPressed" and Value then
		local Key = Value.Key
		local Down = Value.Down
		if Key == "LeftShift" or Key == "RightShift" then
			ShiftDown = Down
		elseif IsPlaying and Down then
			if NoteData.Chords then
				for i, v in pairs(NoteData.Chords) do
					if string.lower(v.Key) == string.lower(Key) then
						GuitarFunctions.PlaySound({
							Object = Handle,
							Sound = {SoundId = v, ShiftDown = ShiftDown},
							Pitch = (Sound.Pitch or v.Pitch or nil),
							Volume = (Sound.Volume or v.Volume or nil),
						})
						Spawn(function()
							InvokeClient("PlayAnimation", Animations.Pluck)
						end)
						return
					end
				end
			end
			if NoteData.Pitches then
				for i, v in pairs(NoteData.Pitches) do
					if string.lower(v.Key) == string.lower(Key) then
						Sound.Pitch = v.Pitch
						return
					end
				end
			end
		end
	elseif Mode == "IsPlaying" then
		return IsPlaying
	elseif Mode == "SpecialCompleted" and Value then
		local Success = Value.Success
		local SuccessRatio = Value.SuccessRatio
		if Success then
			LightningModule.Strike({
				Player = Player,
				Position = (Handle.CFrame * CFrame.new(0, -(Handle.Size.Y / 4), 0)).p,
			})
		end
	end
end

ServerControl.OnServerInvoke = OnServerInvoke

Tool.Activated:connect(Activated)
Tool.Equipped:connect(Equipped)
Tool.Unequipped:connect(Unequipped)]]></ProtectedString>
			</Properties>
			<Item class="ModuleScript" referent="RBXACD0EF8E40334E7281CC776092E1147A">
				<Properties>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">LightningModule</string>
					<ProtectedString name="Source"><![CDATA[--Made by Luckymaxer

Tool = script.Parent

Players = game:GetService("Players")
Debris = game:GetService("Debris")

RbxUtility = LoadLibrary("RbxUtility")
Create = RbxUtility.Create

BasePart = Create("Part"){
	Material = Enum.Material.Plastic,
	TopSurface = Enum.SurfaceType.Smooth,
	BottomSurface = Enum.SurfaceType.Smooth,
	FormFactor = Enum.FormFactor.Custom,
	TopSurface = Enum.SurfaceType.SmoothNoOutlines,
	BottomSurface = Enum.SurfaceType.SmoothNoOutlines,
	FrontSurface = Enum.SurfaceType.SmoothNoOutlines,
	BackSurface = Enum.SurfaceType.SmoothNoOutlines,
	LeftSurface = Enum.SurfaceType.SmoothNoOutlines,
	RightSurface = Enum.SurfaceType.SmoothNoOutlines,
	Locked = true,
	CanCollide = true,
	Anchored = false,
}

LightningRadius = 60

Rate = (1 / 60)

function IsTeamMate(Player1, Player2)
	return (Player1 and Player2 and not Player1.Neutral and not Player2.Neutral and Player1.TeamColor == Player2.TeamColor)
end

function GetTotalParts(MaxParts, PossibleParts, Parts)
	if MaxParts < PossibleParts then
		return MaxParts
	elseif Parts >= MaxParts then
		return 0
	elseif MaxParts >= PossibleParts then
		local PartCount = (MaxParts - PossibleParts)
		if Parts <= MaxParts then
			PartCount = (MaxParts - Parts)
			if PartCount > PossibleParts then
				return PossibleParts
			else
				return PartCount
			end
		elseif PartCount >= PossibleParts then
			return PossibleParts
		else
			return PartCount
		end
	end
end

function GetParts(Region, MaxParts, Ignore)
	local Parts = {}
	local RerunFailed = false
	while #Parts < MaxParts and not RerunFailed do
		local Region = Region
		local PossibleParts = GetTotalParts(MaxParts, 100, #Parts)
		local PartsNearby = game:GetService("Workspace"):FindPartsInRegion3WithIgnoreList(Region, Ignore, PossibleParts)
		if #PartsNearby == 0 then
			RerunFailed = true
		else
			for i, v in pairs(PartsNearby) do
				table.insert(Parts, v)
				table.insert(Ignore, v)
			end
		end
	end
	return Parts
end

function CheckTableForInstance(Table, Instance)
	for i, v in pairs(Table) do
		if v == Instance then
			return true
		end
	end
	return false
end

function GetPlayersNearby(Player, Position, Radius)
	local NegativeRegion = (Position - Vector3.new(Radius, Radius, Radius))
	local PositiveRegion = (Position + Vector3.new(Radius, Radius, Radius))
	local Region = Region3.new(NegativeRegion, PositiveRegion)
	local IgnoreList = {((Player and Player.Character) or nil)}
	for i, v in pairs(Players:GetChildren()) do
		if v:IsA("Player") and v ~= Player and v.Character and v.Character.Parent and IsTeamMate(Player, v) then
			table.insert(IgnoreList, v.Character)
		end
	end
	local Parts = GetParts(Region, 500, IgnoreList)
	local Humanoids = {}
	for i, v in pairs(Parts) do
		local character = v.Parent
		if character:IsA("Hat") then
			character = character.Parent
		end
		local humanoid = character:FindFirstChild("Humanoid")
		local torso = character:FindFirstChild("Torso")
		if humanoid and humanoid.Health > 0 and torso and not CheckTableForInstance(Humanoids, humanoid) then
			table.insert(Humanoids, humanoid)
		end
	end
	return Humanoids
end

function GetLightning()

	local function LightningStrike(Source, Destination)
		local MaxSegLength = 12
		local MinSegLength = 4
		local MaxOffset = 4
		local Direction = (Destination - Source).unit
		local Distance = (Source - Destination).magnitude
		
		local Points = {}	
		Points[1] = Source
		local LastDist = 0
		
		while (Distance - LastDist) > MaxSegLength do
			LastDist = (LastDist + ((math.random() * (MaxSegLength - MinSegLength)) + MinSegLength))
			for i = 1, 2 do
				local NewVector = (Source + (LastDist * Direction) + Vector3.new(math.random(), math.random(), math.random()))
				table.insert(Points, NewVector)
			end
			wait(Rate)
		end	
		table.insert(Points, Destination)
		
		local Parts = {}
		
		local LightningModel = Create("Model"){
			Name = "LightningModel",
		}
		Debris:AddItem(LightningModel, 3)
		LightningModel.Parent = game:GetService("Workspace")	
		
		local Color = BrickColor.new("Really blue")
		for i, v in pairs(Points) do
			local LastPart = BasePart:Clone()
			LastPart.Material = Enum.Material.Neon
			LastPart.BrickColor = Color
			LastPart.Transparency = 0.3
			LastPart.Anchored = true
			LastPart.CanCollide = false
			for i, v in pairs({"Front", "Back", "Left", "Right", "Top", "Bottom"}) do
				local Light = Instance.new("SurfaceLight")
				Light.Face = Enum.NormalId[v]
				Light.Range = 4
				Light.Brightness = 100
				Light.Color = LastPart.BrickColor.Color
				Light.Enabled = true
				Light.Parent = LastPart
			end
			local Mesh = Create("CylinderMesh"){
				Scale = Vector3.new(0.5, 1, 0.5),
				Parent = LastPart,
			}
			if Points[i + 1] then		
				LastPart.Size = Vector3.new(0.5, (v - Points[i + 1]).magnitude, 0.5)
				LastPart.CFrame = CFrame.new(((v + Points[i + 1]) / 2), Points[i + 1]) * CFrame.Angles((math.pi / 2), 0, 0)
				Debris:AddItem(LastPart, 1)
				LastPart.Parent = LightningModel
				wait(Rate)
			end
		end
	end
	
	local function DoLightning(Position, HitPlayers, Player)
		local humanoids = GetPlayersNearby(Player, Position, LightningRadius)
		for i, v in pairs(humanoids) do
			local character = v.Parent
			local torso = character:FindFirstChild("Torso")
			if v and v.Health > 0 and torso then
				Spawn(function()
					LightningStrike(Position, torso.Position)
				end)
				HitPlayers[character] = true
				v:TakeDamage(100)
				DoLightning(Position, HitPlayers, Player)
				return true
			end
		end
		return false
	end
	
	local function Strike(Table)
		if not Table then
			return
		end
		local Position = Table.Position
		local Player = Table.Player
		if not Position or not Player then
			return
		end
		local HitPlayers = {}
		--if not DoLightning(Position, HitPlayers, Player) then
			for i = 1, math.random(8, 25), 1 do	
				Spawn(function()
					LightningStrike(Position, (Position + (Vector3.new(((math.random() - 0.5) * 2), ((math.random() - 0.5) * 2),((math.random() - 0.5) * 2)) * 45)))
				end)
			end
		--end
	end
	
	return {
		LightningStrike = LightningStrike,
		DoLightning = DoLightning,
		Strike = Strike,
	}

end

return GetLightning]]></ProtectedString>
				</Properties>
			</Item>
		</Item>
		<Item class="Camera" referent="RBX88359DBE9EBB4BEF96BE70B8142CE0B8">
			<Properties>
				<Ref name="CameraSubject">null</Ref>
				<token name="CameraType">0</token>
				<CoordinateFrame name="CoordinateFrame">
					<X>-0.311193913</X>
					<Y>-0.523903131</Y>
					<Z>-3.85719728</Z>
					<R00>-0.999997199</R00>
					<R01>0.000119328346</R01>
					<R02>0.00235346239</R02>
					<R10>-0</R10>
					<R11>0.99871707</R11>
					<R12>-0.0506382696</R12>
					<R20>-0.00235648546</R20>
					<R21>-0.0506381281</R21>
					<R22>-0.998714328</R22>
				</CoordinateFrame>
				<float name="FieldOfView">70</float>
				<CoordinateFrame name="Focus">
					<X>-0.317727089</X>
					<Y>-0.383332074</Y>
					<Z>-1.08478165</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<string name="Name">ThumbnailCamera</string>
			</Properties>
		</Item>
	</Item>
</roblox>