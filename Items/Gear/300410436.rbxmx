<roblox xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.roblox.com/roblox.xsd" version="4">
	<External>null</External>
	<External>nil</External>
	<Item class="Tool" referent="RBX1AB1CA370AE64C46B1CD52F2CF9C8C35">
		<Properties>
			<bool name="CanBeDropped">true</bool>
			<bool name="Enabled">true</bool>
			<CoordinateFrame name="Grip">
				<X>0</X>
				<Y>-0.774999976</Y>
				<Z>-0.5</Z>
				<R00>1</R00>
				<R01>0</R01>
				<R02>0</R02>
				<R10>0</R10>
				<R11>1</R11>
				<R12>0</R12>
				<R20>0</R20>
				<R21>0</R21>
				<R22>1</R22>
			</CoordinateFrame>
			<bool name="ManualActivationOnly">false</bool>
			<string name="Name">RobotSpider</string>
			<bool name="RequiresHandle">true</bool>
			<Content name="TextureId"><url>http://www.roblox.com/asset/?id=297605937</url></Content>
			<string name="ToolTip"></string>
		</Properties>
		<Item class="Part" referent="RBX8059E02A6AEE40F38E0A78EAD9141ABB">
			<Properties>
				<bool name="Anchored">false</bool>
				<float name="BackParamA">-0.5</float>
				<float name="BackParamB">0.5</float>
				<token name="BackSurface">0</token>
				<token name="BackSurfaceInput">0</token>
				<float name="BottomParamA">-0.5</float>
				<float name="BottomParamB">0.5</float>
				<token name="BottomSurface">0</token>
				<token name="BottomSurfaceInput">0</token>
				<int name="BrickColor">194</int>
				<CoordinateFrame name="CFrame">
					<X>1.001369</X>
					<Y>62.8531876</Y>
					<Z>0.61561197</Z>
					<R00>0.309851468</R00>
					<R01>-0.0205669403</R01>
					<R02>0.950562477</R02>
					<R10>-1.42951718e-014</R10>
					<R11>0.999765992</R11>
					<R12>0.021631537</R12>
					<R20>-0.950784981</R20>
					<R21>-0.00670256326</R21>
					<R22>0.309778959</R22>
				</CoordinateFrame>
				<bool name="CanCollide">true</bool>
				<float name="Elasticity">0.5</float>
				<float name="Friction">0.300000012</float>
				<float name="FrontParamA">-0.5</float>
				<float name="FrontParamB">0.5</float>
				<token name="FrontSurface">0</token>
				<token name="FrontSurfaceInput">0</token>
				<float name="LeftParamA">-0.5</float>
				<float name="LeftParamB">0.5</float>
				<token name="LeftSurface">0</token>
				<token name="LeftSurfaceInput">0</token>
				<bool name="Locked">true</bool>
				<token name="Material">256</token>
				<string name="Name">Handle</string>
				<float name="Reflectance">0</float>
				<float name="RightParamA">-0.5</float>
				<float name="RightParamB">0.5</float>
				<token name="RightSurface">0</token>
				<token name="RightSurfaceInput">0</token>
				<Vector3 name="RotVelocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<float name="TopParamA">-0.5</float>
				<float name="TopParamB">0.5</float>
				<token name="TopSurface">0</token>
				<token name="TopSurfaceInput">0</token>
				<float name="Transparency">0</float>
				<Vector3 name="Velocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<token name="formFactorRaw">3</token>
				<token name="shape">1</token>
				<Vector3 name="size">
					<X>2</X>
					<Y>0.800000012</Y>
					<Z>2</Z>
				</Vector3>
			</Properties>
			<Item class="SpecialMesh" referent="RBXAB1CD285788A4E65AD809658360AF580">
				<Properties>
					<token name="LODX">2</token>
					<token name="LODY">2</token>
					<Content name="MeshId"><url>http://www.roblox.com/asset/?id=297605974</url></Content>
					<token name="MeshType">5</token>
					<string name="Name">Mesh</string>
					<Vector3 name="Offset">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<Vector3 name="Scale">
						<X>1</X>
						<Y>1</Y>
						<Z>1</Z>
					</Vector3>
					<Content name="TextureId"><url>http://www.roblox.com/asset/?id=297605911</url></Content>
					<Vector3 name="VertexColor">
						<X>1</X>
						<Y>1</Y>
						<Z>1</Z>
					</Vector3>
				</Properties>
			</Item>
		</Item>
		<Item class="LocalScript" referent="RBXF383A7BAB69048539FDB8EE694BADEFD">
			<Properties>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">MouseIcon</string>
				<ProtectedString name="Source"><![CDATA[--Made by Luckymaxer

Mouse_Icon = "rbxasset://textures/GunCursor.png"
Reloading_Icon = "rbxasset://textures/GunWaitCursor.png"

Tool = script.Parent

Mouse = nil

function UpdateIcon()
	if Mouse then
		Mouse.Icon = Tool.Enabled and Mouse_Icon or Reloading_Icon
	end
end

function OnEquipped(ToolMouse)
	Mouse = ToolMouse
	UpdateIcon()
end

function OnChanged(Property)
	if Property == "Enabled" then
		UpdateIcon()
	end
end

Tool.Equipped:connect(OnEquipped)
Tool.Changed:connect(OnChanged)
]]></ProtectedString>
			</Properties>
		</Item>
		<Item class="LocalScript" referent="RBX594A5C3C210546269C6D7A202017134F">
			<Properties>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">LocalScript</string>
				<ProtectedString name="Source"><![CDATA[--Made by Luckymaxer

Tool = script.Parent
Handle = Tool:WaitForChild("Handle")

Players = game:GetService("Players")
RunService = game:GetService("RunService")
UserInputService = game:GetService("UserInputService")

Animations = {}

ServerControl = Tool:WaitForChild("ServerControl")
ClientControl = Tool:WaitForChild("ClientControl")

Rate = (1 / 60)

ToolEquipped = false

function SetAnimation(mode, value)
	if mode == "PlayAnimation" and value and ToolEquipped and Humanoid then
		for i, v in pairs(Animations) do
			if v.Animation == value.Animation then
				v.AnimationTrack:Stop()
				table.remove(Animations, i)
			end
		end
		local AnimationTrack = Humanoid:LoadAnimation(value.Animation)
		table.insert(Animations, {Animation = value.Animation, AnimationTrack = AnimationTrack})
		AnimationTrack:Play(value.FadeTime, value.Weight, value.Speed)
	elseif mode == "StopAnimation" and value then
		for i, v in pairs(Animations) do
			if v.Animation == value.Animation then
				v.AnimationTrack:Stop(value.FadeTime)
				table.remove(Animations, i)
			end
		end
	end
end

function CheckIfAlive()
	return (((Character and Character.Parent and Humanoid and Humanoid.Parent and Humanoid.Health > 0 and Player and Player.Parent) and true) or false)
end

function Equipped(Mouse)
	Character = Tool.Parent
	Player = Players:GetPlayerFromCharacter(Character)
	Humanoid = Character:FindFirstChild("Humanoid")
	ToolEquipped = true
	if not CheckIfAlive() then
		return
	end
	PlayerMouse = Player:GetMouse()
end

function Unequipped()
	for i, v in pairs(Animations) do
		if v and v.AnimationTrack then
			v.AnimationTrack:Stop()
		end
	end
	Animations = {}
	ToolEquipped = false
end

function InvokeServer(mode, value)
	local ServerReturn
	pcall(function()
		ServerReturn = ServerControl:InvokeServer(mode, value)
	end)
	return ServerReturn
end

function OnClientInvoke(mode, value)
	if mode == "PlayAnimation" and value and ToolEquipped and Humanoid then
		SetAnimation("PlayAnimation", value)
	elseif mode == "StopAnimation" and value then
		SetAnimation("StopAnimation", value)
	elseif mode == "PlaySound" and value then
		value:Play()
	elseif mode == "StopSound" and value then
		value:Stop()
	elseif mode == "MousePosition" then
		return ((PlayerMouse and {Position = PlayerMouse.Hit.p, Target = PlayerMouse.Target}) or nil)
	end
end

ClientControl.OnClientInvoke = OnClientInvoke
Tool.Equipped:connect(Equipped)
Tool.Unequipped:connect(Unequipped)]]></ProtectedString>
			</Properties>
		</Item>
		<Item class="Camera" referent="RBX291E8C264BD5473F8418C4403F71B38C">
			<Properties>
				<Ref name="CameraSubject">null</Ref>
				<token name="CameraType">0</token>
				<CoordinateFrame name="CoordinateFrame">
					<X>-116.26593</X>
					<Y>162.420074</Y>
					<Z>-40.3667831</Z>
					<R00>-0.329969108</R00>
					<R01>0.590623736</R01>
					<R02>-0.736399412</R02>
					<R10>-0</R10>
					<R11>0.780090988</R11>
					<R12>0.625666201</R12>
					<R20>0.94399178</R20>
					<R21>0.206450522</R21>
					<R22>-0.257405907</R22>
				</CoordinateFrame>
				<float name="FieldOfView">1.00000012</float>
				<CoordinateFrame name="Focus">
					<X>1.00528717</X>
					<Y>62.7830582</Y>
					<Z>0.624972701</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<string name="Name">ThumbnailCamera</string>
			</Properties>
		</Item>
		<Item class="Script" referent="RBX7A7775B4FECA459FA812FDDDB9857228">
			<Properties>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">Script</string>
				<ProtectedString name="Source"><![CDATA[--Made by Luckymaxer

Tool = script.Parent
Handle = Tool:WaitForChild("Handle")

Players = game:GetService("Players")
Debris = game:GetService("Debris")
InsertService = game:GetService("InsertService")

SpiderModel = InsertService:LoadAsset(285590061)
Spider = SpiderModel:GetChildren()[1]:Clone()
Debris:AddItem(SpiderModel, 1)

CobWebShot = script:WaitForChild("CobWebShot")

RbxUtility = LoadLibrary("RbxUtility")
Create = RbxUtility.Create

Remover = script:WaitForChild("Remover")

NPCModule = require(191816425)

BaseUrl = "http://www.roblox.com/asset/?id="

Sounds = {}

BasePart = Create("Part"){
	Shape = Enum.PartType.Block,
	Material = Enum.Material.Plastic,
	TopSurface = Enum.SurfaceType.Smooth,
	BottomSurface = Enum.SurfaceType.Smooth,
	FormFactor = Enum.FormFactor.Custom,
	Size = Vector3.new(0.2, 0.2, 0.2),
	CanCollide = true,
	Locked = true,
	Anchored = false,
}

ReloadTime = 10
Duration = (60 * 0.75)

SpidersSpawned = false
SpidersReady = false

CurrentSpiders = {}

ToolEquipped = false

ServerControl = (Tool:FindFirstChild("ServerControl") or Create("RemoteFunction"){
	Name = "ServerControl",
	Parent = Tool,
})

ClientControl = (Tool:FindFirstChild("ClientControl") or Create("RemoteFunction"){
	Name = "ClientControl",
	Parent = Tool,
})

Handle.Transparency = 0
Tool.Enabled = true

function CreateSpiderModel()
	local SpiderModel = Create("Model"){
		Name = ToolName,
	}
	local CobWebShotScript = CobWebShot:Clone()
	CobWebShotScript.Disabled = false
	CobWebShotScript.Parent = SpiderModel
	local RemoverClone = Remover:Clone()
	local Values = {
		{Name = "Creator", Class = "ObjectValue", Value = Player},
		{Name = "Tool", Class = "ObjectValue", Value = Tool},
	}
	for i, v in pairs(Values) do
		local Value = Create(v.Class){
			Name = v.Name,
			Value = v.Value,
			Parent = SpiderModel,
		}
	end
	RemoverClone.Disabled = false
	RemoverClone.Parent = SpiderModel
	return SpiderModel
end

function SetUpSpider(Figure)
	NPCData.MakeNPC({NPC = Figure, AIControl = {Creator = Player, Mode = "Wander", MaxDistance = math.huge, Follow = nil, Offset = Vector3.new(0, 0, 0), Chase = true, ChaseDistance = 35, Target = nil, TargetPos = Vector3.new(0, 0, 0), Damage = 5, NormalSpeed = 12, ChaseSpeed = 17, SelfSufficient = false}})
	Figure.Name = "RobotSpider"
	local Humanoid = Figure:FindFirstChild("Humanoid")
	local Torso = Figure:FindFirstChild("Torso")
	if Humanoid and Torso then
		Humanoid.Died:connect(function()
			Debris:AddItem(Figure, 2)
		end)
		Humanoid.Jumping:connect(function()
		end)
		Figure.Changed:connect(function(Property)
			if Property == "Parent" and not Figure.Parent then
				Debris:AddItem(Figure, 2)
			end
		end)
	end
	return Figure
end

function SpawnSpiders()
	local Data = NPCModule.GetTable({Key = "MakeNPC", Player = Player})
	if not Data then
		return
	end
	NPCData = Data.GetData({Player = Player, Tool = Tool})
	SpidersReady = false
	CurrentSpiders = {}
	local SpiderModel = CreateSpiderModel()
	NPCData.MakeNPC({NPC = SpiderModel, AIControl = {Creator = Player, SelfSufficient = true}})
	local BaseNPC = SetUpSpider(Spider:Clone())
	SpiderModel.Changed:connect(function(Property)
		if Property == "Parent" and not SpiderModel.Parent then
			for i, v in pairs(CurrentSpiders) do
				if v and v.Parent then
					v:Destroy()
				end
			end
			CurrentSpiders = {}
			Tool.Enabled = false
			wait(ReloadTime)
			Tool.Enabled = true
			Handle.Transparency = 0
			SpidersSpawned = false
		end
	end)	
	Debris:AddItem(SpiderModel, Duration)
	SpiderModel.Parent = game:GetService("Workspace")
	local function CreatePawn()
		local SpiderCopy = BaseNPC:Clone()
		local SpiderHumanoid = SpiderCopy.Humanoid
		local SpiderTorso = SpiderCopy.Torso
		table.insert(CurrentSpiders, SpiderCopy)
		SpiderCopy.Changed:connect(function(Property)
			if Property == "Parent" and not SpiderCopy.Parent then
				for i, v in pairs(CurrentSpiders) do
					if v == SpiderCopy then
						table.remove(CurrentSpiders, i)
						if #CurrentSpiders == 0 then
							if SpiderModel and SpiderModel.Parent then
								Debris:AddItem(SpiderModel, 1)
								SpiderModel:Destroy()
							end
						end
					end
				end
			end
		end)
		local RandomOffset = Vector3.new(5, 0, 5)
		RandomOffset = (RandomOffset * 1000)
		RandomOffset = Vector3.new((math.random(-RandomOffset.X, RandomOffset.X) * 0.001), (math.random(-RandomOffset.Y, RandomOffset.Y) * 0.001), (math.random(-RandomOffset.Z, RandomOffset.Z) * 0.001))
		local OffsetValue = SpiderCopy.Offset
		OffsetValue.Value = RandomOffset
		SpiderCopy.Parent = SpiderModel
		SpiderTorso.CFrame = (Torso.CFrame * CFrame.new(OffsetValue.Value) - Vector3.new(0, 0.2, 0))
		SpiderHumanoid:ChangeState(Enum.HumanoidStateType.Freefall)
	end
	for i = 1, 6 do
		CreatePawn()
	end
	SpidersReady = true
end

function Activated()
	if not Tool.Enabled or not ToolEquipped then
		return
	end
	if not SpidersSpawned then
		local SpiderModel = game:GetService("Workspace"):FindFirstChild(ToolName)
		if SpiderModel then
			return
		end
		Handle.Transparency = 1
		SpidersSpawned = true
		SpawnSpiders()
	end
end

function CheckIfAlive()
	return (((Player and Player.Parent and Character and Character.Parent and Humanoid and Humanoid.Parent and Humanoid.Health > 0 and Torso and Torso.Parent) and true) or false)
end

function Equipped()
	Character = Tool.Parent
	Player = Players:GetPlayerFromCharacter(Character)
	Humanoid = Character:FindFirstChild("Humanoid")
	Torso = Character:FindFirstChild("Torso")
	if not CheckIfAlive() then
		return
	end
	ToolName = (Player.Name .. "'sRobotSpiders")
	ToolEquipped = true
end

function Unequipped()
	ToolEquipped = false
end

function InvokeClient(Mode, Value)
	local ClientReturn = nil
	pcall(function()
		ClientReturn = ClientControl:InvokeClient(Player, Mode, Value)
	end)
	return ClientReturn
end

function OnServerInvoke(player, Mode, Value)
	if player ~= Player or not ToolEquipped or not CheckIfAlive() or not Mode or not Value then
		return
	end
end

ServerControl.OnServerInvoke = OnServerInvoke

Tool.Changed:connect(function(Property)
	if Property == "Parent" and Tool.Parent then
		Handle.Transparency = (((Tool.Parent:IsA("Backpack") or Players:GetPlayerFromCharacter(Tool.Parent) and ((not SpidersSpawned and 0) or 1)) or 0))
	end
end)

Tool.Activated:connect(Activated)
Tool.Equipped:connect(Equipped)
Tool.Unequipped:connect(Unequipped)]]></ProtectedString>
			</Properties>
			<Item class="Script" referent="RBX7C2F56AF57E047EBB00F88B88D06ACD5">
				<Properties>
					<bool name="Disabled">true</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Remover</string>
					<ProtectedString name="Source"><![CDATA[--Made by Luckymaxer

Model = script.Parent

Players = game:GetService("Players")
Debris = game:GetService("Debris")

Creator = Model:FindFirstChild("Creator")
Tool = Model:FindFirstChild("Tool")

function DestroyModel()
	Debris:AddItem(Model, 2)
end

if not Creator or not Creator.Value or not Creator.Value:IsA("Player") or not Creator.Value.Parent or not Tool or not Tool.Value or not Tool.Value.Parent then
	DestroyModel()
	return
end

Creator = Creator.Value
Tool = Tool.Value

Character = Creator.Character
if not Character then
	DestroyModel()
	return
end

Creator.Changed:connect(function(Property)
	if Property == "Parent" and not Creator.Parent then
		DestroyModel()
	end
end)

Character.Changed:connect(function(Property)
	if Property == "Parent" and not Character.Parent then
		DestroyModel()
	end
end)

Tool.Changed:connect(function(Property)
	if Property == "Parent" and (not Tool.Parent or (not Tool.Parent:IsA("Backpack") and not Players:GetPlayerFromCharacter(Tool.Parent))) then
		DestroyModel()
	end
end)]]></ProtectedString>
				</Properties>
			</Item>
			<Item class="Script" referent="RBX5D1C8D840E2B43D4AD4B1CA61859C885">
				<Properties>
					<bool name="Disabled">true</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">CobWebShot</string>
					<ProtectedString name="Source"><![CDATA[--Made by Luckymaxer

Model = script.Parent

Players = game:GetService("Players")
Debris = game:GetService("Debris")

RbxUtility = LoadLibrary("RbxUtility")
Create = RbxUtility.Create

BaseUrl = "http://www.roblox.com/asset/?id="

Creator = Model:WaitForChild("Creator")

SpiderConfiguration = {
	Name = "RobotSpider",
	ShootDistance = {Min = 0, Max = 25},
	FireRate = {Min = 1.5, Max = 6},
	Accuracy = {X = {Min = -2, Max = 2}, Y = {Min = -2, Max = 2}, Z = {Min = -2, Max = 2}},
	FadeDelay = 0.375,
	FadeRate = (1 / 60),
	Damage = 10,
	Color = BrickColor.new("Really red"),
}

for i, v in pairs(SpiderConfiguration.FireRate) do
	SpiderConfiguration.FireRate[i] = (v * 1000)
end
for i, v in pairs(SpiderConfiguration.Accuracy) do
	for ii, vv in pairs(v) do
		SpiderConfiguration.Accuracy[i][ii] = (vv * 1000)
	end
end

SpidersControlled = false
Spiders = {}

BasePart = Create("Part"){
	Shape = Enum.PartType.Block,
	Material = Enum.Material.Plastic,
	TopSurface = Enum.SurfaceType.Smooth,
	BottomSurface = Enum.SurfaceType.Smooth,
	FormFactor = Enum.FormFactor.Custom,
	Size = Vector3.new(0.2, 0.2, 0.2),
	CanCollide = true,
	Locked = true,
	Anchored = false,
}

function GetCreator()
	local CreatorValue = Creator.Value
	return (((CreatorValue and CreatorValue.Parent and CreatorValue:IsA("Player")) and CreatorValue) or nil)
end

function IsTeamMate(Player1, Player2)
	return (Player1 and Player2 and not Player1.Neutral and not Player2.Neutral and Player1.TeamColor == Player2.TeamColor)
end

function TagHumanoid(humanoid, player)
	local Creator_Tag = Create("ObjectValue"){
		Name = "creator",
		Value = player,
	}
	Debris:AddItem(Creator_Tag, 2)
	Creator_Tag.Parent = humanoid
end

function UntagHumanoid(humanoid)
	for i, v in pairs(humanoid:GetChildren()) do
		if v:IsA("ObjectValue") and v.Name == "creator" then
			v:Destroy()
		end
	end
end

function CheckUpsideDown(CFrame, Surface, MaxAngle)
	local Vector1 = CFrame:vectorToWorldSpace(Vector3.FromNormalId(Surface))
	local Vector2 = Vector3.new(0, 1, 0)
	local Angle = math.acos(Vector1:Dot(Vector2))
	return (Angle > MaxAngle)
end

function CheckTableForString(Table, String)
	for i, v in pairs(Table) do
		if string.find(string.lower(String), string.lower(v)) then
			return true
		end
	end
	return false
end

function CheckIntangible(Hit)
	local ProjectileNames = {"Water", "Arrow", "Projectile", "Effect", "Rail", "Laser", "Bullet"}
	if Hit and Hit.Parent then
		if ((not Hit.CanCollide or Hit.Parent:IsA("Hat") or CheckTableForString(ProjectileNames, Hit.Name)) and not Hit.Parent:FindFirstChild("Humanoid")) then
			return true
		end
	end
	return false
end

function CastRay(StartPos, Vec, Length, Ignore, DelayIfHit)
	local Ignore = ((type(Ignore) == "table" and Ignore) or {Ignore})
	local RayHit, RayPos, RayNormal = game:GetService("Workspace"):FindPartOnRayWithIgnoreList(Ray.new(StartPos, Vec * Length), Ignore)
	if RayHit and CheckIntangible(RayHit) then
		if DelayIfHit then
			wait()
		end
		RayHit, RayPos, RayNormal = CastRay((RayPos + (Vec * 0.01)), Vec, (Length - ((StartPos - RayPos).magnitude)), Ignore, DelayIfHit)
	end
	return RayHit, RayPos, RayNormal
end

function SplatGui(Player)
	local Images = {297810825, 297810888, 297810987}
	if not Player or not Player:IsA("Player") then
		return
	end
	local PlayerGui = Player:FindFirstChild("PlayerGui")
	if not PlayerGui then
		return
	end
	local SplatGui = Create("ScreenGui"){
		Name = "SplatGui",
	}
	for i = 1, math.random(1, 3) do
		local Size = math.random(700, 1200)
		local Image = Create("ImageLabel"){
			Name = "Ink",
			BackgroundTransparency = 1,
			Size = UDim2.new(0, Size, 0, Size),
			Position = UDim2.new((math.random(-400, 450) * 0.001), 0, (math.random(-350, 400) * 0.001), 0),
			Image = (BaseUrl .. Images[math.random(1, #Images)]),
			Rotation = math.random(0, 360),
			Parent = SplatGui,
		}
	end
	Debris:AddItem(SplatGui, 5)
	SplatGui.Parent = PlayerGui
end

function ControlSpiders()
	if SpidersControlled or #Spiders == 0 then
		return
	end
	SpidersControlled = true
	while #Spiders > 0 do
		local CreatorPlayer = GetCreator()
		if CreatorPlayer then
			local Now = tick()
			for i, v in pairs(Spiders) do
				if v and v.Spider and v.Spider.Parent and v.Humanoid and v.Humanoid.Health > 0 and v.Torso and v.Torso.Parent then
					if (Now - v.CobWebs.Tick) >= v.CobWebs.Delay and not CheckUpsideDown(v.Torso.CFrame, Enum.NormalId.Top, (math.pi / 3)) then
						v.CobWebs.Tick = Now
						v.CobWebs.Delay = (math.random(SpiderConfiguration.FireRate.Min, SpiderConfiguration.FireRate.Max) * 0.001)
						if v.Target.Value then
							local TargetPlayer = nil
							local character = v.Target.Value
							if character and character.Parent then
								local player = Players:GetPlayerFromCharacter(character)
								if not player or (player and player ~= CreatorPlayer and not IsTeamMate(CreatorPlayer, player)) then
									local humanoid = character:FindFirstChild("Humanoid")
									local head = character:FindFirstChild("Head")
									if humanoid and humanoid.Health > 0 and head then
										local DistanceApart = (v.Torso.Position - head.Position).Magnitude
										if --[[DistanceApart >= SpiderConfiguration.ShootDistance.Min and]] DistanceApart <= SpiderConfiguration.ShootDistance.Max then
											TargetPlayer = {Player = player, Character = character, Humanoid = humanoid, Head = head, Distance = DistanceApart}
										end
									end
								end
							end
							if TargetPlayer then
								local SpawnPos = (v.Torso.CFrame * CFrame.new(0, -0.1, (-(v.Torso.Size.Z / 2) + 0.05))).p
								local TargetPos = TargetPlayer.Head.Position
								local Accuracy = SpiderConfiguration.Accuracy
								Accuracy = Vector3.new((math.random(Accuracy.X.Min, Accuracy.X.Max) * 0.001), (math.random(Accuracy.Y.Min, Accuracy.Y.Max) * 0.001), (math.random(Accuracy.Z.Min, Accuracy.Z.Max) * 0.001))
								TargetPos = (TargetPos + Accuracy)
								local Direction = CFrame.new(SpawnPos, TargetPos)
								local Distance = (SpawnPos - TargetPos).Magnitude
								local RayHit, RayPos, RayNormal = CastRay(SpawnPos, Direction.lookVector, (Distance + 5), {v.Spider, CreatorPlayer.Character}, false)
								local RayDistance = (SpawnPos - RayPos).Magnitude
								local CobString = BasePart:Clone()
								CobString.Name = "Effect"
								CobString.BrickColor = SpiderConfiguration.Color
								CobString.Size = Vector3.new(1, 1, 1)
								CobString.CanCollide = false
								CobString.Anchored = true
								local Mesh = Create("CylinderMesh"){
									Parent = CobString,
								}
								Debris:AddItem(CobString, 3)
								CobString.Parent = game:GetService("Workspace")
								CobString.CFrame = ((Direction + Direction.lookVector * (RayDistance / 2)) * CFrame.Angles((math.pi / 2), 0, 0))
								Mesh.Scale = Vector3.new(0.1, RayDistance, 0.1)
								Spawn(function()
									local Frames = math.floor(SpiderConfiguration.FadeDelay / SpiderConfiguration.FadeRate)
									for Frame = 1, Frames do
										wait(SpiderConfiguration.FadeRate)
										local Percent = (Frame / Frames)
										CobString.Transparency = Percent
									end
								end)
								if RayHit then
									local character = RayHit.Parent
									if character:IsA("Hat") then
										character = character.Parent
									end
									local player = Players:GetPlayerFromCharacter(character)
									local humanoid = character:FindFirstChild("Humanoid")
									local torso = character:FindFirstChild("Torso")
									if character == TargetPlayer.Character and humanoid and humanoid.Health > 0 and torso then
										local player = Players:GetPlayerFromCharacter(character)
										if player then
											SplatGui(TargetPlayer.Player)
										end
										UntagHumanoid(TargetPlayer.Humanoid)
										TagHumanoid(TargetPlayer.Humanoid, CreatorPlayer)
										TargetPlayer.Humanoid:TakeDamage(SpiderConfiguration.Damage)
										if TargetPlayer.Humanoid.Health <= 0 then
											local AshColors = {"Really black", "Black", "Dark stone grey", "White"}
											for i = 1, math.random(25, 50) do
												local Ashes = BasePart:Clone()
												Ashes.Name = "Ashes"
												Ashes.BrickColor = BrickColor.new(AshColors[math.random(1, #AshColors)])
												Ashes.Material = Enum.Material.Granite
												Ashes.Size = Vector3.new(0.5, 0.2, 0.5)
												Ashes.CFrame = (CFrame.new(torso.Position) * CFrame.new((math.random(-2000, 2000) * 0.001), (math.random(-2000, 2000) * 0.001), (math.random(-2000, 2000) * 0.001)) * CFrame.Angles(0, (math.random(-360, 360) * 0.01), 0))
												Debris:AddItem(Ashes, math.random(3, 5))
												Ashes.Parent = game:GetService("Workspace")
											end
											for i, v in pairs(character:GetChildren()) do
												if v:IsA("BasePart") or v:IsA("Hat") then
													v:Destroy()
												end
											end
										end
									end
								end
							end
						end
					end
				end
			end
		end
		wait(1.5)
	end
	SpidersControlled = false
end

function FunctionSpider(Child)
	if not Child:IsA("Model") or not string.find(string.lower(Child.Name), string.lower(SpiderConfiguration.Name)) then
		return
	end
	for i, v in pairs(Spiders) do
		if v and v.Spider and v.Spider == Child then
			return
		end
	end
	local Spider = Child
	local Humanoid = Spider:FindFirstChild("Humanoid")
	local Torso = Spider:FindFirstChild("Torso")
	local Target = Spider:WaitForChild("Target")
	if not Humanoid or Humanoid.Health == 0 or not Torso or not Target then
		return
	end
	local CobWebDelay = (math.random(SpiderConfiguration.FireRate.Min, SpiderConfiguration.FireRate.Max) * 0.001)
	local Table = {
		Spider = Child,
		Humanoid = Humanoid,
		Torso = Torso,
		Target = Target,
		CobWebs = {Tick = tick(), Delay = CobWebDelay},
	}
	table.insert(Spiders, Table)
	ControlSpiders()
end

for i, v in pairs(Model:GetChildren()) do
	FunctionSpider(v)
end

Model.ChildAdded:connect(function(Child)
	FunctionSpider(Child)
end)

Model.ChildRemoved:connect(function(Child)
	for i, v in pairs(Spiders) do
		if v and v.Spider and v.Spider == Child then
			table.remove(Spiders, i)
			break
		end
	end
end)

ControlSpiders()]]></ProtectedString>
				</Properties>
			</Item>
		</Item>
	</Item>
</roblox>