<roblox xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.roblox.com/roblox.xsd" version="4">
	<External>null</External>
	<External>nil</External>
	<Item class="Tool" referent="RBX6DEA0D36A39C4D34914C9EC6ACF60323">
		<Properties>
			<bool name="CanBeDropped">true</bool>
			<bool name="Enabled">true</bool>
			<CoordinateFrame name="Grip">
				<X>0.600000024</X>
				<Y>-0.200000003</Y>
				<Z>0</Z>
				<R00>-0.0451075621</R00>
				<R01>0.305460036</R01>
				<R02>0.951135874</R02>
				<R10>-0.941444397</R10>
				<R11>0.305460036</R11>
				<R12>-0.142747313</R12>
				<R20>-0.334137619</R20>
				<R21>-0.901880443</R21>
				<R22>0.273795068</R22>
			</CoordinateFrame>
			<bool name="ManualActivationOnly">false</bool>
			<string name="Name">RadicalSnowboard</string>
			<bool name="RequiresHandle">true</bool>
			<Content name="TextureId"><url>http://www.roblox.com/asset/?id=325541800</url></Content>
			<string name="ToolTip"></string>
		</Properties>
		<Item class="Part" referent="RBXDFD132B40CE949EE90CD504947D26D05">
			<Properties>
				<bool name="Anchored">false</bool>
				<float name="BackParamA">-0.5</float>
				<float name="BackParamB">0.5</float>
				<token name="BackSurface">0</token>
				<token name="BackSurfaceInput">0</token>
				<float name="BottomParamA">-0.5</float>
				<float name="BottomParamB">0.5</float>
				<token name="BottomSurface">0</token>
				<token name="BottomSurfaceInput">0</token>
				<int name="BrickColor">194</int>
				<CoordinateFrame name="CFrame">
					<X>0.00470199995</X>
					<Y>17.3278847</Y>
					<Z>22.0153236</Z>
					<R00>0.119265698</R00>
					<R01>0.510307908</R01>
					<R02>-0.851681173</R02>
					<R10>0.226697937</R10>
					<R11>0.821147382</R11>
					<R12>0.523759544</R12>
					<R20>0.966635525</R20>
					<R21>-0.255541772</R21>
					<R22>-0.0177512802</R22>
				</CoordinateFrame>
				<bool name="CanCollide">true</bool>
				<PhysicalProperties name="CustomPhysicalProperties">
					<CustomPhysics>false</CustomPhysics>
				</PhysicalProperties>
				<float name="Elasticity">0.5</float>
				<float name="Friction">0.300000012</float>
				<float name="FrontParamA">-0.5</float>
				<float name="FrontParamB">0.5</float>
				<token name="FrontSurface">0</token>
				<token name="FrontSurfaceInput">0</token>
				<float name="LeftParamA">-0.5</float>
				<float name="LeftParamB">0.5</float>
				<token name="LeftSurface">0</token>
				<token name="LeftSurfaceInput">0</token>
				<bool name="Locked">true</bool>
				<token name="Material">256</token>
				<string name="Name">Handle</string>
				<float name="Reflectance">0</float>
				<float name="RightParamA">-0.5</float>
				<float name="RightParamB">0.5</float>
				<token name="RightSurface">0</token>
				<token name="RightSurfaceInput">0</token>
				<Vector3 name="RotVelocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<float name="TopParamA">-0.5</float>
				<float name="TopParamB">0.5</float>
				<token name="TopSurface">0</token>
				<token name="TopSurfaceInput">0</token>
				<float name="Transparency">0</float>
				<Vector3 name="Velocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<token name="formFactorRaw">3</token>
				<token name="shape">1</token>
				<Vector3 name="size">
					<X>2</X>
					<Y>0.400000006</Y>
					<Z>8</Z>
				</Vector3>
			</Properties>
			<Item class="Sound" referent="RBXEB74C5FC600745FA8633181DE41B7CE5">
				<Properties>
					<bool name="Looped">false</bool>
					<float name="MaxDistance">0</float>
					<float name="MinDistance">0</float>
					<string name="Name">Drop</string>
					<float name="Pitch">1</float>
					<bool name="PlayOnRemove">false</bool>
					<Content name="SoundId"><url>http://www.roblox.com/asset/?id=10548108</url></Content>
					<float name="Volume">1</float>
				</Properties>
			</Item>
			<Item class="SpecialMesh" referent="RBXF74EE92098624A72BEA7876076B54185">
				<Properties>
					<token name="LODX">2</token>
					<token name="LODY">2</token>
					<Content name="MeshId"><url>http://www.roblox.com/asset/?id=325541753</url></Content>
					<token name="MeshType">5</token>
					<string name="Name">Mesh</string>
					<Vector3 name="Offset">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<Vector3 name="Scale">
						<X>2</X>
						<Y>2</Y>
						<Z>2.125</Z>
					</Vector3>
					<Content name="TextureId"><url>http://www.roblox.com/asset/?id=325541830 </url></Content>
					<Vector3 name="VertexColor">
						<X>1</X>
						<Y>1</Y>
						<Z>1</Z>
					</Vector3>
				</Properties>
			</Item>
		</Item>
		<Item class="LocalScript" referent="RBX9D2ACA140604411380F9C6FAE611B2DA">
			<Properties>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">MouseIcon</string>
				<ProtectedString name="Source"><![CDATA[--Made by Luckymaxer

Mouse_Icon = "rbxasset://textures/GunCursor.png"
Reloading_Icon = "rbxasset://textures/GunWaitCursor.png"

Tool = script.Parent

Mouse = nil

function UpdateIcon()
	if Mouse then
		Mouse.Icon = Tool.Enabled and Mouse_Icon or Reloading_Icon
	end
end

function OnEquipped(ToolMouse)
	Mouse = ToolMouse
	UpdateIcon()
end

function OnChanged(Property)
	if Property == "Enabled" then
		UpdateIcon()
	end
end

Tool.Equipped:connect(OnEquipped)
Tool.Changed:connect(OnChanged)]]></ProtectedString>
			</Properties>
		</Item>
		<Item class="LocalScript" referent="RBX741858AA65B7453189D1E10EB65A5E60">
			<Properties>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">LocalScript</string>
				<ProtectedString name="Source"><![CDATA[--Made by Luckymaxer

Tool = script.Parent
Handle = Tool:WaitForChild("Handle")

Players = game:GetService("Players")

RemoteControl = Tool:WaitForChild("RemoteControl")

ServerControl = RemoteControl:WaitForChild("ServerControl")
ClientControl = RemoteControl:WaitForChild("ClientControl")

ToolEquipped = false
MouseControls = {}

ClientControl.OnClientInvoke = (function(Mode, Value)
	if Mode == "PlaySound" and Value then
		Value:Play()
	elseif Mode == "PlaySound" and Value then
		Value:Play()
	elseif Mode == "MousePosition" then
		return PlayerMouse.Hit.p
	end
end)

function InvokeServer(Mode, Value)
	local ServerReturn = nil
	pcall(function()
		ServerReturn = ServerControl:InvokeServer(Mode, Value)
	end)
	return ServerReturn
end

function CheckIfAlive()
	return (((Player and Player.Parent and Humanoid and Humanoid.Parent and Humanoid.Health > 0) and true) or false)
end

function Equipped(Mouse)
	Character = Tool.Parent
	Player = Players:GetPlayerFromCharacter(Character)
	Humanoid = Character:FindFirstChild("Humanoid")
	ToolEquipped = true
	if not CheckIfAlive() then
		return
	end
	PlayerMouse = Mouse
	for i, v in pairs(MouseControls) do
		if v then
			v:disconnect()
		end
	end
	MouseControls = {}
	MouseDown = PlayerMouse.Button1Down:connect(function()
		InvokeServer("MouseClick", {Down = true})
	end)
	MouseUp = PlayerMouse.Button1Up:connect(function()
		InvokeServer("MouseClick", {Down = false})
	end)
end

function Unequipped()
	ToolEquipped = false
	for i, v in pairs(MouseControls) do
		if v then
			v:disconnect()
		end
	end
	MouseControls = {}
end

Tool.Equipped:connect(Equipped)
Tool.Unequipped:connect(Unequipped)]]></ProtectedString>
			</Properties>
		</Item>
		<Item class="Configuration" referent="RBX2A77408675034715984F8E02A9FC01BC">
			<Properties>
				<string name="Name">RemoteControl</string>
			</Properties>
			<Item class="RemoteFunction" referent="RBX3BD15696111C4156B1BA3E861C239252">
				<Properties>
					<string name="Name">ServerControl</string>
				</Properties>
			</Item>
			<Item class="RemoteFunction" referent="RBXBBEEB7D97A43434F883BF0B440695BA7">
				<Properties>
					<string name="Name">ClientControl</string>
				</Properties>
			</Item>
		</Item>
		<Item class="Configuration" referent="RBXB62D65175EAD4ED5922A7B61349F8DA9">
			<Properties>
				<string name="Name">AddOns</string>
			</Properties>
			<Item class="Color3Value" referent="RBXDF01D58C19154DC9A6753328E619B28D">
				<Properties>
					<string name="Name">DisplayColor</string>
					<Color3 name="Value">4278255487</Color3>
				</Properties>
			</Item>
			<Item class="BoolValue" referent="RBX14E194FD0AA24EE98062A02594EF831D">
				<Properties>
					<string name="Name">SparklesEnabled</string>
					<bool name="Value">false</bool>
				</Properties>
			</Item>
		</Item>
		<Item class="Camera" referent="RBXF7D06D89F9B9481C8162C15403F20BAB">
			<Properties>
				<Ref name="CameraSubject">null</Ref>
				<token name="CameraType">0</token>
				<CoordinateFrame name="CoordinateFrame">
					<X>2.10300279</X>
					<Y>19.869194</Y>
					<Z>18.9525681</Z>
					<R00>-0.829083681</R00>
					<R01>-0.340907425</R01>
					<R02>0.44317314</R02>
					<R10>-1.4901163e-008</R10>
					<R11>0.792619646</R11>
					<R12>0.609716296</R12>
					<R20>-0.559124649</R20>
					<R21>0.50550586</R21>
					<R22>-0.657147944</R22>
				</CoordinateFrame>
				<float name="FieldOfView">70</float>
				<CoordinateFrame name="Focus">
					<X>1.3052932</X>
					<Y>18.7717075</Y>
					<Z>20.1354313</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<string name="Name">ThumbnailCamera</string>
			</Properties>
		</Item>
		<Item class="Script" referent="RBX459F21BBBA2A430BADA0D8AECCDD56F9">
			<Properties>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">Script</string>
				<ProtectedString name="Source"><![CDATA[--Made by Luckymaxer

Tool = script.Parent
Handle = Tool:WaitForChild("Handle")
Mesh = Handle:WaitForChild("Mesh")

Players = game:GetService("Players")
Debris = game:GetService("Debris")

RemoteControl = Tool:WaitForChild("RemoteControl")

ServerControl = (RemoteControl:FindFirstChild("ServerControl") or Instance.new("RemoteFunction"))
ServerControl.Name = "ServerControl"
ServerControl.Parent = RemoteControl

ClientControl = (RemoteControl:FindFirstChild("ClientControl") or Instance.new("RemoteFunction"))
ClientControl.Name = "ClientControl"
ClientControl.Parent = RemoteControl

SkateboardModule = require(199238756)
SkateboardFunctions = SkateboardModule.SkateboardFunctions
Functions = SkateboardModule.Functions

Skateboard = SkateboardFunctions.GetSkateboard("Snowboard")
SkateboardFunctions.CreateConfiguration(Tool, Skateboard)
SkateboardPlatform = SkateboardFunctions.GetSkateboardPlatform(Skateboard)

Sounds = {
	Drop = Handle:WaitForChild("Drop")
}

ToolEquipped = false
ToolEnabled = true

Tool.Enabled = true

ServerControl.OnServerInvoke = (function(player, Mode, Value)
end)

function InvokeClient(Mode, Value)
	local ClientReturn = nil
	pcall(function()
		ClientReturn = ClientControl:InvokeClient(Player, Mode, Value)
	end)
	return ClientReturn
end

function DropSkateboard()
	
	local MousePosition = InvokeClient("MousePosition")
	
	local DesiredAngle = (math.acos((MousePosition - Handle.Position).unit:Dot(Torso.CFrame.lookVector)))
	if DesiredAngle > (math.pi / 2) then --Prevents spawning behind character.
		--return
	end
	
	local SkateboardSize = Skateboard:GetModelSize()	
	
	local Direction = CFrame.new(Torso.Position, Vector3.new(MousePosition.X, Torso.Position.Y, MousePosition.Z))
	local SkateboardCFrame = Direction + Direction.lookVector * (((Torso.Size.Z / 2) + (SkateboardSize.Z / 2)) * 1.5)
	local SkateboardAngle = CFrame.Angles(0, 0, 0)
	
	local RayOffset = Vector3.new(-1.5, 0, -1.5)
	
	local RayPoints = { --Border points and center of skateboard used for casting rays.
		Center = Functions.PositionPart(SkateboardCFrame, 0, 0, 0),
		BackLeft = Functions.PositionPart(SkateboardCFrame, -((SkateboardSize.X / 2) + RayOffset.X), RayOffset.Y, -((SkateboardSize.Z / 2) + RayOffset.Z)),
		BackRight = Functions.PositionPart(SkateboardCFrame, ((SkateboardSize.X / 2) + RayOffset.X), RayOffset.Y, -((SkateboardSize.Z / 2) + RayOffset.Z)),
		FrontLeft = Functions.PositionPart(SkateboardCFrame, -((SkateboardSize.X / 2) + RayOffset.X), RayOffset.Y, ((SkateboardSize.Z / 2) + RayOffset.Z)),
		FrontRight = Functions.PositionPart(SkateboardCFrame, ((SkateboardSize.X / 2) + RayOffset.X), RayOffset.Y, ((SkateboardSize.Z / 2) + RayOffset.Z)),
	}
	
	local RayData = {
		Area = { --Cast ray to determine if skateboard will spawn inside something.
			Offset = Vector3.new(0, (SkateboardSize.Y / 2), 0),
			Direction = Vector3.new(0, 1, 0),
			Distance = SkateboardSize.Y
		},
		Ground = { --Cast ray to determine if the skateboard can spawn on the ground.
			Direction = Vector3.new(0, -1, 0),
			Distance = (SkateboardSize.Y * 4)
		}
	}
	
	local Ignore = {Character, Skateboard}
	
	local HighestGroundRayHit, HighestGroundRayPos --Get the highest point of elevation to spawn the skateboard.
	for i, v in pairs(RayPoints) do
		local GroundRayHit, GroundRayPos = Functions.RayCast(v.p, RayData.Ground.Direction, RayData.Ground.Distance, Ignore)
		if not HighestGroundRayPos or GroundRayPos.Y > HighestGroundRayPos.Y then
			HighestGroundRayHit, HighestGroundRayPos = GroundRayHit, GroundRayPos
		end
	end	
	
	local FullAreaIsEmpty = true --Ensure entire area is empty.
	for i, v in pairs(RayPoints) do
		local AreaIsEmpty = Functions.RegionEmpty((v.p - RayData.Area.Offset), {Min = Vector3.new(0, 0, 0), Max = (RayData.Area.Direction * RayData.Area.Distance)}, Ignore)
		if not AreaIsEmpty then
			FullAreaIsEmpty = false
		end
	end
	
	if not HighestGroundRayHit then
		HighestGroundRayPos = (SkateboardCFrame - Vector3.new(0, 3, 0)).p
	end	
	
	if not FullAreaIsEmpty then
		return
	end
	
	ToolEnabled = false
	
	local PosX, PosY, PosZ, R00, R01, R02, R10, R11, R12, R20, R21, R22 = SkateboardCFrame:components()
	SkateboardCFrame = CFrame.new(PosX, (HighestGroundRayPos.Y + (SkateboardSize.Y / 2)), PosZ, R00, R01, R02, R10, R11, R12, R20, R21, R22)
	
	InvokeClient("PlaySound", Sounds.Drop)
	
	Tool.Parent = nil
	
	SkateboardFunctions.SpawnSkateboard(Skateboard, (SkateboardCFrame * SkateboardAngle))

	Debris:AddItem(Tool, 0)	
	Tool:Destroy()
	
end

function CheckIfAlive()
	return (((Player and Player.Parent and Character and Character.Parent and Humanoid and Humanoid.Parent and Humanoid.Health > 0 and Torso and Torso.Parent) and true) or false)
end

function Activated()
	if not ToolEquipped or not ToolEnabled or not CheckIfAlive() then
		return
	end
	DropSkateboard()
end

function Equipped()
	Character = Tool.Parent
	Player = Players:GetPlayerFromCharacter(Character)
	Humanoid = Character:FindFirstChild("Humanoid")
	Torso = Character:FindFirstChild("Torso")
	if not CheckIfAlive() then
		return
	end
	ToolEquipped = true
end

function Unequipped()
	ToolEquipped = false
end

Tool.Activated:connect(Activated)
Tool.Equipped:connect(Equipped)
Tool.Unequipped:connect(Unequipped)]]></ProtectedString>
			</Properties>
		</Item>
	</Item>
</roblox>