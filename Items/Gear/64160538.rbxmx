<roblox xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.roblox.com/roblox.xsd" version="4">
	<External>null</External>
	<External>nil</External>
	<Item class="Tool" referent="RBXA51A2A2BEC0D4CD2B9881AF36CC323C2">
		<Properties>
			<bool name="CanBeDropped">true</bool>
			<bool name="Enabled">true</bool>
			<CoordinateFrame name="Grip">
				<X>0</X>
				<Y>0</Y>
				<Z>-0.5</Z>
				<R00>1</R00>
				<R01>0</R01>
				<R02>0</R02>
				<R10>0</R10>
				<R11>0</R11>
				<R12>-1</R12>
				<R20>0</R20>
				<R21>1</R21>
				<R22>0</R22>
			</CoordinateFrame>
			<bool name="ManualActivationOnly">false</bool>
			<string name="Name">GhostInvisibilityElixir</string>
			<bool name="RequiresHandle">true</bool>
			<Content name="TextureId"><url>http://www.roblox.com/asset/?id=64134180</url></Content>
			<string name="ToolTip"></string>
		</Properties>
		<Item class="Part" referent="RBX1ED3D5252181428E8724351903E5777B">
			<Properties>
				<bool name="Anchored">false</bool>
				<float name="BackParamA">-0.5</float>
				<float name="BackParamB">0.5</float>
				<token name="BackSurface">0</token>
				<token name="BackSurfaceInput">0</token>
				<float name="BottomParamA">-0.5</float>
				<float name="BottomParamB">0.5</float>
				<token name="BottomSurface">4</token>
				<token name="BottomSurfaceInput">0</token>
				<int name="BrickColor">194</int>
				<CoordinateFrame name="CFrame">
					<X>0.00194500003</X>
					<Y>17.3246117</Y>
					<Z>22.0153809</Z>
					<R00>0.941728473</R00>
					<R01>0.336281657</R01>
					<R02>0.00790444948</R02>
					<R10>-1.39039112e-014</R10>
					<R11>-0.0234989505</R11>
					<R12>0.999723792</R12>
					<R20>0.336374551</R20>
					<R21>-0.941468477</R21>
					<R22>-0.0221296344</R22>
				</CoordinateFrame>
				<bool name="CanCollide">true</bool>
				<float name="Elasticity">0.5</float>
				<float name="Friction">0.300000012</float>
				<float name="FrontParamA">-0.5</float>
				<float name="FrontParamB">0.5</float>
				<token name="FrontSurface">0</token>
				<token name="FrontSurfaceInput">0</token>
				<float name="LeftParamA">-0.5</float>
				<float name="LeftParamB">0.5</float>
				<token name="LeftSurface">0</token>
				<token name="LeftSurfaceInput">0</token>
				<bool name="Locked">true</bool>
				<token name="Material">256</token>
				<string name="Name">Handle</string>
				<float name="Reflectance">0</float>
				<float name="RightParamA">-0.5</float>
				<float name="RightParamB">0.5</float>
				<token name="RightSurface">0</token>
				<token name="RightSurfaceInput">0</token>
				<Vector3 name="RotVelocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<float name="TopParamA">-0.5</float>
				<float name="TopParamB">0.5</float>
				<token name="TopSurface">3</token>
				<token name="TopSurfaceInput">0</token>
				<float name="Transparency">0</float>
				<Vector3 name="Velocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<token name="formFactorRaw">3</token>
				<token name="shape">1</token>
				<Vector3 name="size">
					<X>0.5</X>
					<Y>0.50000006</Y>
					<Z>1.1400038</Z>
				</Vector3>
			</Properties>
			<Item class="SpecialMesh" referent="RBX3697DAB1E15C469099B25344B3DD2338">
				<Properties>
					<token name="LODX">2</token>
					<token name="LODY">2</token>
					<Content name="MeshId"><url>http://www.roblox.com/asset/?id=64131232</url></Content>
					<token name="MeshType">5</token>
					<string name="Name">Mesh</string>
					<Vector3 name="Offset">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<Vector3 name="Scale">
						<X>1</X>
						<Y>1</Y>
						<Z>1</Z>
					</Vector3>
					<Content name="TextureId"><url>http://www.roblox.com/asset/?id=64131272</url></Content>
					<Vector3 name="VertexColor">
						<X>1</X>
						<Y>1</Y>
						<Z>1</Z>
					</Vector3>
				</Properties>
			</Item>
		</Item>
		<Item class="Animation" referent="RBXB3404DE4E1C54656ADD7A2B2DA35A1B4">
			<Properties>
				<Content name="AnimationId"><url>http://www.roblox.com/asset/?id=55306564</url></Content>
				<string name="Name">Drink</string>
			</Properties>
		</Item>
		<Item class="LocalScript" referent="RBX9883332D259B4DB0917A385604EE1C3F">
			<Properties>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">MouseIcon</string>
				<ProtectedString name="Source"><![CDATA[--Made by Luckymaxer

Mouse_Icon = "rbxasset://textures/GunCursor.png"
Reloading_Icon = "rbxasset://textures/GunWaitCursor.png"

Tool = script.Parent

Mouse = nil

function UpdateIcon()
	if Mouse then
		Mouse.Icon = Tool.Enabled and Mouse_Icon or Reloading_Icon
	end
end

function OnEquipped(ToolMouse)
	Mouse = ToolMouse
	UpdateIcon()
end

function OnChanged(Property)
	if Property == "Enabled" then
		UpdateIcon()
	end
end

Tool.Equipped:connect(OnEquipped)
Tool.Changed:connect(OnChanged)
]]></ProtectedString>
			</Properties>
		</Item>
		<Item class="LocalScript" referent="RBXE9471A3DF4F3470A8583CEB2FEC6EFEA">
			<Properties>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">LocalScript</string>
				<ProtectedString name="Source"><![CDATA[--Made by Luckymaxer

Tool = script.Parent
Handle = Tool:WaitForChild("Handle")

Players = game:GetService("Players")
RunService = game:GetService("RunService")

Animations = {}

ServerControl = Tool:WaitForChild("ServerControl")
ClientControl = Tool:WaitForChild("ClientControl")

Rate = (1 / 60)

ToolEquipped = false

function SetAnimation(mode, value)
	if mode == "PlayAnimation" and value and ToolEquipped and Humanoid then
		for i, v in pairs(Animations) do
			if v.Animation == value.Animation then
				v.AnimationTrack:Stop()
				table.remove(Animations, i)
			end
		end
		local AnimationTrack = Humanoid:LoadAnimation(value.Animation)
		table.insert(Animations, {Animation = value.Animation, AnimationTrack = AnimationTrack})
		AnimationTrack:Play(value.FadeTime, value.Weight, value.Speed)
	elseif mode == "StopAnimation" and value then
		for i, v in pairs(Animations) do
			if v.Animation == value.Animation then
				v.AnimationTrack:Stop(value.FadeTime)
				table.remove(Animations, i)
			end
		end
	end
end

function CheckIfAlive()
	return (((Character and Character.Parent and Humanoid and Humanoid.Parent and Humanoid.Health > 0 and Player and Player.Parent) and true) or false)
end

function Equipped(Mouse)
	Character = Tool.Parent
	Player = Players:GetPlayerFromCharacter(Character)
	Humanoid = Character:FindFirstChild("Humanoid")
	ToolEquipped = true
	if not CheckIfAlive() then
		return
	end
	Spawn(function()
		PlayerMouse = Mouse
		Mouse.Button1Down:connect(function()
			InvokeServer("Button1Click", {Down = true})
		end)
		Mouse.Button1Up:connect(function()
			InvokeServer("Button1Click", {Down = false})
		end)
		Mouse.KeyDown:connect(function(Key)
			InvokeServer("KeyPress", {Key = Key, Down = true})
		end)
		Mouse.KeyUp:connect(function(Key)
			InvokeServer("KeyPress", {Key = Key, Down = false})
		end)
	end)
end

function Unequipped()
	for i, v in pairs(Animations) do
		if v and v.AnimationTrack then
			v.AnimationTrack:Stop()
		end
	end
	Animations = {}
	ToolEquipped = false
end

function InvokeServer(mode, value)
	pcall(function()
		local ServerReturn = ServerControl:InvokeServer(mode, value)
		return ServerReturn
	end)
end

function OnClientInvoke(mode, value)
	if mode == "PlayAnimation" and value and ToolEquipped and Humanoid then
		SetAnimation("PlayAnimation", value)
	elseif mode == "StopAnimation" and value then
		SetAnimation("StopAnimation", value)
	elseif mode == "PlaySound" and value then
		value:Play()
	elseif mode == "StopSound" and value then
		value:Stop()
	elseif mode == "MousePosition" then
		return ((PlayerMouse and {Position = PlayerMouse.Hit.p, Target = PlayerMouse.Target}) or nil)
	end
end

ClientControl.OnClientInvoke = OnClientInvoke
Tool.Equipped:connect(Equipped)
Tool.Unequipped:connect(Unequipped)]]></ProtectedString>
			</Properties>
		</Item>
		<Item class="Camera" referent="RBXA4E17629445842F1BD2E037521BF97E2">
			<Properties>
				<Ref name="CameraSubject">null</Ref>
				<token name="CameraType">0</token>
				<CoordinateFrame name="CoordinateFrame">
					<X>0.704952598</X>
					<Y>17.5079212</Y>
					<Z>18.8377647</Z>
					<R00>-0.977821171</R00>
					<R01>-0.0124085722</R01>
					<R02>0.209073693</R02>
					<R10>-0</R10>
					<R11>0.998243392</R11>
					<R12>0.0592459701</R12>
					<R20>-0.209441632</R20>
					<R21>0.0579319634</R21>
					<R22>-0.976103485</R22>
				</CoordinateFrame>
				<float name="FieldOfView">20</float>
				<CoordinateFrame name="Focus">
					<X>-0.237967044</X>
					<Y>17.2407227</Y>
					<Z>23.2399788</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<string name="Name">ThumbnailCamera</string>
			</Properties>
		</Item>
		<Item class="Script" referent="RBX72525F5732464DD1AA0C40DE18D2DBD0">
			<Properties>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">PotionScript</string>
				<ProtectedString name="Source"><![CDATA[--Rescripted by Luckymaxer

Tool = script.Parent
Handle = Tool:WaitForChild("Handle")

Players = game:GetService("Players")
Debris = game:GetService("Debris")

InvisibilityScript = script:WaitForChild("InvisibilityScript")

RbxUtility = LoadLibrary("RbxUtility")
Create = RbxUtility.Create

Animations = {
	Drink = {Animation = Tool:WaitForChild("Drink"), FadeTime = nil, Weight = nil, Speed = nil, Duration = 1.5},
}

Duration = 20
ReloadTime = 5

ToolEquipped = false

ServerControl = (Tool:FindFirstChild("ServerControl") or Create("RemoteFunction"){
	Name = "ServerControl",
	Parent = Tool,
})

ClientControl = (Tool:FindFirstChild("ClientControl") or Create("RemoteFunction"){
	Name = "ClientControl",
	Parent = Tool,
})

Handle.Transparency = 0
Tool.Enabled = true

function Activated()
	if not Tool.Enabled or not ToolEquipped or not CheckIfAlive() then
		return
	end
	local InvisibilityScriptCopy = Character:FindFirstChild(InvisibilityScript.Name)
	local Invisible = Character:FindFirstChild("Invisible")
	if InvisibilityScriptCopy or Invisible then
		return
	end
	Tool.Enabled = false
	Invisible = Create("BoolValue"){
		Name = "Invisible",
		Value = true,
	}
	Debris:AddItem(Invisible, (Duration + 2))
	Invisible.Parent = Character
	for i, v in pairs({ToolUnequipped2}) do
		if v then
			v:disconnect()
		end
	end
	local CurrentlyEquipped = true
	ToolUnequipped2 = Tool.Unequipped:connect(function()
		CurrentlyEquipped = false
	end)
	local Animation = Animations.Drink
	Spawn(function()
		InvokeClient("PlayAnimation", Animation)
	end)
	wait(Animation.Duration)
	if CurrentlyEquipped then
		local Values = {
			{Name = "Creator", Class = "ObjectValue", Value = Player},
			{Name = "Tool", Class = "ObjectValue", Value = Tool},
			{Name = "Invisible", Class = "BoolValue", Value = false},
			{Name = "Duration", Class = "NumberValue", Value = Duration},
		}
		InvisibilityScriptCopy = InvisibilityScript:Clone()
		for i, v in pairs(Values) do
			local Value = Create(v.Class){
				Name = v.Name,
				Value = v.Value,
				Parent = InvisibilityScriptCopy,
			}
		end
		InvisibilityScriptCopy.Disabled = false
		InvisibilityScriptCopy.Parent = Character
		InvisibilityScriptCopy.Invisible.Value = true
		wait(Duration)
		for i, v in pairs({ToolUnequipped2}) do
			if v then
				v:disconnect()
			end
		end
	end
	if ToolUnequipped2 then
		ToolUnequipped2:disconnect()
	end
	wait(ReloadTime)
	Tool.Enabled = true
end

function CheckIfAlive()
	return (((Player and Player.Parent and Character and Character.Parent and Humanoid and Humanoid.Parent and Humanoid.Health > 0 and Torso and Torso.Parent) and true) or false)
end

function Equipped()
	Character = Tool.Parent
	Player = Players:GetPlayerFromCharacter(Character)
	Humanoid = Character:FindFirstChild("Humanoid")
	Torso = Character:FindFirstChild("Torso")
	if not CheckIfAlive() then
		return
	end
	ToolEquipped = true
end

function Unequipped()
	for i, v in pairs({ToolUnequipped2}) do
		if v then
			v:disconnect()
		end
	end
	ToolEquipped = false
end

function InvokeClient(Mode, Value)
	local ClientReturn = nil
	pcall(function()
		ClientReturn = ClientControl:InvokeClient(Player, Mode, Value)
	end)
	return ClientReturn
end

ServerControl.OnServerInvoke = (function(player, Mode, Value)
	if player ~= Player or not ToolEquipped or not CheckIfAlive() or not Mode or not Value then
		return
	end
end)

Tool.Activated:connect(Activated)
Tool.Equipped:connect(Equipped)
Tool.Unequipped:connect(Unequipped)]]></ProtectedString>
			</Properties>
			<Item class="Script" referent="RBXE9E75EA9EE264223A9D65422EAC0DAD6">
				<Properties>
					<bool name="Disabled">true</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">InvisibilityScript</string>
					<ProtectedString name="Source"><![CDATA[--Rescripted by Luckymaxer

Character = script.Parent
Humanoid = Character:FindFirstChild("Humanoid")

Debris = game:GetService("Debris")

Creator = script:FindFirstChild("Creator")
Tool = script:FindFirstChild("Tool")
Invisible = script:FindFirstChild("Invisible")
Duration = script:FindFirstChild("Duration")

TransparentObjects = {}
Disabled = false

function DestroyScript()
	Disabled = true
	ResetTransparency()
	Debris:AddItem(script, 0.5)
	script:Destroy()
end

function CheckIfAlive()
	return (((Character and Character.Parent and Humanoid and Humanoid.Parent and Humanoid.Health > 0) and true) or false)
end

function CheckTableForString(Table, String)
	for i, v in pairs(Table) do
		if string.lower(v) == string.lower(String) then
			return true
		end
	end
	return false
end

function ResetTransparency(Object)
	local PartNames = {"Head", "Torso", "Left Arm", "Right Arm", "Left Leg", "Right Leg"}
	if not Object then
		for i, v in pairs({DescendantAdded, DescendantRemoving}) do
			if v then
				v:disconnect()
			end
		end
		for i, v in pairs(TransparentObjects) do
			v.Object.Transparency = ((CheckTableForString(PartNames, v.Object.Name) and 0) or v.Transparency)
		end
		TransparentObjects = {}
	else
		local Objects = GetAllObjectsWithProperty(Object, "Transparency", "number")
		for i, v in pairs(TransparentObjects) do
			for ii, vv in pairs(Objects) do
				if v.Object == vv then
					v.Object.Transparency = ((CheckTableForString(PartNames, v.Object.Name) and 0) or v.Transparency)
					table.remove(TransparentObjects, i)
					break
				end
			end
		end
	end
end

function GetAllObjectsWithProperty(Parent, Property, Type)
	local Objects = {}
	local function GetObjects(Parent)
		for i, v in pairs(Parent:GetChildren()) do
			local PropertyExists = false
			pcall(function()
				local Property = v[Property]
				if type(Property) == Type then
					PropertyExists = true
				end
			end)
			if PropertyExists then
				table.insert(Objects, v)
			end
			GetObjects(v)
		end
	end
	GetObjects(Parent)
	return Objects
end

function GetTransparentObjects(Parent)
	local Objects = {}
	local IgnoreObjects = {"HumanoidRootPart"}
	for i, v in pairs(GetAllObjectsWithProperty(Parent, "Transparency", "number")) do
		table.insert(Objects, v)
	end
	for i, v in pairs(Objects) do
		if CheckTableForString(IgnoreObjects, v.Name) then
			table.remove(Objects, i)
		end
	end
	return Objects
end

function SetTransparency(Parent, Transparent, Delay, FadeRate)
	local Objects = {}
	local FadeRate = (FadeRate or 0.1)
	if type(Parent) == "table" then
		Objects = Parent
	else
		for i, v in pairs(GetTransparentObjects(Parent)) do
			table.insert(Objects, {Object = v, Transparency = v.Transparency})
		end
	end
	--Spawn(function()
		if Delay then
			local AllAltered = false
			while not AllAltered and CheckIfAlive() do
				local AllCurrentlyAltered = true
				for i, v in pairs(Objects) do
					if ((Transparent and v.Object.Transparency < 1) or (not Transparent and v.Object.Transparency > v.Transparency)) then
						v.Object.Transparency = (v.Object.Transparency + (FadeRate * ((Transparent and 1) or -1)))
						AllCurrentlyAltered = false
					end
				end
				if AllCurrentlyAltered then
					AllAltered = true
				end
				wait()
			end
		end
		if not CheckIfAlive() then
			return
		end
		for i, v in pairs(Objects) do
			if Transparent then
				v.Object.Transparency = 1
			else
				ResetTransparency(v.Object)
			end
		end
	--end)
	return Objects
end

if not CheckIfAlive() or not Creator or not Tool or not Invisible or not Duration then
	DestroyScript()
	return
end

Invisible.Changed:connect(function()
	if Disabled then
		return
	end
	ResetTransparency()
	for i, v in pairs({DescendantAdded, DescendantRemoving}) do
		if v then
			v:disconnect()
		end
	end
	if Invisible.Value then
		Humanoid.DisplayDistanceType = Enum.HumanoidDisplayDistanceType.None
		Humanoid.WalkSpeed = 22
		TransparentObjects = SetTransparency(Character, Invisible.Value, true)
		DescendantAdded = Character.DescendantAdded:connect(function(Child)
			local Objects = SetTransparency(Child, true, false)
			for i, v in pairs(Objects) do
				table.insert(TransparentObjects, v)
			end
		end)
		DescendantRemoving = Character.DescendantRemoving:connect(function(Child)
			ResetTransparency(Child)
		end)
	else
		Humanoid.DisplayDistanceType = Enum.HumanoidDisplayDistanceType.Viewer
		Humanoid.WalkSpeed = 16
		SetTransparency(TransparentObjects, false, true, 0.025)
	end
end)

wait(Duration.Value)

SetTransparency(TransparentObjects, false, true, 0.025)

DestroyScript()]]></ProtectedString>
				</Properties>
			</Item>
		</Item>
	</Item>
</roblox>