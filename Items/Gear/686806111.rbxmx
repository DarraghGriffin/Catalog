<roblox xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.roblox.com/roblox.xsd" version="4">
	<External>null</External>
	<External>nil</External>
	<Item class="Tool" referent="RBX35A3377F841C4318BF21616523203D4A">
		<Properties>
			<bool name="CanBeDropped">true</bool>
			<bool name="Enabled">true</bool>
			<CoordinateFrame name="Grip">
				<X>4.25</X>
				<Y>2.125</Y>
				<Z>-1.25</Z>
				<R00>1</R00>
				<R01>0</R01>
				<R02>0</R02>
				<R10>0</R10>
				<R11>1</R11>
				<R12>0</R12>
				<R20>0</R20>
				<R21>0</R21>
				<R22>1</R22>
			</CoordinateFrame>
			<bool name="ManualActivationOnly">false</bool>
			<string name="Name">BrainySmurf</string>
			<bool name="RequiresHandle">true</bool>
			<Content name="TextureId"><url>rbxassetid://686610253</url></Content>
			<string name="ToolTip"></string>
		</Properties>
		<Item class="Part" referent="RBX0C2F7F3BFF3444CB97F82D521DF8361F">
			<Properties>
				<bool name="Anchored">false</bool>
				<float name="BackParamA">-0.5</float>
				<float name="BackParamB">0.5</float>
				<token name="BackSurface">0</token>
				<token name="BackSurfaceInput">0</token>
				<float name="BottomParamA">-0.5</float>
				<float name="BottomParamB">0.5</float>
				<token name="BottomSurface">0</token>
				<token name="BottomSurfaceInput">0</token>
				<int name="BrickColor">194</int>
				<CoordinateFrame name="CFrame">
					<X>0.791595638</X>
					<Y>13.8823652</Y>
					<Z>22.5193195</Z>
					<R00>-0.526850402</R00>
					<R01>0.0175112728</R01>
					<R02>-0.849777699</R02>
					<R10>-1.45103723e-014</R10>
					<R11>0.999787748</R11>
					<R12>0.0206025131</R12>
					<R20>0.849958122</R20>
					<R21>0.0108544426</R21>
					<R22>-0.526738584</R22>
				</CoordinateFrame>
				<bool name="CanCollide">true</bool>
				<PhysicalProperties name="CustomPhysicalProperties">
					<CustomPhysics>false</CustomPhysics>
				</PhysicalProperties>
				<float name="Elasticity">0.5</float>
				<float name="Friction">0.300000012</float>
				<float name="FrontParamA">-0.5</float>
				<float name="FrontParamB">0.5</float>
				<token name="FrontSurface">0</token>
				<token name="FrontSurfaceInput">0</token>
				<float name="LeftParamA">-0.5</float>
				<float name="LeftParamB">0.5</float>
				<token name="LeftSurface">0</token>
				<token name="LeftSurfaceInput">0</token>
				<bool name="Locked">true</bool>
				<token name="Material">256</token>
				<string name="Name">Handle</string>
				<float name="Reflectance">0</float>
				<float name="RightParamA">-0.5</float>
				<float name="RightParamB">0.5</float>
				<token name="RightSurface">0</token>
				<token name="RightSurfaceInput">0</token>
				<Vector3 name="RotVelocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<float name="TopParamA">-0.5</float>
				<float name="TopParamB">0.5</float>
				<token name="TopSurface">0</token>
				<token name="TopSurfaceInput">0</token>
				<float name="Transparency">0</float>
				<Vector3 name="Velocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<token name="formFactorRaw">1</token>
				<token name="shape">1</token>
				<Vector3 name="size">
					<X>1.5</X>
					<Y>2.75</Y>
					<Z>1</Z>
				</Vector3>
			</Properties>
			<Item class="SpecialMesh" referent="RBXF091AD8FA97F49FF902663D3912AF02E">
				<Properties>
					<token name="LODX">2</token>
					<token name="LODY">2</token>
					<Content name="MeshId"><url>rbxassetid://684190121</url></Content>
					<token name="MeshType">5</token>
					<string name="Name">Mesh</string>
					<Vector3 name="Offset">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<Vector3 name="Scale">
						<X>1.97800004</X>
						<Y>1.97800004</Y>
						<Z>1.97800004</Z>
					</Vector3>
					<Content name="TextureId"><url>rbxassetid://686607825</url></Content>
					<Vector3 name="VertexColor">
						<X>1</X>
						<Y>1</Y>
						<Z>1</Z>
					</Vector3>
				</Properties>
			</Item>
		</Item>
		<Item class="Folder" referent="RBX47A122541C9243D18B7550F51E1F29CE">
			<Properties>
				<string name="Name">Remotes</string>
			</Properties>
			<Item class="RemoteFunction" referent="RBX2B872C93375D4311BD1A73C1D9D2FD22">
				<Properties>
					<string name="Name">ServerControl</string>
				</Properties>
			</Item>
			<Item class="RemoteFunction" referent="RBXE48AB598235A465E826DDDDCDD7051F5">
				<Properties>
					<string name="Name">ClientControl</string>
				</Properties>
			</Item>
		</Item>
		<Item class="LocalScript" referent="RBX97FA9EA97D0248C1856E6582251A1652">
			<Properties>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">LocalScript</string>
				<string name="ScriptGuid"></string>
				<ProtectedString name="Source"><![CDATA[--Made by Luckymaxer

Tool = script.Parent
Handle = Tool:WaitForChild("Handle")

Players = game:GetService("Players")

Remotes = Tool:WaitForChild("Remotes")
ServerControl = Remotes:WaitForChild("ServerControl")
ClientControl = Remotes:WaitForChild("ClientControl")

Rate = (1 / 60)

ToolEquipped = false

function CheckIfAlive()
	return (((Character and Character.Parent and Humanoid and Humanoid.Parent and Humanoid.Health > 0 and Player and Player.Parent) and true) or false)
end

function Equipped(Mouse)
	Character = Tool.Parent
	Player = Players:GetPlayerFromCharacter(Character)
	Humanoid = Character:FindFirstChild("Humanoid")
	ToolEquipped = true
	if not CheckIfAlive() then
		return
	end
	PlayerMouse = Player:GetMouse()
end

function Unequipped()
	ToolEquipped = false
end

function InvokeServer(mode, value)
	local ServerReturn
	pcall(function()
		ServerReturn = ServerControl:InvokeServer(mode, value)
	end)
	return ServerReturn
end

function OnClientInvoke(mode, value)
	if not ToolEquipped or not CheckIfAlive() or not mode then
		return
	end
	if mode == "MouseData" then
		return ((PlayerMouse and {Position = PlayerMouse.Hit.p, Target = PlayerMouse.Target}) or nil)
	end
end

ClientControl.OnClientInvoke = OnClientInvoke
Tool.Equipped:connect(Equipped)
Tool.Unequipped:connect(Unequipped)]]></ProtectedString>
			</Properties>
		</Item>
		<Item class="LocalScript" referent="RBX3430B005D4564AE5BC85AA308AA7D573">
			<Properties>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">MouseIcon</string>
				<string name="ScriptGuid"></string>
				<ProtectedString name="Source"><![CDATA[--Made by Luckymaxer

Mouse_Icon = "rbxasset://textures/GunCursor.png"
Reloading_Icon = "rbxasset://textures/GunWaitCursor.png"

Tool = script.Parent

Mouse = nil

function UpdateIcon()
	if Mouse then
		Mouse.Icon = Tool.Enabled and Mouse_Icon or Reloading_Icon
	end
end

function OnEquipped(ToolMouse)
	Mouse = ToolMouse
	UpdateIcon()
end

function OnChanged(Property)
	if Property == "Enabled" then
		UpdateIcon()
	end
end

Tool.Equipped:connect(OnEquipped)
Tool.Changed:connect(OnChanged)
]]></ProtectedString>
			</Properties>
		</Item>
		<Item class="Script" referent="RBX9EC719ABFB7B4CDBA05F588E3DC5A6AC">
			<Properties>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">Script</string>
				<string name="ScriptGuid">{8E3BCED5-2EA0-4A75-A3AB-F00A1E6DAD53}</string>
				<ProtectedString name="Source"><![CDATA[--Made by Luckymaxer

Tool = script.Parent
Handle = Tool:WaitForChild("Handle")

Players = game:GetService("Players")
Debris = game:GetService("Debris")
InsertService = game:GetService("InsertService")

RbxUtility = LoadLibrary("RbxUtility")
Create = RbxUtility.Create

Remover = script:WaitForChild("Remover")

DisplayModel = Tool:FindFirstChild("DisplayModel")
if DisplayModel then
	DisplayModel:Destroy()
end

NPCModule = require(191816425)

BaseUrl = "http://www.roblox.com/asset/?id="

BasePart = Create("Part"){
	Shape = Enum.PartType.Block,
	Material = Enum.Material.Plastic,
	TopSurface = Enum.SurfaceType.Smooth,
	BottomSurface = Enum.SurfaceType.Smooth,
	FormFactor = Enum.FormFactor.Custom,
	Size = Vector3.new(0.2, 0.2, 0.2),
	CanCollide = true,
	Locked = true,
	Anchored = false,
}

ReloadTime = 5
Duration = math.huge

BrainySmurfSpawned = false
BrainySmurfReady = false

CurrentBrainySmurf = {}

ToolEquipped = false

Remotes = Tool:WaitForChild("Remotes")

ServerControl = (Remotes:FindFirstChild("ServerControl") or Create("RemoteFunction"){
	Name = "ServerControl",
	Parent = Remotes,
})

ClientControl = (Remotes:FindFirstChild("ClientControl") or Create("RemoteFunction"){
	Name = "ClientControl",
	Parent = Remotes,
})

Handle.Transparency = 0
Tool.Enabled = true

function CreateBrainySmurfModel()
	local BrainySmurfModel = Create("Model"){
		Name = ToolName,
	}
	local RemoverClone = Remover:Clone()
	local Values = {
		{Name = "Creator", Class = "ObjectValue", Value = Player},
		{Name = "Tool", Class = "ObjectValue", Value = Tool},
	}
	for i, v in pairs(Values) do
		local Value = Create(v.Class){
			Name = v.Name,
			Value = v.Value,
			Parent = BrainySmurfModel,
		}
	end
	RemoverClone.Disabled = false
	RemoverClone.Parent = BrainySmurfModel
	return BrainySmurfModel
end

function SetUpBrainySmurf(Figure)
	Figure.Name = "BrainySmurf"
	local Humanoid = Figure:FindFirstChild("Humanoid")
	local Torso = Figure:FindFirstChild("Torso")
	if Humanoid and Torso then
		Humanoid.Died:connect(function()
			Debris:AddItem(Figure, 2)
		end)
		Humanoid.Jumping:connect(function()
		end)
		Figure.Changed:connect(function(Property)
			if Property == "Parent" and not Figure.Parent then
				Debris:AddItem(Figure, 2)
			end
		end)
	end
	return Figure
end

function SpawnBrainySmurf()
	local NPCData = NPCModule.GetTable({Key = "MakeNPC", Player = Player})
	local BrainySmurfData = NPCModule.GetTable({Key = "BrainySmurf", Player = Player})
	if not NPCData or not BrainySmurfData then
		return
	end
	local NPCFunctions = NPCData.GetData({Player = Player, Tool = Tool})
	local BrainySmurfFunctions = BrainySmurfData.GetData({Player = Player, Tool = Tool})
	BrainySmurfReady = false
	CurrentBrainySmurf = {}
	local BrainySmurfModel = CreateBrainySmurfModel()
	NPCFunctions.MakeNPC({NPC = BrainySmurfModel, AIControl = {Creator = Player, SelfSufficient = false}})
	local BrainySmurfNPC = BrainySmurfFunctions.MakeNPC()
	if not BrainySmurfNPC then
		return
	end
	local BaseNPC = SetUpBrainySmurf(BrainySmurfNPC:Clone())
	local CurrentlyEquipped = true
	BrainySmurfModel.Changed:connect(function(Property)
		if Property == "Parent" and not BrainySmurfModel.Parent then
			for i, v in pairs(CurrentBrainySmurf) do
				if v and v.Parent then
					v:Destroy()
				end
			end
			CurrentBrainySmurf = {}
			Tool.Enabled = false
			wait(ReloadTime)
			Tool.Enabled = true
			if ToolEquipped and CheckIfAlive() and not BrainySmurfSpawned then
				Handle.Transparency = 1
				SpawnBrainySmurf()
			else
				Handle.Transparency = 0
				BrainySmurfSpawned = false
			end
		end
	end)	
	Debris:AddItem(BrainySmurfModel, Duration)
	BrainySmurfModel.Parent = game:GetService("Workspace")
	local function CreatePawn()
		local BrainySmurfCopy = BaseNPC:Clone()
		local BrainySmurfHumanoid = BrainySmurfCopy.Humanoid
		local BrainySmurfTorso = BrainySmurfCopy.Torso
		table.insert(CurrentBrainySmurf, BrainySmurfCopy)
		for i,v in pairs(BrainySmurfCopy:GetChildren()) do
			if v.Name == BrainySmurfCopy.Name then
				v:Destroy()
			end
		end
		BrainySmurfCopy.Changed:connect(function(Property)
			if Property == "Parent" and not BrainySmurfCopy.Parent then
				for i, v in pairs(CurrentBrainySmurf) do
					if v == BrainySmurfCopy then
						table.remove(CurrentBrainySmurf, i)
						if #CurrentBrainySmurf == 0 then
							BrainySmurfSpawned = false
							if BrainySmurfModel and BrainySmurfModel.Parent then
								Debris:AddItem(BrainySmurfModel, 1)
								BrainySmurfModel:Destroy()
							end
						end
					end
				end
			end
		end)
		local OffsetValue = BrainySmurfCopy.Offset
		OffsetValue.Value = Vector3.new(4, 0, 0)
		BrainySmurfCopy.Parent = BrainySmurfModel
		BrainySmurfTorso.CFrame = (Torso.CFrame * CFrame.new(OffsetValue.Value) - Vector3.new(0, 0.2, 0))
		BrainySmurfHumanoid:ChangeState(Enum.HumanoidStateType.Freefall)
	end
	for i = 1, 1 do
		CreatePawn()
	end
	BrainySmurfReady = true
end

function Activated()
	if not Tool.Enabled or not ToolEquipped then
		return
	end
	local BrainySmurfModel = game:GetService("Workspace"):FindFirstChild(ToolName)
	if BrainySmurfModel then
		local MouseData = InvokeClient("MouseData")
		if not MouseData then
			return
		end
		local MousePosition = MouseData.Position
		if not MousePosition then
			return
		end
		local MouseTarget = MouseData.Target
		for i, v in pairs(CurrentBrainySmurf) do
			if v and v.Parent then
				local TargetPos = v:FindFirstChild("TargetPos")
				local Mode = v:FindFirstChild("Mode")
				local Target = v:FindFirstChild("Target")
				if TargetPos and Mode and Target then
					if MouseTarget and MouseTarget.Parent then
						--TargetPos.Value = MousePosition
						--Mode.Value = "MoveTo"
						--Target.Value = nil
					end
				end
			end
		end
	elseif not BrainySmurfModel and not BrainySmurfSpawned then
		Handle.Transparency = 1
		BrainySmurfSpawned = true
		SpawnBrainySmurf()
	end
end


function CheckIfAlive()
	return (((Player and Player.Parent and Character and Character.Parent and Humanoid and Humanoid.Parent and Humanoid.Health > 0 and Torso and Torso.Parent) and true) or false)
end

function Equipped()
	Character = Tool.Parent
	Player = Players:GetPlayerFromCharacter(Character)
	Humanoid = Character:FindFirstChild("Humanoid")
	Torso = Character:FindFirstChild("HumanoidRootPart")
	if not CheckIfAlive() then
		return
	end
	ToolName = (Player.Name .. "'sBrainySmurf")
	ToolEquipped = true
	Spawn(function()
		if ToolEquipped and CheckIfAlive() then
			Activated()
		end
	end)
end

function Unequipped()
	ToolEquipped = false
end

function InvokeClient(Mode, Value)
	local ClientReturn = nil
	pcall(function()
		ClientReturn = ClientControl:InvokeClient(Player, Mode, Value)
	end)
	return ClientReturn
end

function OnServerInvoke(player, Mode, Value)
	if player ~= Player or not ToolEquipped or not CheckIfAlive() or not Mode or not Value then
		return
	end
end

ServerControl.OnServerInvoke = OnServerInvoke

Tool.Changed:connect(function(Property)
	if Property == "Parent" and Tool.Parent then
		Handle.Transparency = (((Tool.Parent:IsA("Backpack") or Players:GetPlayerFromCharacter(Tool.Parent) and ((not BrainySmurfSpawned and 0) or 1)) or 0))
	end
end)

Tool.Activated:connect(Activated)
Tool.Equipped:connect(Equipped)
Tool.Unequipped:connect(Unequipped)]]></ProtectedString>
			</Properties>
			<Item class="Script" referent="RBX61152C3F427B4C2AA9076773BC04159A">
				<Properties>
					<bool name="Disabled">true</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Remover</string>
					<string name="ScriptGuid"></string>
					<ProtectedString name="Source"><![CDATA[--Made by Luckymaxer

Model = script.Parent

Players = game:GetService("Players")
Debris = game:GetService("Debris")

Creator = Model:FindFirstChild("Creator")
Tool = Model:FindFirstChild("Tool")

function DestroyModel()
	Debris:AddItem(Model, 2)
end

if not Creator or not Creator.Value or not Creator.Value:IsA("Player") or not Creator.Value.Parent or not Tool or not Tool.Value or not Tool.Value.Parent then
	DestroyModel()
	return
end

Creator = Creator.Value
Tool = Tool.Value

Character = Creator.Character
if not Character then
	DestroyModel()
	return
end

Creator.Changed:connect(function(Property)
	if Property == "Parent" and not Creator.Parent then
		DestroyModel()
	end
end)

Character.Changed:connect(function(Property)
	if Property == "Parent" and not Character.Parent then
		DestroyModel()
	end
end)

Tool.Changed:connect(function(Property)
	if Property == "Parent" and (not Tool.Parent or (not Tool.Parent:IsA("Backpack") and not Players:GetPlayerFromCharacter(Tool.Parent))) then
		DestroyModel()
	end
end)]]></ProtectedString>
				</Properties>
			</Item>
		</Item>
		<Item class="Camera" referent="RBX2F254DE79534473F9B35F78907B29C37">
			<Properties>
				<CoordinateFrame name="CFrame">
					<X>4.28354788</X>
					<Y>14.5443459</Y>
					<Z>24.7704468</Z>
					<R00>0.559347034</R00>
					<R01>-0.129681453</R01>
					<R02>0.818726838</R02>
					<R10>-0</R10>
					<R11>0.987686872</R11>
					<R12>0.156443715</R12>
					<R20>-0.828933597</R20>
					<R21>-0.0875063315</R21>
					<R22>0.552459776</R22>
				</CoordinateFrame>
				<Ref name="CameraSubject">null</Ref>
				<token name="CameraType">0</token>
				<float name="FieldOfView">40</float>
				<CoordinateFrame name="Focus">
					<X>1.17239022</X>
					<Y>13.9498606</Y>
					<Z>22.6711025</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<bool name="HeadLocked">true</bool>
				<float name="HeadScale">1</float>
				<string name="Name">ThumbnailCamera</string>
			</Properties>
		</Item>
	</Item>
</roblox>