<roblox xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.roblox.com/roblox.xsd" version="4">
	<External>null</External>
	<External>nil</External>
	<Item class="Tool" referent="RBXA6B7660B1CCB47F0A1183F2AF710AE93">
		<Properties>
			<bool name="CanBeDropped">true</bool>
			<bool name="Enabled">true</bool>
			<CoordinateFrame name="Grip">
				<X>0.300000012</X>
				<Y>-0.200000003</Y>
				<Z>0.200000003</Z>
				<R00>1</R00>
				<R01>0</R01>
				<R02>0</R02>
				<R10>0</R10>
				<R11>1</R11>
				<R12>0</R12>
				<R20>0</R20>
				<R21>0</R21>
				<R22>1</R22>
			</CoordinateFrame>
			<bool name="ManualActivationOnly">false</bool>
			<string name="Name">Trollamom</string>
			<Content name="TextureId"><url>http://www.roblox.com/asset?id=115302207</url></Content>
			<string name="ToolTip"></string>
		</Properties>
		<Item class="Script" referent="RBXCDD9D412612A4F21A8EDD1E52F5CB577">
			<Properties>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">Script</string>
				<ProtectedString name="Source"><![CDATA[-- Rescripted by Luckymaxer

Tool = script.Parent
Handle = Tool:WaitForChild("Handle")

Players = game:GetService("Players")
Debris = game:GetService("Debris")
InsertService = game:GetService("InsertService")

AIScript = script:WaitForChild("AIScript")
RemoverScript = script:WaitForChild("RemoverScript")

Functions = require(script:WaitForChild("Functions"))

RbxUtility = LoadLibrary("RbxUtility")
Create = RbxUtility.Create

FigureModel = InsertService:LoadAsset(105428829)
Figure = FigureModel:GetChildren()[1]:Clone()
Debris:AddItem(FigureModel, 1)

Sounds = {
	LaserSound = Handle:WaitForChild("LaserSound")
}

BasePart = Create("Part"){
	Material = Enum.Material.Plastic,
	Shape = Enum.PartType.Block,
	TopSurface = Enum.SurfaceType.Smooth,
	BottomSurface = Enum.SurfaceType.Smooth,
	FormFactor = Enum.FormFactor.Custom,
	Size = Vector3.new(0.2, 0.2, 0.2),
	Anchored = false,
	CanCollide = true,
	Locked = true,
}

LaserDamage = 8
ChanceToSpawn = 0.1
Duration = 30
CoolDown = 1

SpawnOffset = Vector3.new(15, 0, 15)

RayPartsLeft = {}
RayPartsRight = {}

ToolEquipped = false

ServerControl = (Tool:FindFirstChild("ServerControl") or Create("RemoteFunction"){
	Name = "ServerControl",
	Parent = Tool,
})

ClientControl = (Tool:FindFirstChild("ClientControl") or Create("RemoteFunction"){
	Name = "ClientControl",
	Parent = Tool,
})

for i, v in pairs(Tool:GetChildren()) do
	if v:IsA("BasePart") and v ~= Handle then
		v:Destroy()
	end
end

Tool.Enabled = true

function ResetRayParts()
	for i, v in pairs({RayPartsLeft, RayPartsRight}) do
		for ii, vv in pairs(v) do
			if vv and vv.Parent then
				vv:Destroy()
			end
		end
	end
	RayPartsLeft, RayPartsRight = {}, {}
end

function CastLightRay(StartPos, EndPos, Parts, EffectFunction)
	local EndPos = StartPos + ((EndPos - StartPos).unit * 50)
	local Color = BrickColor.new(1, 0, 0)
	local SegLength = 5
	local SegSpeed = 0.2

	local RayHit, RayPos = game:GetService("Workspace"):FindPartOnRay(Ray.new(StartPos, (EndPos - StartPos)), Character)
	if RayPos then
		EndPos = RayPos
	end
	
	if RayHit and RayHit.Parent then
		local character = RayHit.Parent
		if character:IsA("Hat") then
			character = character.Parent
		end
		local IsTeamMate = false
		local player = Players:GetPlayerFromCharacter(character)
		if player and Functions.IsTeamMate(Player, player) then
			IsTeamMate = true
		end
		local humanoid = character:FindFirstChild("Humanoid")
		if humanoid and humanoid.Health > 0 and not IsTeamMate then
			EffectFunction(humanoid, (EndPos - StartPos).unit)
		end
	end	
	
	local NumSegments = math.floor(math.min(((StartPos - EndPos).Magnitude / SegLength), 50))
	local InitNumParts = #Parts
	for i = NumSegments, InitNumParts, 1 do
		if Parts[i] then
			Parts[i]:Destroy()
			Parts[i] = nil
		end
	end
	
	for i = 1, NumSegments, 1 do
		if not Parts[i] then
			local Laser = BasePart:Clone()
			Laser.Name = "Laser"
			Laser.BrickColor = Color
			Laser.Size = Vector3.new(0, 0, SegLength)
			Laser.Anchored = true
			Laser.CanCollide = false
			Laser.Parent = Tool
			local tlight = Create("PointLight"){
				Name = "Light",
				Color = Color.Color,
				Range = (((math.sin(tick() * 3) + 1) * 1) + 5),
				Brightness = (((math.sin(tick() * 3) + 1) * 1) + 1),
				Parent = Laser,
			}
			Parts[i] = Laser
		end
		Parts[i].CFrame = CFrame.new((((i - 0.4) * (EndPos - StartPos).Unit * SegLength) + StartPos), EndPos)
	end
	
	return Parts
end

function DamageFunction(humanoid)
	if humanoid and humanoid.Health > 0 then
		Functions.UntagHumanoid(humanoid)
		Functions.TagHumanoid(humanoid, Player)
		humanoid:TakeDamage(LaserDamage)
	end
end

function ShootLaser()
	local StartTime = tick()
	Sounds.LaserSound:Play()
	while ToolEquipped and (tick() - StartTime) <= 0.5 do
		local StartPoint = Handle.Position + Handle.CFrame:vectorToWorldSpace(Vector3.new(-0.2, 0.8, -0.2))
		local MousePosition = InvokeClient("MousePosition")
		if MousePosition then
			MousePosition = MousePosition.Position
		end
		RayPartsLeft = CastLightRay(StartPoint, MousePosition, RayPartsLeft, DamageFunction)
		StartPoint = Handle.Position + Handle.CFrame:vectorToWorldSpace(Vector3.new(0.2, 0.8, -0.2))
		RayPartsRight = CastLightRay(StartPoint, MousePosition, RayPartsRight, DamageFunction)
		wait()
	end
	Sounds.LaserSound:Stop()
	ResetRayParts()
end

function Activated()
	if not Tool.Enabled or not CheckIfAlive() then
		return
	end
	Tool.Enabled = false
	Spawn(function()
		ShootLaser()
	end)
	if (not FigureCopy or not FigureCopy.Parent) and math.random() <= ChanceToSpawn then
		FigureCopy = Figure:Clone()
		if FigureCopy then
			local Values = {
				{Name = "Creator", Class = "ObjectValue", Value = Player},
				{Name = "Tool", Class = "ObjectValue", Value = Tool},
			}
			for i, v in pairs(Values) do
				local Value = Create(v.Class){
					Name = v.Name,
					Value = v.Value,
					Parent = FigureCopy,
				}
			end
			for i, v in pairs({AIScript, RemoverScript}) do
				local ScriptClone = v:Clone()
				ScriptClone.Disabled = false
				ScriptClone.Parent = FigureCopy
			end
			Debris:AddItem(FigureCopy, Duration)
			FigureCopy.Parent = game:GetService("Workspace")
			FigureCopy:MoveTo(Handle.Position + SpawnOffset)
		end
	end
	wait(CoolDown)
	Tool.Enabled = true
end

function CheckIfAlive()
	return (((Character and Character.Parent and Humanoid and Humanoid.Parent and Humanoid.Health > 0 and Player and Player.Parent) and true) or false)
end

function Equipped()
	Character = Tool.Parent
	Humanoid = Character:FindFirstChild("Humanoid")
	Player = Players:GetPlayerFromCharacter(Character)
	if not CheckIfAlive() then
		return
	end
	ToolEquipped = true
end

function Unequipped()
	Spawn(function()
		for i, v in pairs({FigureCopy}) do
			if v and v.Parent then
				v:Destroy()
			end
		end
		ResetRayParts()
	end)
	Sounds.LaserSound:Stop()
	ToolEquipped = false
end

function InvokeClient(Mode, Value)
	local ClientReturn = nil
	pcall(function()
		ClientReturn = ClientControl:InvokeClient(Player, Mode, Value)
	end)
	return ClientReturn
end

function OnServerInvoke(player, mode, value)
	if player ~= Player or not mode then
		return
	end
end

ServerControl.OnServerInvoke = OnServerInvoke

Tool.Activated:connect(Activated)
Tool.Equipped:connect(Equipped)
Tool.Unequipped:connect(Unequipped)]]></ProtectedString>
			</Properties>
			<Item class="Script" referent="RBXCBB887D86CE74B2888D054DFDB81D57D">
				<Properties>
					<bool name="Disabled">true</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">AIScript</string>
					<ProtectedString name="Source"><![CDATA[--Rescripted by Luckymaxer

Figure = script.Parent

Players = game:GetService("Players")
Debris = game:GetService("Debris")

Functions = require(script:WaitForChild("Functions"))
Creator = Figure:WaitForChild("Creator")

Humanoid = Figure:WaitForChild("Humanoid")
Torso = Figure:WaitForChild("Torso")
Throwable = Figure:WaitForChild("Throwable")

RbxUtility = LoadLibrary("RbxUtility")
Create = RbxUtility.Create

ThrowDamage = 15
ThrowChance = 0.05
Duration = 10

Rate = (1 / 60)

Sounds = {
	Throw = script:WaitForChild("Throw"),
	Swoosh = script:WaitForChild("Swoosh"),
	Smack = script:WaitForChild("Smack"),
}

LastThrowTime = 0

Humanoid.Health = Humanoid.MaxHealth

function CheckIfAlive()
	return (((Figure and Figure.Parent and Humanoid and Humanoid.Parent and Humanoid.Health > 0 and Throwable and Throwable.Parent) and true) or false)
end

function GetCreator()
	local CreatorValue = Creator.Value
	return ((CreatorValue and CreatorValue.Parent and ((CreatorValue:IsA("Player") and CreatorValue) or Players:GetPlayerFromCharacter(CreatorValue))) or nil)
end

function FindClosestPlayer()
	local MaxDistance = 150
	local ClosestPlayer = {Player = nil, Distance = MaxDistance}
	local SearchVec = Vector3.new(MaxDistance, MaxDistance, MaxDistance)
	local SearchRegion = Region3.new((Torso.Position - SearchVec), (Torso.Position + SearchVec))
	local Creator = GetCreator()
	local CreatorCharacter = ((Creator and Creator.Character) or nil)
	local PartsInRegion = Functions.GetParts(SearchRegion, 500, {Figure, CreatorCharacter})
	for i, v in pairs(PartsInRegion) do
		local PartDistance = (Torso.Position - v.Position).Magnitude
		local character = v.Parent
		local humanoid = character:FindFirstChild("Humanoid")
		if humanoid and humanoid:IsA("Humanoid") and humanoid.Health > 0 and PartDistance < ClosestPlayer.Distance then
			ClosestPlayer.Player = character
			ClosestPlayer.Distance = PartDistance
		end
	end
	return ClosestPlayer.Player
end

function ThrowableReachedTarget(Part, TargetHumanoid)
	local SmackSound = Sounds.Smack:Clone()
	SmackSound.Parent = Part
	SmackSound:Play()
	if TargetHumanoid.Health > 0 then
		Functions.UntagHumanoid(TargetHumanoid)
		Functions.TagHumanoid(TargetHumanoid, GetCreator())
		TargetHumanoid:TakeDamage(ThrowDamage)
	end
	Part.Transparency = 1
	Part.CanCollide = false
	Part.Anchored = true
	Debris:AddItem(Part, 1)
end

function PickNewTarget(Part)
	local Homing = Part:FindFirstChild('Homing')
	if Homing then
		local TargetPlayer = FindClosestPlayer(Part.Position)
		if TargetPlayer then
			local humanoid = TargetPlayer:FindFirstChild("humanoid")
			local head = TargetPlayer:FindFirstChild("Head")
			if humanoid and humanoid.Health > 0 and head then
				Homing.Target = head
				return
			end
		end
		Homing:Destroy()
	end
	Part.CanCollide = false
end

function TargetModelChanged(Property, Part, Target)
	if Property == "Parent" and not Target.Parent then
		PickNewTarget(Part)
	end
end

while CheckIfAlive() do
	local Creator = GetCreator()
	if Creator then
		local CreatorCharacter = Creator.Character
		if CreatorCharacter and CreatorCharacter.Parent then
			local CreatorHumanoid = CreatorCharacter:FindFirstChild("Humanoid")
			local CreatorTorso = CreatorCharacter:FindFirstChild("Torso")
			if CreatorHumanoid and CreatorHumanoid.Health > 0 and CreatorTorso then
				Humanoid:MoveTo(CreatorTorso.Position + Vector3.new(-4, 0, -4))
			end
		end
		local Now = tick()
		if (Now - LastThrowTime) > 0.5 and math.random() <= ThrowChance then
			LastThrow = Now
			local TargetPlayer = FindClosestPlayer(Torso.Position)
			if TargetPlayer then
				local TargetHumanoid = TargetPlayer:FindFirstChild("Humanoid")
				local TargetHead = TargetPlayer:FindFirstChild("Head")
				if TargetHumanoid and TargetHumanoid.Health > 0 and TargetHead then
					local Sound = Sounds.Throw:Clone()
					Debris:AddItem(Sound, 1.5)
					Sound.Parent = Throwable
					Sound:Play()
					local Projectile = Throwable:Clone()
					Projectile.Name = "Projectile"
					local Homing = Create("RocketPropulsion"){
						Name = "Homing",
						Target = TargetHead,
					}
					Homing.ReachedTarget:connect(function()
						ThrowableReachedTarget(Projectile, TargetHumanoid)
					end)
					TargetPlayer.Changed:connect(function(Property)
						TargetModelChanged(Property, Projectile, TargetPlayer)
					end)
					Homing.Parent = Projectile
					Debris:AddItem(Projectile, Duration)
					Projectile.Velocity = Vector3.new(0, 100, 0)
					Projectile.Parent = game:GetService("Workspace")
					wait(0.5)
					if Projectile and Projectile.Parent then
						local Sound = Sounds.Swoosh:Clone()
						Sound.Parent = Projectile
						Sound:Play()
						Projectile.Size = Vector3.new(0.5, 1, 0.5)
						Projectile.CanCollide = true
						Homing:Fire()
					end
				end
			end
		end
	end
	wait(Rate)
end

Debris:AddItem(Figure, 0)]]></ProtectedString>
				</Properties>
				<Item class="Sound" referent="RBXBB6B1E4758C44DCCB9ACCA829A7CAC98">
					<Properties>
						<bool name="Looped">false</bool>
						<string name="Name">Throw</string>
						<float name="Pitch">2</float>
						<bool name="PlayOnRemove">false</bool>
						<Content name="SoundId"><url>http://www.roblox.com/asset/?id=105420672</url></Content>
						<float name="Volume">0.5</float>
					</Properties>
				</Item>
				<Item class="Sound" referent="RBXFD1713D0452C4386BB887AAA0CCDDD15">
					<Properties>
						<bool name="Looped">true</bool>
						<string name="Name">Swoosh</string>
						<float name="Pitch">2</float>
						<bool name="PlayOnRemove">false</bool>
						<Content name="SoundId"><url>rbxasset://sounds/Rocket whoosh 01.wav</url></Content>
						<float name="Volume">0.200000003</float>
					</Properties>
				</Item>
				<Item class="Sound" referent="RBX33ED0255BF98498FBA84C4745FF3604D">
					<Properties>
						<bool name="Looped">false</bool>
						<string name="Name">Smack</string>
						<float name="Pitch">1</float>
						<bool name="PlayOnRemove">false</bool>
						<Content name="SoundId"><url>http://www.roblox.com/asset/?id=105424180</url></Content>
						<float name="Volume">0.5</float>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX8F4DE0CFC0AC46A4B597E4C3B4BF34FB">
					<Properties>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Functions</string>
						<ProtectedString name="Source"><![CDATA[--Made by Luckymaxer

Players = game:GetService("Players")
Debris = game:GetService("Debris")

ProjectileNames = {"Water", "Arrow", "Projectile", "Effect", "Rail", "Laser", "Ray", "Bullet", "ParticlePart"}

Functions = {
	
	CheckTableForString = (function(Table, String)
		for i, v in pairs(Table) do
			if string.lower(v) == string.lower(String) then
				return true
			end
		end
		return false
	end),

	CheckIntangible = (function(Hit)
		if Hit and Hit.Parent then
			if (Hit.Transparency >= 1 and not Hit.CanCollide) or Functions.CheckTableForString(ProjectileNames, Hit.Name) then
				return true
			end
			local ObjectParent = Hit.Parent
			local Character = ObjectParent.Parent
			local Humanoid = Character:FindFirstChild("Humanoid")
			if Humanoid and Humanoid.Health > 0 and ObjectParent:IsA("Hat") then
				return true
			end
		end
		return false
	end),
	
	CastRay = (function(StartPos, Vec, Length, Ignore, DelayIfHit)
		local RayHit, RayPos, RayNormal = game:GetService("Workspace"):FindPartOnRayWithIgnoreList(Ray.new(StartPos, Vec * Length), Ignore)
		if RayHit and Functions.CheckIntangible(RayHit) then
			if DelayIfHit then
				wait()
			end
			RayHit, RayPos, RayNormal = Functions.CastRay((RayPos + (Vec * 0.01)), Vec, (Length - ((StartPos - RayPos).magnitude)), Ignore, DelayIfHit)
		end
		return RayHit, RayPos, RayNormal
	end),

	IsTeamMate = (function(Player1, Player2)
		return (Player1 and Player2 and not Player1.Neutral and not Player2.Neutral and Player1.TeamColor == Player2.TeamColor)
	end),

	TagHumanoid = (function(humanoid, player)
		local Creator_Tag = Instance.new("ObjectValue")
		Creator_Tag.Name = "creator"
		Creator_Tag.Value = player
		Debris:AddItem(Creator_Tag, 2)
		Creator_Tag.Parent = humanoid
	end),

	UntagHumanoid = (function(humanoid)
		for i, v in pairs(humanoid:GetChildren()) do
			if v:IsA("ObjectValue") and v.Name == "creator" then
				v:Destroy()
			end
		end
	end),
	
	GetTotalParts = (function(MaxParts, PossibleParts, Parts)
		if MaxParts < PossibleParts then
			return MaxParts
		elseif Parts >= MaxParts then
			return 0
		elseif MaxParts >= PossibleParts then
			local PartCount = (MaxParts - PossibleParts)
			if Parts <= MaxParts then
				PartCount = (MaxParts - Parts)
				if PartCount > PossibleParts then
					return PossibleParts
				else
					return PartCount
				end
			elseif PartCount >= PossibleParts then
				return PossibleParts
			else
				return PartCount
			end
		end
	end),

	GetParts = (function(Region, MaxParts, Ignore)
		local Parts = {}
		local RerunFailed = false
		while #Parts < MaxParts and not RerunFailed do
			local Region = Region
			local PossibleParts = Functions.GetTotalParts(MaxParts, 100, #Parts)
			local PartsNearby = game:GetService("Workspace"):FindPartsInRegion3WithIgnoreList(Region, Ignore, PossibleParts)
			if #PartsNearby == 0 then
				RerunFailed = true
			else
				for i, v in pairs(PartsNearby) do
					table.insert(Parts, v)
					table.insert(Ignore, v)
				end
			end
		end
		return Parts
	end),
	
}

return Functions]]></ProtectedString>
					</Properties>
				</Item>
			</Item>
			<Item class="ModuleScript" referent="RBX8913C4F5B8084690809A2F1F93ECD887">
				<Properties>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Functions</string>
					<ProtectedString name="Source"><![CDATA[--Made by Luckymaxer

Players = game:GetService("Players")
Debris = game:GetService("Debris")

ProjectileNames = {"Water", "Arrow", "Projectile", "Effect", "Rail", "Laser", "Ray", "Bullet", "ParticlePart"}

Functions = {
	
	CheckTableForString = (function(Table, String)
		for i, v in pairs(Table) do
			if string.lower(v) == string.lower(String) then
				return true
			end
		end
		return false
	end),

	CheckIntangible = (function(Hit)
		if Hit and Hit.Parent then
			if (Hit.Transparency >= 1 and not Hit.CanCollide) or Functions.CheckTableForString(ProjectileNames, Hit.Name) then
				return true
			end
			local ObjectParent = Hit.Parent
			local Character = ObjectParent.Parent
			local Humanoid = Character:FindFirstChild("Humanoid")
			if Humanoid and Humanoid.Health > 0 and ObjectParent:IsA("Hat") then
				return true
			end
		end
		return false
	end),
	
	CastRay = (function(StartPos, Vec, Length, Ignore, DelayIfHit)
		local RayHit, RayPos, RayNormal = game:GetService("Workspace"):FindPartOnRayWithIgnoreList(Ray.new(StartPos, Vec * Length), Ignore)
		if RayHit and Functions.CheckIntangible(RayHit) then
			if DelayIfHit then
				wait()
			end
			RayHit, RayPos, RayNormal = Functions.CastRay((RayPos + (Vec * 0.01)), Vec, (Length - ((StartPos - RayPos).magnitude)), Ignore, DelayIfHit)
		end
		return RayHit, RayPos, RayNormal
	end),

	IsTeamMate = (function(Player1, Player2)
		return (Player1 and Player2 and not Player1.Neutral and not Player2.Neutral and Player1.TeamColor == Player2.TeamColor)
	end),

	TagHumanoid = (function(humanoid, player)
		local Creator_Tag = Instance.new("ObjectValue")
		Creator_Tag.Name = "creator"
		Creator_Tag.Value = player
		Debris:AddItem(Creator_Tag, 2)
		Creator_Tag.Parent = humanoid
	end),

	UntagHumanoid = (function(humanoid)
		for i, v in pairs(humanoid:GetChildren()) do
			if v:IsA("ObjectValue") and v.Name == "creator" then
				v:Destroy()
			end
		end
	end),
	
	GetTotalParts = (function(MaxParts, PossibleParts, Parts)
		if MaxParts < PossibleParts then
			return MaxParts
		elseif Parts >= MaxParts then
			return 0
		elseif MaxParts >= PossibleParts then
			local PartCount = (MaxParts - PossibleParts)
			if Parts <= MaxParts then
				PartCount = (MaxParts - Parts)
				if PartCount > PossibleParts then
					return PossibleParts
				else
					return PartCount
				end
			elseif PartCount >= PossibleParts then
				return PossibleParts
			else
				return PartCount
			end
		end
	end),

	GetParts = (function(Region, MaxParts, Ignore)
		local Parts = {}
		local RerunFailed = false
		while #Parts < MaxParts and not RerunFailed do
			local Region = Region
			local PossibleParts = Functions.GetTotalParts(MaxParts, 100, #Parts)
			local PartsNearby = game:GetService("Workspace"):FindPartsInRegion3WithIgnoreList(Region, Ignore, PossibleParts)
			if #PartsNearby == 0 then
				RerunFailed = true
			else
				for i, v in pairs(PartsNearby) do
					table.insert(Parts, v)
					table.insert(Ignore, v)
				end
			end
		end
		return Parts
	end),
	
}

return Functions]]></ProtectedString>
				</Properties>
			</Item>
			<Item class="Script" referent="RBX6CAC92BB755C412EAA2973C2226D688C">
				<Properties>
					<bool name="Disabled">true</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">RemoverScript</string>
					<ProtectedString name="Source"><![CDATA[--Made by Luckymaxer

Model = script.Parent
Humanoid = Model:FindFirstChild("Humanoid")

Players = game:GetService("Players")
Debris = game:GetService("Debris")

Creator = Model:FindFirstChild("Creator")
Tool = Model:FindFirstChild("Tool")

function DestroyModel()
	Debris:AddItem(Model, 5)
end

if not Creator or not Creator.Value or not Creator.Value:IsA("Player") or not Creator.Value.Parent or not Tool or not Tool.Value or not Tool.Value.Parent then
	DestroyModel()
	return
end

Creator = Creator.Value
Tool = Tool.Value

Character = Creator.Character
if not Character then
	DestroyModel()
	return
end

Creator.Changed:connect(function(Property)
	if Property == "Parent" and not Creator.Parent then
		DestroyModel()
	end
end)

Character.Changed:connect(function(Property)
	if Property == "Parent" and not Character.Parent then
		DestroyModel()
	end
end)

Tool.Changed:connect(function(Property)
	if Property == "Parent" then
		local Player = ((Tool.Parent and ((Tool.Parent:IsA("Backpack") and Tool.Parent.Parent) or Players:GetPlayerFromCharacter(Tool.Parent))) or nil)
		if (not Player or (Player and Player ~= Creator)) then
			DestroyModel()
		end
	end
end)

if Humanoid then
	Humanoid.Died:connect(function()
		DestroyModel()
	end)
end]]></ProtectedString>
				</Properties>
			</Item>
		</Item>
		<Item class="Part" referent="RBX4ACE2FE645A942C2B43D1A56550CE896">
			<Properties>
				<bool name="Anchored">false</bool>
				<float name="BackParamA">-0.5</float>
				<float name="BackParamB">0.5</float>
				<token name="BackSurface">0</token>
				<token name="BackSurfaceInput">0</token>
				<float name="BottomParamA">-0.5</float>
				<float name="BottomParamB">0.5</float>
				<token name="BottomSurface">0</token>
				<token name="BottomSurfaceInput">0</token>
				<int name="BrickColor">194</int>
				<CoordinateFrame name="CFrame">
					<X>-0.341601998</X>
					<Y>1.37072301</Y>
					<Z>-0.330565989</Z>
					<R00>0.426433623</R00>
					<R01>-0.0155618684</R01>
					<R02>0.904384851</R02>
					<R10>-1.52190238e-014</R10>
					<R11>0.999852002</R11>
					<R12>0.0172045846</R12>
					<R20>-0.904518723</R20>
					<R21>-0.00733661326</R21>
					<R22>0.426370502</R22>
				</CoordinateFrame>
				<bool name="CanCollide">true</bool>
				<float name="Elasticity">0.5</float>
				<float name="Friction">0.300000012</float>
				<float name="FrontParamA">-0.5</float>
				<float name="FrontParamB">0.5</float>
				<token name="FrontSurface">0</token>
				<token name="FrontSurfaceInput">0</token>
				<float name="LeftParamA">-0.5</float>
				<float name="LeftParamB">0.5</float>
				<token name="LeftSurface">0</token>
				<token name="LeftSurfaceInput">0</token>
				<bool name="Locked">true</bool>
				<token name="Material">256</token>
				<string name="Name">Handle</string>
				<float name="Reflectance">0</float>
				<float name="RightParamA">-0.5</float>
				<float name="RightParamB">0.5</float>
				<token name="RightSurface">0</token>
				<token name="RightSurfaceInput">0</token>
				<Vector3 name="RotVelocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<float name="TopParamA">-0.5</float>
				<float name="TopParamB">0.5</float>
				<token name="TopSurface">0</token>
				<token name="TopSurfaceInput">0</token>
				<float name="Transparency">0</float>
				<Vector3 name="Velocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<token name="formFactorRaw">3</token>
				<token name="shape">1</token>
				<Vector3 name="size">
					<X>2.59999943</X>
					<Y>2.60000038</Y>
					<Z>0.799999893</Z>
				</Vector3>
			</Properties>
			<Item class="SpecialMesh" referent="RBX5F5A56D92DD5418D95F88084E87D13BD">
				<Properties>
					<token name="LODX">2</token>
					<token name="LODY">2</token>
					<Content name="MeshId"><url>http://www.roblox.com/asset/?id=115302268</url></Content>
					<token name="MeshType">5</token>
					<string name="Name">Mesh</string>
					<Vector3 name="Offset">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<Vector3 name="Scale">
						<X>0.5</X>
						<Y>0.5</Y>
						<Z>0.5</Z>
					</Vector3>
					<Content name="TextureId"><url>http://www.roblox.com/asset/?id=115302225</url></Content>
					<Vector3 name="VertexColor">
						<X>1</X>
						<Y>1</Y>
						<Z>1</Z>
					</Vector3>
				</Properties>
			</Item>
			<Item class="Sound" referent="RBX6697C40A5E034A4D81C6628A52328FF0">
				<Properties>
					<bool name="Looped">false</bool>
					<string name="Name">LaserSound</string>
					<float name="Pitch">1.20000005</float>
					<bool name="PlayOnRemove">false</bool>
					<Content name="SoundId"><url>http://www.roblox.com/asset/?id=115400975</url></Content>
					<float name="Volume">0.5</float>
				</Properties>
			</Item>
		</Item>
		<Item class="LocalScript" referent="RBX5F3AAA8585B64C2A9D732E218FC1E0A9">
			<Properties>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">MouseIcon</string>
				<ProtectedString name="Source"><![CDATA[--Made by Luckymaxer

Mouse_Icon = "rbxasset://textures/GunCursor.png"
Reloading_Icon = "rbxasset://textures/GunWaitCursor.png"

Tool = script.Parent

Mouse = nil

function UpdateIcon()
	if Mouse then
		Mouse.Icon = Tool.Enabled and Mouse_Icon or Reloading_Icon
	end
end

function OnEquipped(ToolMouse)
	Mouse = ToolMouse
	UpdateIcon()
end

function OnChanged(Property)
	if Property == "Enabled" then
		UpdateIcon()
	end
end

Tool.Equipped:connect(OnEquipped)
Tool.Changed:connect(OnChanged)]]></ProtectedString>
			</Properties>
		</Item>
		<Item class="Camera" referent="RBX1453922D76D647FBA727EC7498C52690">
			<Properties>
				<Ref name="CameraSubject">null</Ref>
				<token name="CameraType">0</token>
				<CoordinateFrame name="CoordinateFrame">
					<X>-2.35294366</X>
					<Y>1.94130445</Y>
					<Z>-1.35087526</Z>
					<R00>-0.449165553</R00>
					<R01>0.161277354</R01>
					<R02>-0.878771901</R02>
					<R10>7.4505806e-009</R10>
					<R11>0.983573079</R11>
					<R12>0.180511057</R12>
					<R20>0.893448591</R20>
					<R21>0.0810793415</R21>
					<R22>-0.441787124</R22>
				</CoordinateFrame>
				<float name="FieldOfView">70</float>
				<CoordinateFrame name="Focus">
					<X>-0.867817283</X>
					<Y>1.63624036</Y>
					<Z>-0.604254067</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<string name="Name">ThumbnailCamera</string>
			</Properties>
		</Item>
		<Item class="LocalScript" referent="RBX9EB971540BC44E45897807325B51A0BF">
			<Properties>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">LocalScript</string>
				<ProtectedString name="Source"><![CDATA[--Made by Luckymaxer

Tool = script.Parent
Handle = Tool:WaitForChild("Handle")

Players = game:GetService("Players")
RunService = game:GetService("RunService")
UserInputService = game:GetService("UserInputService")

Animations = {}

ServerControl = Tool:WaitForChild("ServerControl")
ClientControl = Tool:WaitForChild("ClientControl")

InputCheck = Instance.new("ScreenGui")
InputCheck.Name = "InputCheck"
InputButton = Instance.new("ImageButton")
InputButton.Name = "InputButton"
InputButton.Image = ""
InputButton.BackgroundTransparency = 1
InputButton.ImageTransparency = 1
InputButton.Size = UDim2.new(1, 0, 1, 0)
InputButton.Parent = InputCheck

Rate = (1 / 60)

ToolEquipped = false

function SetAnimation(mode, value)
	if mode == "PlayAnimation" and value and ToolEquipped and Humanoid then
		for i, v in pairs(Animations) do
			if v.Animation == value.Animation then
				v.AnimationTrack:Stop()
				table.remove(Animations, i)
			end
		end
		local AnimationTrack = Humanoid:LoadAnimation(value.Animation)
		table.insert(Animations, {Animation = value.Animation, AnimationTrack = AnimationTrack})
		AnimationTrack:Play(value.FadeTime, value.Weight, value.Speed)
	elseif mode == "StopAnimation" and value then
		for i, v in pairs(Animations) do
			if v.Animation == value.Animation then
				v.AnimationTrack:Stop(value.FadeTime)
				table.remove(Animations, i)
			end
		end
	end
end

function CheckIfAlive()
	return (((Character and Character.Parent and Humanoid and Humanoid.Parent and Humanoid.Health > 0 and Player and Player.Parent) and true) or false)
end

function Equipped(Mouse)
	Character = Tool.Parent
	Player = Players:GetPlayerFromCharacter(Character)
	Humanoid = Character:FindFirstChild("Humanoid")
	ToolEquipped = true
	if not CheckIfAlive() then
		return
	end
	Spawn(function()
		PlayerMouse = Mouse
		Mouse.Button1Down:connect(function()
			InvokeServer("Button1Click", {Down = true})
		end)
		Mouse.Button1Up:connect(function()
			InvokeServer("Button1Click", {Down = false})
		end)
		Mouse.KeyDown:connect(function(Key)
			InvokeServer("KeyPress", {Key = Key, Down = true})
		end)
		Mouse.KeyUp:connect(function(Key)
			InvokeServer("KeyPress", {Key = Key, Down = false})
		end)
		local PlayerGui = Player:FindFirstChild("PlayerGui")
		if PlayerGui then
			if UserInputService.TouchEnabled then
				InputCheckClone = InputCheck:Clone()
				InputCheckClone.InputButton.InputBegan:connect(function()
					InvokeServer("Button1Click", {Down = true})
				end)
				InputCheckClone.InputButton.InputEnded:connect(function()
					InvokeServer("Button1Click", {Down = false})
				end)
				InputCheckClone.Parent = PlayerGui
			end
		end
	end)
end

function Unequipped()
	if InputCheckClone and InputCheckClone.Parent then
		InputCheckClone:Destroy()
	end
	for i, v in pairs(Animations) do
		if v and v.AnimationTrack then
			v.AnimationTrack:Stop()
		end
	end
	Animations = {}
	ToolEquipped = false
end

function InvokeServer(mode, value)
	pcall(function()
		local ServerReturn = ServerControl:InvokeServer(mode, value)
		return ServerReturn
	end)
end

function OnClientInvoke(mode, value)
	if mode == "PlayAnimation" and value and ToolEquipped and Humanoid then
		SetAnimation("PlayAnimation", value)
	elseif mode == "StopAnimation" and value then
		SetAnimation("StopAnimation", value)
	elseif mode == "PlaySound" and value then
		value:Play()
	elseif mode == "StopSound" and value then
		value:Stop()
	elseif mode == "MousePosition" then
		return ((PlayerMouse and {Position = PlayerMouse.Hit.p, Target = PlayerMouse.Target}) or nil)
	end
end

ClientControl.OnClientInvoke = OnClientInvoke
Tool.Equipped:connect(Equipped)
Tool.Unequipped:connect(Unequipped)]]></ProtectedString>
			</Properties>
		</Item>
	</Item>
</roblox>